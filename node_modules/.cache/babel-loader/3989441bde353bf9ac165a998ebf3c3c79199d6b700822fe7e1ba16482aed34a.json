{"ast":null,"code":"import _toConsumableArray from \"C:/Users/USER/Desktop/apna/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/USER/Desktop/apna/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"C:/Users/USER/Desktop/apna/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/USER/Desktop/apna/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport var OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      ownerDocument = _ref.ownerDocument,\n      _ref$handleContainerO = _ref.handleContainerOverflow,\n      handleContainerOverflow = _ref$handleContainerO === void 0 ? true : _ref$handleContainerO,\n      _ref$isRTL = _ref.isRTL,\n      isRTL = _ref$isRTL === void 0 ? false : _ref$isRTL;\n    _classCallCheck(this, ModalManager);\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n  _createClass(ModalManager, [{\n    key: \"getScrollbarWidth\",\n    value: function getScrollbarWidth() {\n      return getBodyScrollbarWidth(this.ownerDocument);\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement() {\n      return (this.ownerDocument || document).body;\n    }\n  }, {\n    key: \"setModalAttributes\",\n    value: function setModalAttributes(_modal) {// For overriding\n    }\n  }, {\n    key: \"removeModalAttributes\",\n    value: function removeModalAttributes(_modal) {// For overriding\n    }\n  }, {\n    key: \"setContainerStyle\",\n    value: function setContainerStyle(containerState) {\n      var style = {\n        overflow: 'hidden'\n      }; // we are only interested in the actual `style` here\n      // because we will override it\n\n      var paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n      var container = this.getElement();\n      containerState.style = _defineProperty({\n        overflow: container.style.overflow\n      }, paddingProp, container.style[paddingProp]);\n      if (containerState.scrollBarWidth) {\n        // use computed style, here to get the real padding\n        // to add our scrollbar width\n        style[paddingProp] = \"\".concat(parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth, \"px\");\n      }\n      container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n      css(container, style);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n      _toConsumableArray(this.modals).forEach(function (m) {\n        return _this.remove(m);\n      });\n    }\n  }, {\n    key: \"removeContainerStyle\",\n    value: function removeContainerStyle(containerState) {\n      var container = this.getElement();\n      container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n      Object.assign(container.style, containerState.style);\n    }\n  }, {\n    key: \"add\",\n    value: function add(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n      if (modalIdx !== -1) {\n        return modalIdx;\n      }\n      modalIdx = this.modals.length;\n      this.modals.push(modal);\n      this.setModalAttributes(modal);\n      if (modalIdx !== 0) {\n        return modalIdx;\n      }\n      this.state = {\n        scrollBarWidth: this.getScrollbarWidth(),\n        style: {}\n      };\n      if (this.handleContainerOverflow) {\n        this.setContainerStyle(this.state);\n      }\n      return modalIdx;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(modal) {\n      var modalIdx = this.modals.indexOf(modal);\n      if (modalIdx === -1) {\n        return;\n      }\n      this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n      // clean up the container\n\n      if (!this.modals.length && this.handleContainerOverflow) {\n        this.removeContainerStyle(this.state);\n      }\n      this.removeModalAttributes(modal);\n    }\n  }, {\n    key: \"isTopModal\",\n    value: function isTopModal(modal) {\n      return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n    }\n  }]);\n  return ModalManager;\n}();\nexport default ModalManager;","map":{"version":3,"names":["css","dataAttr","getBodyScrollbarWidth","OPEN_DATA_ATTRIBUTE","ModalManager","_ref","arguments","length","undefined","ownerDocument","_ref$handleContainerO","handleContainerOverflow","_ref$isRTL","isRTL","_classCallCheck","modals","_createClass","key","value","getScrollbarWidth","getElement","document","body","setModalAttributes","_modal","removeModalAttributes","setContainerStyle","containerState","style","overflow","paddingProp","container","_defineProperty","scrollBarWidth","concat","parseInt","setAttribute","reset","_this","_toConsumableArray","forEach","m","remove","removeContainerStyle","removeAttribute","Object","assign","add","modal","modalIdx","indexOf","push","state","splice","isTopModal"],"sources":["C:/Users/USER/Desktop/apna/node_modules/@restart/ui/esm/ModalManager.js"],"sourcesContent":["import css from 'dom-helpers/css';\nimport { dataAttr } from './DataKey';\nimport getBodyScrollbarWidth from './getScrollbarWidth';\nexport const OPEN_DATA_ATTRIBUTE = dataAttr('modal-open');\n/**\n * Manages a stack of Modals as well as ensuring\n * body scrolling is is disabled and padding accounted for\n */\n\nclass ModalManager {\n  constructor({\n    ownerDocument,\n    handleContainerOverflow = true,\n    isRTL = false\n  } = {}) {\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.isRTL = isRTL;\n    this.modals = [];\n    this.ownerDocument = ownerDocument;\n  }\n\n  getScrollbarWidth() {\n    return getBodyScrollbarWidth(this.ownerDocument);\n  }\n\n  getElement() {\n    return (this.ownerDocument || document).body;\n  }\n\n  setModalAttributes(_modal) {// For overriding\n  }\n\n  removeModalAttributes(_modal) {// For overriding\n  }\n\n  setContainerStyle(containerState) {\n    const style = {\n      overflow: 'hidden'\n    }; // we are only interested in the actual `style` here\n    // because we will override it\n\n    const paddingProp = this.isRTL ? 'paddingLeft' : 'paddingRight';\n    const container = this.getElement();\n    containerState.style = {\n      overflow: container.style.overflow,\n      [paddingProp]: container.style[paddingProp]\n    };\n\n    if (containerState.scrollBarWidth) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style[paddingProp] = `${parseInt(css(container, paddingProp) || '0', 10) + containerState.scrollBarWidth}px`;\n    }\n\n    container.setAttribute(OPEN_DATA_ATTRIBUTE, '');\n    css(container, style);\n  }\n\n  reset() {\n    [...this.modals].forEach(m => this.remove(m));\n  }\n\n  removeContainerStyle(containerState) {\n    const container = this.getElement();\n    container.removeAttribute(OPEN_DATA_ATTRIBUTE);\n    Object.assign(container.style, containerState.style);\n  }\n\n  add(modal) {\n    let modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n    this.setModalAttributes(modal);\n\n    if (modalIdx !== 0) {\n      return modalIdx;\n    }\n\n    this.state = {\n      scrollBarWidth: this.getScrollbarWidth(),\n      style: {}\n    };\n\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(this.state);\n    }\n\n    return modalIdx;\n  }\n\n  remove(modal) {\n    const modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return;\n    }\n\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n    // clean up the container\n\n    if (!this.modals.length && this.handleContainerOverflow) {\n      this.removeContainerStyle(this.state);\n    }\n\n    this.removeModalAttributes(modal);\n  }\n\n  isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  }\n\n}\n\nexport default ModalManager;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}