{"ast":null,"code":"import _objectSpread from\"C:/Users/USER/Desktop/apna/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"C:/Users/USER/Desktop/apna/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// import React, { useState } from \"react\";\n// import React from \"react\";\nimport{useState}from\"react\";var useHook=function useHook(callback){// initial state\n// const initialState = {\n//     name: {\n//       value: '',\n//       required: true\n//     },\n//     email: {\n//       value: '',\n//       required: true,\n//       requiredMessage: 'Email address is required!',\n//       email: true,\n//       emailMessage: 'Email address is not valid!'\n//     }\n//     ,\n//     password: {\n//       value: '',\n//       required: true,\n//       minLength: 6,\n//       minLengthMessage: 'Password must be at least 6 characters long!',\n//       maxLength: 16,\n//       maxLengthMessage: 'Too many characters!'\n//     },\n//     confirmPassword: {\n//       value: '',\n//       required: true,\n//       matchWith: 'password',\n//       matchWithMessage: 'Passwords must be equal!'\n//     },\n//     gender: {\n//       value: '',\n//       required: true\n//     },\n//     difficulty: {\n//       value: '',\n//       required: true\n//     },\n//     image: {\n//       value: {},\n//       required: true,\n//       file: true,\n//       allowedTypes: ['jpg', 'jpeg', 'png', 'gif'],\n//       maxFileSize: 1024\n//     },\n//     description: {\n//       value: ''\n//     },\n//     terms: {\n//       value: false,\n//       required: true,\n//       requiredMessage: 'You need to accept our Terms and Conditions'\n//     }\n//   }\n// for input field data\n// for  validation error\nvar _useState=useState({}),_useState2=_slicedToArray(_useState,2),loginerror=_useState2[0],setLoginerror=_useState2[1];// validation function\nvar customValidates=function customValidates(field,value){switch(field){case\"admin_email\":var passregex=/^([a-zA-Z0-9_.+-])+(([a-zA-Z0-9-])+\\.)+([a-zA-Z]{2,4})+$/;var checkpass=passregex.test(value);console.log(checkpass);if(value===\"\"){setLoginerror(_objectSpread(_objectSpread({},loginerror),{},{field:\"Please Enter Correct Email\"}));}else{setLoginerror(\"\");}break;case\"admin_password\":if(value===\"\"){setLoginerror(_objectSpread(_objectSpread({},loginerror),{},{field:\"Please Enter Correct Password\"}));}else{setLoginerror(\"\");}break;default:break;}};// onchange function\n//   const onLoginFormChange = (e) => {\n//     e.persist();\n//     let name = e.target.name;\n//     let values = e.target.value;\n//     // customValidates(e, name, values);\n//     setLogindata({ ...logindata, [name]: values });\n//   };\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     Object.entries(logindata).forEach(([field, value]) => {\n//       customValidates(e, field, value);\n//     });\n//     callback();\n//   };\nreturn{loginerror:loginerror,customValidates:customValidates};};export default useHook;","map":{"version":3,"names":["useState","useHook","callback","_useState","_useState2","_slicedToArray","loginerror","setLoginerror","customValidates","field","value","passregex","checkpass","test","console","log","_objectSpread"],"sources":["C:/Users/USER/Desktop/apna/src/components/admin/useHook.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import React from \"react\";\r\nimport { useState } from \"react\";\r\nconst useHook = (callback) => {\r\n  // initial state\r\n  // const initialState = {\r\n  //     name: {\r\n  //       value: '',\r\n  //       required: true\r\n  //     },\r\n  //     email: {\r\n  //       value: '',\r\n  //       required: true,\r\n  //       requiredMessage: 'Email address is required!',\r\n  //       email: true,\r\n  //       emailMessage: 'Email address is not valid!'\r\n  //     }\r\n  //     ,\r\n  //     password: {\r\n  //       value: '',\r\n  //       required: true,\r\n  //       minLength: 6,\r\n  //       minLengthMessage: 'Password must be at least 6 characters long!',\r\n  //       maxLength: 16,\r\n  //       maxLengthMessage: 'Too many characters!'\r\n  //     },\r\n  //     confirmPassword: {\r\n  //       value: '',\r\n  //       required: true,\r\n  //       matchWith: 'password',\r\n  //       matchWithMessage: 'Passwords must be equal!'\r\n  //     },\r\n  //     gender: {\r\n  //       value: '',\r\n  //       required: true\r\n  //     },\r\n  //     difficulty: {\r\n  //       value: '',\r\n  //       required: true\r\n  //     },\r\n  //     image: {\r\n  //       value: {},\r\n  //       required: true,\r\n  //       file: true,\r\n  //       allowedTypes: ['jpg', 'jpeg', 'png', 'gif'],\r\n  //       maxFileSize: 1024\r\n  //     },\r\n  //     description: {\r\n  //       value: ''\r\n  //     },\r\n  //     terms: {\r\n  //       value: false,\r\n  //       required: true,\r\n  //       requiredMessage: 'You need to accept our Terms and Conditions'\r\n  //     }\r\n  //   }\r\n  // for input field data\r\n  // for  validation error\r\n  const [loginerror, setLoginerror] = useState({});\r\n\r\n  // validation function\r\n\r\n  const customValidates = (field, value) => {\r\n    switch (field) {\r\n      case \"admin_email\":\r\n        let passregex =\r\n          /^([a-zA-Z0-9_.+-])+(([a-zA-Z0-9-])+\\.)+([a-zA-Z]{2,4})+$/;\r\n        let checkpass = passregex.test(value);\r\n        console.log(checkpass)\r\n        if (value === \"\") {\r\n          setLoginerror({\r\n            ...loginerror,\r\n            field: \"Please Enter Correct Email\",\r\n          });\r\n        } else {\r\n          setLoginerror(\"\");\r\n        }\r\n        break;\r\n      case \"admin_password\":\r\n        if (value === \"\") {\r\n\r\n          setLoginerror({\r\n            ...loginerror,\r\n            field: \"Please Enter Correct Password\",\r\n          });\r\n        } else {\r\n          setLoginerror(\"\");\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // onchange function\r\n\r\n  //   const onLoginFormChange = (e) => {\r\n  //     e.persist();\r\n  //     let name = e.target.name;\r\n  //     let values = e.target.value;\r\n  //     // customValidates(e, name, values);\r\n\r\n  //     setLogindata({ ...logindata, [name]: values });\r\n  //   };\r\n  //   const handleSubmit = (e) => {\r\n  //     e.preventDefault();\r\n  //     Object.entries(logindata).forEach(([field, value]) => {\r\n  //       customValidates(e, field, value);\r\n  //     });\r\n\r\n  //     callback();\r\n  //   };\r\n  return {\r\n    loginerror,\r\n    customValidates,\r\n  };\r\n};\r\n\r\nexport default useHook;\r\n"],"mappings":"+NAAA;AACA;AACA,OAASA,QAAQ,KAAQ,OAAO,CAChC,GAAM,CAAAC,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIC,QAAQ,CAAK,CAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAC,SAAA,CAAoCH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAAI,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAzCG,UAAU,CAAAF,UAAA,IAAEG,aAAa,CAAAH,UAAA,IAEhC;AAEA,GAAM,CAAAI,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAIC,KAAK,CAAEC,KAAK,CAAK,CACxC,OAAQD,KAAK,EACX,IAAK,aAAa,CAChB,GAAI,CAAAE,SAAS,CACX,0DAA0D,CAC5D,GAAI,CAAAC,SAAS,CAAGD,SAAS,CAACE,IAAI,CAACH,KAAK,CAAC,CACrCI,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC,CACtB,GAAIF,KAAK,GAAK,EAAE,CAAE,CAChBH,aAAa,CAAAS,aAAA,CAAAA,aAAA,IACRV,UAAU,MACbG,KAAK,CAAE,4BAA4B,GACnC,CACJ,CAAC,IAAM,CACLF,aAAa,CAAC,EAAE,CAAC,CACnB,CACA,MACF,IAAK,gBAAgB,CACnB,GAAIG,KAAK,GAAK,EAAE,CAAE,CAEhBH,aAAa,CAAAS,aAAA,CAAAA,aAAA,IACRV,UAAU,MACbG,KAAK,CAAE,+BAA+B,GACtC,CACJ,CAAC,IAAM,CACLF,aAAa,CAAC,EAAE,CAAC,CACnB,CACA,MACF,QACE,MAAM,CAEZ,CAAC,CAED;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,MAAO,CACLD,UAAU,CAAVA,UAAU,CACVE,eAAe,CAAfA,eACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAP,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}