[{"C:\\Users\\USER\\Desktop\\apna\\src\\index.js":"1","C:\\Users\\USER\\Desktop\\apna\\src\\reportWebVitals.js":"2","C:\\Users\\USER\\Desktop\\apna\\src\\App.js":"3","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\layout.js":"4","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\error_404\\error.js":"5","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\orders.js":"6","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\sidebar.js":"7","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\loginn.js":"8","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\authwrapper.js":"9","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\components.js":"10","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\sellersignup.js":"11","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\header.js":"12","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\dashboard.js":"13","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\order\\order_detail.js":"14","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\product.js":"15","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\vendoremaillogin.js":"16","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellersignupp.js":"17","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\vendorupdate.js":"18","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\vendors.js":"19","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\invoice\\invoices.js":"20","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\invoice\\detail.js":"21","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\deletedproduct.js":"22","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\offerproduct.js":"23","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\promotionproduct.js":"24","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\soldproduct.js":"25","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\addproduct.js":"26","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\productdetail.js":"27","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\pendingproduct.js":"28","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\expiredproduct.js":"29","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\transactions\\transactions_detail.js":"30","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\featuredproduct.js":"31","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\transactions\\transactions.js":"32","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\login\\login.js":"33","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\login\\change_password.js":"34","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\login\\forgot.js":"35","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\login\\footer.js":"36","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\banner_manager.js":"37","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\home_manager.js":"38","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\content_manager.js":"39","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\add_update_admin\\add_update_admin.js":"40","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\coupon\\coupon.js":"41","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\complaint\\complaint.js":"42","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\review\\review.js":"43","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\category\\category.js":"44","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\revenue.js":"45","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\order.js":"46","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\product.js":"47","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\coupon.js":"48","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\store.js":"49","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\customer.js":"50","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\stock.js":"51","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\category.js":"52","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\taxes.js":"53","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\delivery\\delivery.js":"54","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\blog\\add_blog.js":"55","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\email_send\\email_send.js":"56","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\notification\\Notification.js":"57","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\useHook.js":"58","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\button.js":"59","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\iconbutton.js":"60","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\loader.js":"61","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\categorytype.js":"62","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\salert.js":"63","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\ImageCropper.js":"64","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\FileInput.js":"65","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\Status.js":"66","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\variation.js":"67","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\BrandJson.js":"68","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellerverifyotp.js":"69","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellerlogin.js":"70","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellerchangepassword.js":"71","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\vendorresetpassword.js":"72","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\storetype.js":"73","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\FilterComponent.js":"74","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellerforgetpassword.js":"75","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\input.js":"76","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\EmailType.js":"77","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\EmailStatus.js":"78","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\NotificationType.js":"79","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\NotificationStatus.js":"80"},{"size":598,"mtime":1682502839928,"results":"81","hashOfConfig":"82"},{"size":375,"mtime":1682502839928,"results":"83","hashOfConfig":"82"},{"size":647,"mtime":1682502839883,"results":"84","hashOfConfig":"82"},{"size":7270,"mtime":1682502839897,"results":"85","hashOfConfig":"82"},{"size":305,"mtime":1682502839891,"results":"86","hashOfConfig":"82"},{"size":9915,"mtime":1682502839904,"results":"87","hashOfConfig":"82"},{"size":10295,"mtime":1682502839921,"results":"88","hashOfConfig":"82"},{"size":5420,"mtime":1682502839902,"results":"89","hashOfConfig":"82"},{"size":684,"mtime":1682502839885,"results":"90","hashOfConfig":"82"},{"size":4977,"mtime":1682502839889,"results":"91","hashOfConfig":"82"},{"size":33705,"mtime":1682502839914,"results":"92","hashOfConfig":"82"},{"size":11806,"mtime":1682502839891,"results":"93","hashOfConfig":"82"},{"size":41266,"mtime":1682502839890,"results":"94","hashOfConfig":"82"},{"size":19283,"mtime":1682502839903,"results":"95","hashOfConfig":"82"},{"size":225816,"mtime":1682502839905,"results":"96","hashOfConfig":"82"},{"size":7645,"mtime":1682502839924,"results":"97","hashOfConfig":"82"},{"size":11554,"mtime":1682502839923,"results":"98","hashOfConfig":"82"},{"size":33405,"mtime":1682502839925,"results":"99","hashOfConfig":"82"},{"size":55884,"mtime":1682502839924,"results":"100","hashOfConfig":"82"},{"size":9040,"mtime":1682502839893,"results":"101","hashOfConfig":"82"},{"size":37833,"mtime":1682502839892,"results":"102","hashOfConfig":"82"},{"size":21214,"mtime":1682502839906,"results":"103","hashOfConfig":"82"},{"size":23519,"mtime":1682502839908,"results":"104","hashOfConfig":"82"},{"size":24902,"mtime":1682502839909,"results":"105","hashOfConfig":"82"},{"size":17153,"mtime":1682502839909,"results":"106","hashOfConfig":"82"},{"size":74577,"mtime":1682502839906,"results":"107","hashOfConfig":"82"},{"size":91497,"mtime":1682502839909,"results":"108","hashOfConfig":"82"},{"size":15183,"mtime":1682502839908,"results":"109","hashOfConfig":"82"},{"size":14341,"mtime":1682502839907,"results":"110","hashOfConfig":"82"},{"size":143,"mtime":1682502839922,"results":"111","hashOfConfig":"82"},{"size":23823,"mtime":1682502839907,"results":"112","hashOfConfig":"82"},{"size":6730,"mtime":1682502839922,"results":"113","hashOfConfig":"82"},{"size":8153,"mtime":1682502839902,"results":"114","hashOfConfig":"82"},{"size":8158,"mtime":1682502839897,"results":"115","hashOfConfig":"82"},{"size":5057,"mtime":1682502839901,"results":"116","hashOfConfig":"82"},{"size":9450,"mtime":1682502839901,"results":"117","hashOfConfig":"82"},{"size":25001,"mtime":1682502839915,"results":"118","hashOfConfig":"82"},{"size":2721,"mtime":1682502839918,"results":"119","hashOfConfig":"82"},{"size":13047,"mtime":1682502839915,"results":"120","hashOfConfig":"82"},{"size":16319,"mtime":1682502839884,"results":"121","hashOfConfig":"82"},{"size":23787,"mtime":1682502839889,"results":"122","hashOfConfig":"82"},{"size":15554,"mtime":1682502839888,"results":"123","hashOfConfig":"82"},{"size":13087,"mtime":1682502839913,"results":"124","hashOfConfig":"82"},{"size":34935,"mtime":1682502839886,"results":"125","hashOfConfig":"82"},{"size":47442,"mtime":1682502839912,"results":"126","hashOfConfig":"82"},{"size":38129,"mtime":1682502839911,"results":"127","hashOfConfig":"82"},{"size":33403,"mtime":1682502839911,"results":"128","hashOfConfig":"82"},{"size":27544,"mtime":1682502839910,"results":"129","hashOfConfig":"82"},{"size":5608,"mtime":1682502839913,"results":"130","hashOfConfig":"82"},{"size":7491,"mtime":1682502839911,"results":"131","hashOfConfig":"82"},{"size":11349,"mtime":1682502839912,"results":"132","hashOfConfig":"82"},{"size":33047,"mtime":1682502839910,"results":"133","hashOfConfig":"82"},{"size":27663,"mtime":1682502839913,"results":"134","hashOfConfig":"82"},{"size":27909,"mtime":1682502839890,"results":"135","hashOfConfig":"82"},{"size":21531,"mtime":1682505362911,"results":"136","hashOfConfig":"82"},{"size":18250,"mtime":1682502839890,"results":"137","hashOfConfig":"82"},{"size":18881,"mtime":1682502839902,"results":"138","hashOfConfig":"82"},{"size":3099,"mtime":1682502839922,"results":"139","hashOfConfig":"82"},{"size":515,"mtime":1682502839887,"results":"140","hashOfConfig":"82"},{"size":555,"mtime":1682502839887,"results":"141","hashOfConfig":"82"},{"size":331,"mtime":1682502839888,"results":"142","hashOfConfig":"82"},{"size":269,"mtime":1682502839895,"results":"143","hashOfConfig":"82"},{"size":449,"mtime":1682502839888,"results":"144","hashOfConfig":"82"},{"size":4415,"mtime":1682502839915,"results":"145","hashOfConfig":"82"},{"size":1290,"mtime":1682502839914,"results":"146","hashOfConfig":"82"},{"size":248,"mtime":1682502839895,"results":"147","hashOfConfig":"82"},{"size":2256,"mtime":1682502839897,"results":"148","hashOfConfig":"82"},{"size":797,"mtime":1682502839894,"results":"149","hashOfConfig":"82"},{"size":3373,"mtime":1682502839923,"results":"150","hashOfConfig":"82"},{"size":10385,"mtime":1682502839923,"results":"151","hashOfConfig":"82"},{"size":6108,"mtime":1682502839922,"results":"152","hashOfConfig":"82"},{"size":6805,"mtime":1682502839924,"results":"153","hashOfConfig":"82"},{"size":268,"mtime":1682502839896,"results":"154","hashOfConfig":"82"},{"size":813,"mtime":1682502839887,"results":"155","hashOfConfig":"82"},{"size":3901,"mtime":1682502839922,"results":"156","hashOfConfig":"82"},{"size":420,"mtime":1682502839887,"results":"157","hashOfConfig":"82"},{"size":237,"mtime":1682502839894,"results":"158","hashOfConfig":"82"},{"size":103,"mtime":1682502839894,"results":"159","hashOfConfig":"82"},{"size":387,"mtime":1682502839895,"results":"160","hashOfConfig":"82"},{"size":124,"mtime":1682502839895,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b71x9l",{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235"},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259"},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270"},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290"},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","suppressedMessages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300"},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304"},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311"},{"filePath":"312","messages":"313","suppressedMessages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315"},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319"},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323"},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327"},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331"},{"filePath":"332","messages":"333","suppressedMessages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","suppressedMessages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338"},{"filePath":"339","messages":"340","suppressedMessages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346"},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350"},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357"},{"filePath":"358","messages":"359","suppressedMessages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361"},{"filePath":"362","messages":"363","suppressedMessages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365"},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"372","messages":"373","suppressedMessages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","suppressedMessages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","suppressedMessages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","suppressedMessages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"405","messages":"406","suppressedMessages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","suppressedMessages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"414","messages":"415","suppressedMessages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","suppressedMessages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","suppressedMessages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"423","messages":"424","suppressedMessages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"426","messages":"427","suppressedMessages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"429","messages":"430","suppressedMessages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","suppressedMessages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\USER\\Desktop\\apna\\src\\index.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\reportWebVitals.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\App.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\layout.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\error_404\\error.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\orders.js",["435"],[],"import React, { useEffect, useState } from \"react\";\r\n// import Input from \"./common/input\";\r\n// import { FaFileInvoiceDollar } from \"react-icons/fa\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"./common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../../style/order.css\";\r\n// import OrderJson from \"./json/orders\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n// import Status from \"./json/Status\";\r\nimport Loader from \"./common/loader\";\r\n\r\nfunction Orders() {\r\n  let token = localStorage.getItem(\"token\");\r\n  const navigate = useNavigate();\r\n  const [orderdata, setorderdata] = useState([]);\r\n  const [changstatus, setchangstatus] = useState(\"\");\r\n  const [apicall, setapicall] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchdata, setsearchData] = useState({\r\n    status: \"\",\r\n    created_on: \"\",\r\n  });\r\n\r\n  // On selete the status or order limit to search :-\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //To search by status and order limit :-\r\n  const onSearchClick = () => {\r\n    setapicall(true);\r\n  };\r\n\r\n  //To reset the search feild blank :-\r\n  const OnReset = () => {\r\n    setsearchData({ status: \"\", created_on: \"\" });\r\n    setapicall(true);\r\n  };\r\n\r\n  //To get the order list :-\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL_0}/orders_list`,\r\n        {\r\n          status: searchdata.status,\r\n          created_on: searchdata.created_on,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n\r\n        setorderdata(response.data);\r\n        setapicall(false);\r\n        setLoading(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }, [apicall, changstatus]);\r\n\r\n  const onStatusChange = (e, id, user_id) => {\r\n    // e.prevantDefault();\r\n    setchangstatus(e.target.value);\r\n    setLoading(true);\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL_0}/order_status_change`,\r\n        {\r\n          status_change: e.target.value,\r\n          id: id,\r\n          user_id: user_id,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false);\r\n        setapicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  // To go on the order details page :-\r\n  const onOrderClick = (id) => {\r\n    localStorage.setItem(\"orderid\", id[0]);\r\n    localStorage.setItem(\"userid\", id[1]);\r\n\r\n    navigate(\"/order_detail\");\r\n  };\r\n\r\n  // Table data :-\r\n  const columns = [\r\n    {\r\n      name: \"Order Id\",\r\n      selector: (row) => (\r\n        <p onClick={onOrderClick.bind(this, [row.id, row.user_id])}>\r\n          {\" \"}\r\n          {row.id}\r\n        </p>\r\n      ),\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Quantity\",\r\n      selector: (row) => <p className=\"m-0\">{row.total_quantity}</p>,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Tax\",\r\n      selector: (row) => (\r\n        <p className=\"m-0\">{Number(row.total_gst).toFixed(2)}</p>\r\n      ),\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Total Ammount\",\r\n      selector: (row) => (\r\n        <p className=\"m-0\">₹{Number(row.total_amount).toFixed(2)}</p>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Order Date\",\r\n      selector: (row) => moment(row.created_on).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Delivery Date\",\r\n      selector: (row) => row.delivery_date,\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Pyament Mode\",\r\n      selector: (row) => row.payment_mode,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <span\r\n          className={\r\n            row.status === \"placed\"\r\n              ? \"badge bg-warning\"\r\n              : row.status === \"pending\"\r\n                ? \"badge bg-secondary\"\r\n                : row.status === \"shipped\"\r\n                  ? \"badge bg-primary\"\r\n                  : row.status === \"delivered\"\r\n                    ? \"badge bg-success\"\r\n                    : row.status === \"packed\"\r\n                      ? \"badge bg-primary\"\r\n                      : row.status === \"cancel\"\r\n                        ? \"badge bg-danger\"\r\n                        : row.status === \"approved\"\r\n                          ? \"badge bg-info\"\r\n                          : \"badge bg-dark\"\r\n          }\r\n        >\r\n          {row.status === \"placed\"\r\n            ? \"placed\"\r\n            : row.status === \"delivered\"\r\n              ? \"delivered\"\r\n              : row.status === \"shipped\"\r\n                ? \"shipped\"\r\n                : row.status === \"packed\"\r\n                  ? \"packed\"\r\n                  : row.status === \"cancel\"\r\n                    ? \"cancel\"\r\n                    : row.status === \"approved\"\r\n                      ? \"approved\"\r\n                      : row.status === \"pending\"\r\n                        ? \"pending\"\r\n                        : \"return\"}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Change Status\",\r\n      selector: (row) => (\r\n        <Form.Select\r\n          aria-label=\"Search by delivery\"\r\n          size=\"sm\"\r\n          className=\"w-100\"\r\n          onChange={(e) => onStatusChange(e, row.id, row.user_id)}\r\n          name=\"status\"\r\n        // value={row.product_status}\r\n        >\r\n          <option\r\n            value=\"placed\"\r\n            selected={row.status === \"placed\" ? true : false}\r\n          >\r\n            Placed\r\n          </option>\r\n          <option\r\n            value=\"pending\"\r\n            selected={row.status === \"pending\" ? true : false}\r\n          >\r\n            Pending\r\n          </option>\r\n          <option\r\n            value=\"shipped\"\r\n            selected={row.status === \"shipped\" ? true : false}\r\n          >\r\n            Shipped\r\n          </option>\r\n          <option\r\n            value=\"delivered\"\r\n            selected={row.status === \"delivered\" ? true : false}\r\n          >\r\n            Delivered\r\n          </option>\r\n          <option\r\n            value=\"packed\"\r\n            selected={row.status === \"packed\" ? true : false}\r\n          >\r\n            Packed\r\n          </option>\r\n          <option\r\n            value=\"cancel\"\r\n            selected={row.status === \"cancel\" ? true : false}\r\n          >\r\n            Cancel\r\n          </option>\r\n          <option\r\n            value=\"approved\"\r\n            selected={row.status === \"approved\" ? true : false}\r\n          >\r\n            Approved{\" \"}\r\n          </option>\r\n          <option\r\n            value=\"return\"\r\n            selected={row.status === \"return\" ? true : false}\r\n          >\r\n            Return{\" \"}\r\n          </option>\r\n        </Form.Select>\r\n      ),\r\n      sortable: true,\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n      <div className=\"App\">\r\n        <h2>Orders</h2>\r\n        <div className=\"card mt-3 px-3 \">\r\n          <div className=\"product_page_searchbox bg-gray my-4\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3 col-sm-6\">\r\n                <Form.Select\r\n                  aria-label=\"Search by delivery\"\r\n                  className=\"adminselectbox\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"status\"\r\n                  value={String(searchdata.status)}\r\n                >\r\n                  <option value=\"\">Delivery status</option>\r\n                  <option value=\"delivered\">Delivered</option>\r\n                  <option value=\"pending\">Pending</option>\r\n                  <option value=\"approved\">Approved</option>\r\n                  <option value=\"packed\">Packed</option>\r\n                  <option value=\"placed\">Placed</option>\r\n                  <option value=\"return\">Return</option>\r\n                  <option value=\"cancel\">Cancel</option>\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6\">\r\n                <Form.Select\r\n                  aria-label=\"Search by delivery_status\"\r\n                  className=\"adminselectbox\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"created_on\"\r\n                  value={String(searchdata.created_on)}\r\n                >\r\n                  <option value=\"\">Order limits</option>\r\n                  <option value=\"one\">Today</option>\r\n                  <option value=\"1\">Yesterday</option>\r\n                  <option value=\"15\">Last 15 days orders</option>\r\n                  <option value=\"30\">Last 30 days orders</option>\r\n                  <option value=\"90\">Last 3 month orders</option>\r\n                  <option value=\"180\">Last 6 month orders</option>\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input \">\r\n                <MainButton\r\n                  btntext={\"Search\"}\r\n                  onClick={onSearchClick}\r\n                  btnclass={\"button main_button w-100\"}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input \">\r\n                <MainButton\r\n                  btntext={\"Reset\"}\r\n                  onClick={OnReset}\r\n                  btnclass={\"button main_button w-100\"}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <DataTable\r\n            columns={columns}\r\n            data={orderdata}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n            className={\"table_body order_table\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Orders;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\sidebar.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\loginn.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\authwrapper.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\components.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\sellersignup.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\header.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\dashboard.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\order\\order_detail.js",["436"],[],"import React, { useEffect, useState } from \"react\";\r\nimport \"./order_detail.css\";\r\nimport Profile from \"../../../images/user.jpg\";\r\n// import { AiOutlineFileText } from \"react-icons/ai\";\r\nimport { BsTelephoneFill, BsFillEnvelopeFill } from \"react-icons/bs\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport Loader from \"../common/loader\";\r\n\r\nconst OrderDetail = () => {\r\n  // let totalorder = 0;\r\n  let orderid = localStorage.getItem(\"orderid\");\r\n  let userid = localStorage.getItem(\"userid\");\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [order, setOrder] = useState([]);\r\n  const [productorder, setproductOrder] = useState([]);\r\n  // const [amt, setAmt] = useState(\"\");\r\n  const [user, setUser] = useState([]);\r\n  let [loading, setloading] = useState(false);\r\n  let [apicall, setApicall] = useState(false);\r\n\r\n  // const [searchdataa, setsearchDataa] = useState({\r\n  //   status: \"\",\r\n  //   created_on: \"\",\r\n  // });\r\n\r\n  // const OnSearchChangee = (e) => {\r\n  //   setsearchDataa({ ...searchdataa, [e.target.name]: e.target.value });\r\n  // };\r\n\r\n  // Function to change the status:-\r\n  const onStatusChangee = (e) => {\r\n\r\n    // setloading(true);\r\n\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL_0}/order_status_change`,\r\n        {\r\n          status_change: e.target.value,\r\n          id: orderid,\r\n          user_id: userid,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setloading(false);\r\n        setApicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // To get the data of the order details:-\r\n  useEffect(() => {\r\n    setloading(true);\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL_0}/order_deteils`,\r\n        {\r\n          id: orderid,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setloading(false);\r\n        setOrder(response.data);\r\n        setproductOrder(response.data.product_types);\r\n\r\n        setApicall(false);\r\n        UserData();\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }, [apicall]);\r\n\r\n  // To get the data of the user details :-\r\n  const UserData = () => {\r\n    axios\r\n      .post(\r\n        `http://192.168.29.108:5000/user_details`,\r\n        {\r\n          user_id: userid,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        let data = response.data;\r\n        setUser(data);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  var total = 0;\r\n  var sub_total = 0;\r\n  var total_tax = 0;\r\n  let qty = 0;\r\n  let total_tax_with_qty = 0;\r\n  let total_priceWithout_tax = 0;\r\n  console.log(total, total_tax)\r\n\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n\r\n      <div className=\"order_detail_page\">\r\n        <div className=\"order_detail\">\r\n          <h2>Orders Detail</h2>\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-8\">\r\n              <div className=\"left_side\">\r\n                <div className=\"top_bar d-flex justify-content-between text-center\">\r\n                  <div className=\"order_id d-flex flex-column\">\r\n                    <div className=\"order_info_heading\">\r\n                      <span>#</span>Order Id\r\n                    </div>\r\n                    <div>\r\n                      <span>{order.id}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"d-flex flex-column text-center\">\r\n                    <div className=\"order_info_heading\">Payment</div>\r\n                    <div className=\"badge bg-success\">{order.payment_mode}</div>\r\n                  </div>\r\n                  <div className=\"d-flex flex-column text-center\">\r\n                    <div className=\"order_info_heading\">Order Status</div>\r\n\r\n                    <Form.Select\r\n                      aria-label=\"Floating label select example\"\r\n                      onChange={onStatusChangee}\r\n                      name=\"status\"\r\n                      value={order.status}\r\n                    >\r\n                      <option>Select Order Status</option>\r\n                      <option\r\n                        value=\"placed\"\r\n                      // selected={order.status ==== \"placed\" ? true : false}\r\n                      >\r\n                        Placed\r\n                      </option>\r\n                      <option\r\n                        value=\"shipped\"\r\n                      // selected={order.status === \"shipped\" ? true : false}\r\n                      >\r\n                        Shipped\r\n                      </option>\r\n                      <option\r\n                        value=\"delivered\"\r\n                      // selected={order.status === \"delivered\" ? true : false}\r\n                      >\r\n                        Delivered\r\n                      </option>\r\n                      <option\r\n                        value=\"pending\"\r\n                      // selected={order.status === \"pending\" ? true : false}\r\n                      >\r\n                        Pending\r\n                      </option>\r\n                      <option\r\n                        value=\"approved\"\r\n                      // selected={order.status === \"approved\" ? true : false}\r\n                      >\r\n                        Approved\r\n                      </option>\r\n                      <option\r\n                        value=\"packed\"\r\n                      // selected={order.status === \"packed\" ? true : false}\r\n                      >\r\n                        Packed\r\n                      </option>\r\n                      <option\r\n                        value=\"return\"\r\n                      // selected={order.status === \"return\" ? true : false}\r\n                      >\r\n                        Return\r\n                      </option>\r\n                      <option\r\n                        value=\"cancel\"\r\n                      // selected={order.status === \"cancel\" ? true : false}\r\n                      >\r\n                        Cancel\r\n                      </option>\r\n                    </Form.Select>\r\n                  </div>\r\n                  <div className=\"d-flex flex-column text-center\">\r\n                    <div className=\"order_info_heading\">Order Date & Time</div>\r\n                    <div className=\"date_time\">\r\n                      {moment(order.order_date).format(\"YYYY-MM-DD\")}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"d-flex flex-column text-center\">\r\n                    <div className=\"order_info_heading\">Delivery Date</div>\r\n                    <div className=\"date_time\">{order.delivery_date}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"product_img_price\">\r\n                <div className=\"product_image_price\"></div>\r\n\r\n                {(productorder || []).map((orderdata) => {\r\n                  orderdata.gst === \"null\" ||\r\n                    orderdata.gst === \"undefined\" ||\r\n                    orderdata.gst === \"\"\r\n                    ? (orderdata.gst = \"0\")\r\n                    : Number(orderdata.gst);\r\n                  orderdata.sgst === \"null\" ||\r\n                    orderdata.sgst === \"undefined\" ||\r\n                    orderdata.sgst === \"\"\r\n                    ? (orderdata.sgst = \"0\")\r\n                    : Number(orderdata.sgst);\r\n                  orderdata.cgst === \"null\" ||\r\n                    orderdata.cgst === \"undefined\" ||\r\n                    orderdata.cgst === \"\"\r\n                    ? (orderdata.cgst = \"0\")\r\n                    : Number(orderdata.cgst);\r\n                  orderdata.mrp === \"undefined\" ||\r\n                    orderdata.mrp === \"null\" ||\r\n                    orderdata.mrp === \"\"\r\n                    ? (orderdata.mrp = \"0\")\r\n                    : Number(orderdata.mrp);\r\n                  let countAllText =\r\n                    Number(orderdata.gst) +\r\n                    Number(orderdata.wholesale_sales_tax) +\r\n                    Number(orderdata.manufacturers_sales_tax) +\r\n                    Number(orderdata.retails_sales_tax) +\r\n                    Number(orderdata.value_added_tax);\r\n                  let discont = (orderdata.mrp * orderdata.discount) / 100;\r\n                  let tax = (Number(orderdata.sale_price) * countAllText) / 100;\r\n\r\n                  qty = orderdata.order_quantity;\r\n\r\n                  let total_price = orderdata.sale_price * qty;\r\n\r\n                  let Total_taxMultiply_qty = tax * qty;\r\n                  total_tax_with_qty += Number(Total_taxMultiply_qty);\r\n                  let price_without_tax =\r\n                    Number(orderdata.product_price).toFixed(2) - tax;\r\n\r\n                  let pricewithout_tax_with_qty = price_without_tax * qty;\r\n\r\n                  total_priceWithout_tax += Number(pricewithout_tax_with_qty);\r\n\r\n                  total += Number(total_price);\r\n                  sub_total += Number(orderdata.sale_price);\r\n                  total_tax += Number(tax);\r\n\r\n                  return (\r\n                    <div\r\n                      className=\"d-flex justify-content-between mb-3 align-items-center\"\r\n                      key={orderdata.id}\r\n                    >\r\n                      <div className=\"product_img d-flex\">\r\n                        <img\r\n                          src={\r\n                            orderdata.all_images\r\n                              ? orderdata.all_images\r\n                              : orderdata.all_images === \"null\"\r\n                                ? \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n                                : null\r\n                          }\r\n                          alt=\"apnaorganic\"\r\n                        />\r\n                        <div className=\"product_name_detial ps-3\">\r\n                          <h6> Name: {orderdata.product_title_name}</h6>\r\n                          {orderdata.unit === \"gms\" ? (\r\n                            <p>weight:{orderdata.unit_quantity} grm</p>\r\n                          ) : orderdata.unit === \"ml\" ? (\r\n                            <p>Volume:{orderdata.unit_quantity} ml</p>\r\n                          ) : orderdata.unit === \"pcs\" ? (\r\n                            <>\r\n                              <p>color:{orderdata.colors}</p>\r\n                              <p>size:{orderdata.size}</p>\r\n                            </>\r\n                          ) : null}\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"product_price\">\r\n                        {\" \"}\r\n                        MRP-₹{orderdata.mrp} ({Number(orderdata.discount)}% )\r\n                        <br /> Discount- ₹{Number(discont).toFixed(2)}\r\n                        <br />\r\n                        Product Price- ₹\r\n                        {Number(orderdata.product_price).toFixed(2)}\r\n                      </div>\r\n\r\n                      <div className=\"product_quantity\">\r\n                        Price without tax- <br />₹{price_without_tax.toFixed(2)}\r\n                        <br /> Tax -₹{tax.toFixed(2)}\r\n                      </div>\r\n\r\n                      <div className=\"product_quantity\">\r\n                        Sale Price-\r\n                        <br />₹{Number(orderdata.sale_price).toFixed(2)}\r\n                      </div>\r\n\r\n                      <div className=\"product_quantity\">\r\n                        QTY-{orderdata.order_quantity}\r\n                      </div>\r\n                      <div className=\"total_amount\">\r\n                        {\" \"}\r\n                        Total Price- <br />₹{Number(total_price).toFixed(2)}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n              <div className=\"delivery_charges\">\r\n                <h5 className=\"pb-3\">Delivery</h5>\r\n                <div className=\"d-flex justify-content-between align-items-center\">\r\n                  <div className=\"delivery_img d-flex \">\r\n                    <img\r\n                      src=\"https://media.istockphoto.com/vectors/express-delivery-symbol-vector-id1175078000?b=1&k=20&m=1175078000&s=612x612&w=0&h=2Y5FLXleVSLyaEfZztp2Mhf2pVV6BbqNYkXYs1KHpik=\"\r\n                      alt=\"apnaorganic\"\r\n                    />\r\n                    <div className=\"delivery_componay ps-3\">\r\n                      <h6>E-Kart</h6>\r\n                      <p>Speed post package</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"delivery_payment\">00</div>\r\n                </div>\r\n              </div>\r\n              <div className=\"payment_summary\">\r\n                <h5 className=\"pb-3\">Payment Summary</h5>\r\n                <div className=\"payment_summary_total d-flex justify-content-between align-items-center\">\r\n                  <div className=\"Subtotal\">\r\n                    <p>Total Price(Excluding Tax)</p>\r\n                  </div>\r\n                  <div className=\"\">\r\n                    ₹{total_priceWithout_tax.toFixed(2)}\r\n                    {/* <span className=\"\"> = {total_tax.toFixed(2) * qty}</span> */}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"payment_summary_total d-flex justify-content-between align-items-center\">\r\n                  <div className=\"Subtotal\">\r\n                    <p> Total Tax (Tax x Qty) </p>\r\n                  </div>\r\n                  <div className=\"\">\r\n                    {/* {total_tax.toFixed(2)} x {total_qty} Qty */}\r\n                    <span className=\"\"> ₹ {total_tax_with_qty.toFixed(2)}</span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"payment_summary_total d-flex justify-content-between align-items-center\">\r\n                  <div className=\"Subtotal\">\r\n                    <p>\r\n                      Subtotal\r\n                      <span>\r\n                        ({order.total_quantity} items)(Include all Taxes)\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"\">₹{sub_total.toFixed(2)}</div>\r\n                </div>\r\n                <div className=\"payment_summary_total d-flex justify-content-between align-items-center\">\r\n                  <div className=\"Subtotal\">\r\n                    <p>Delivery Charges</p>\r\n                  </div>\r\n                  <div className=\"\">₹{order.shipping_charges}</div>\r\n                </div>\r\n\r\n                <div className=\"payment_summary_total d-flex justify-content-between align-items-center\">\r\n                  <div className=\"Subtotal\">\r\n                    <p> Discont Coupon Ammount </p>\r\n                  </div>\r\n                  <div className=\"\">\r\n                    ₹{Number(order.discount_coupon_value).toFixed(2)}\r\n                  </div>\r\n                </div>\r\n                <div className=\"payment_summary_total d-flex justify-content-between align-items-center\">\r\n                  <div className=\"Subtotal\">\r\n                    <p>\r\n                      <strong>\r\n                        Total paid by customer ( SubTotal - Coupon Discount)\r\n                      </strong>\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"\">\r\n                    <strong>₹{Number(order.total_amount).toFixed(2)}</strong>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-lg-4\">\r\n              <div className=\"right_side\">\r\n                {(user || []).map((userdata) => {\r\n                  return (\r\n                    <div\r\n                      className=\"customer_name_address\"\r\n                      key={userdata.user_id}\r\n                    >\r\n                      <div className=\"customer_info\">\r\n                        <div className=\"customer\">Customer</div>\r\n\r\n                        <div className=\"customer_name_img d-flex py-3\">\r\n                          <img src={Profile} alt={\"apnaorganic\"} />\r\n                          <div className=\"customer_name ps-4 my-auto\">\r\n                            {userdata.first_name} {userdata.last_name}\r\n                          </div>\r\n                        </div>\r\n                        {/* <div className=\"customer_orders d-flex py-3\">\r\n                        <AiOutlineFileText className=\"order_icon p-1\" />\r\n\r\n                        <div className=\"customer_orders_no ps-4 my-auto\">\r\n                          {order.total_quantity}\r\n                        </div>\r\n                      </div> */}\r\n                      </div>\r\n                      <div className=\"contact py-3\">\r\n                        <div className=\"contact_heading pb-3\">\r\n                          <h5>Contact Info</h5>\r\n                        </div>\r\n                        <div className=\"email py-2\">\r\n                          <BsFillEnvelopeFill />\r\n                          <span>{userdata.email}</span>\r\n                        </div>\r\n                        <div className=\"number py-2\">\r\n                          <BsTelephoneFill />\r\n                          <span>{userdata.phone_no}</span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"ship_Address py-3\">\r\n                        <h5>Ship Address</h5>\r\n                        <div className=\"address\">\r\n                          <p>\r\n                            {\" \"}\r\n                            {userdata.first_name} {userdata.last_name}\r\n                          </p>\r\n                          <p>{userdata.gender}</p>\r\n                          <p>{userdata.date_of_birth}</p>\r\n                          <p>{userdata.address}</p>\r\n                          <p>{userdata.address2}</p>\r\n                          <p>Indore Madhya Pradesh</p>\r\n                          <p>Pin:452001</p>\r\n                          <p>{userdata.phone_no}</p>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"bill_Address py-3\">\r\n                        <h5>Bill Address</h5>\r\n                        <div className=\"address\">\r\n                          <p>\r\n                            {userdata.first_name} {userdata.last_name}\r\n                          </p>\r\n                          <p>{userdata.gender}</p>\r\n                          <p>{userdata.date_of_birth}</p>\r\n                          <p>{userdata.address}</p>\r\n                          <p>{userdata.address2}</p>\r\n                          <p>Indore Madhya Pradesh</p>\r\n                          <p>Pin:452001</p>\r\n                          <p>{userdata.phone_no}</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default OrderDetail;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\product.js",["437","438","439","440","441","442","443","444"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\n// import ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport MainButton from \"./common/button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Iconbutton from \"./common/iconbutton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport { RiImageAddLine } from \"react-icons/ri\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport VariationJson from \"./json/variation\";\r\nimport CategoryJson from \"./json/categorytype\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport FileInput from \"./setting/FileInput\";\r\nimport { GiCancel } from \"react-icons/gi\";\r\n\r\nimport ImageCropper from \"./setting/ImageCropper\";\r\nimport {\r\n  AiOutlinePlus,\r\n  AiOutlineCloudUpload,\r\n} from \"react-icons/ai\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport SAlert from \"./common/salert\";\r\nimport axios from \"axios\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport moment from \"moment/moment\";\r\nimport BrandJson from \"./json/BrandJson\";\r\nimport { downloadExcel } from \"react-export-table-to-excel\";\r\nimport productstatus from \"../admin/json/Status\";\r\nimport Loader from \"./common/loader\";\r\nlet encoded;\r\nlet ImgObj = [];\r\nfunction Product() {\r\n  const [CategoryEditdata, setCategoryEditData] = useState([]);\r\n  console.log(CategoryEditdata)\r\n  const [show, setShow] = useState(false);\r\n  console.log(show)\r\n  // const [cover,setCover]=useState(\"cover\")\r\n  const [currentPage, setCurrentPage] = useState(\"choose-img\");\r\n  const [imgAfterCrop, setImgAfterCrop] = useState(\"\");\r\n  console.log(imgAfterCrop)\r\n\r\n  const [newImageUrls, setnewImageUrls] = useState([]);\r\n\r\n  const [image, setImage] = useState(\"\");\r\n  const [imageName, setimageName] = useState(\"\");\r\n\r\n  ClassicEditor.defaultConfig = {\r\n    toolbar: {\r\n      items: [\r\n        \"heading\",\r\n        \"|\",\r\n        \"bold\",\r\n        \"italic\",\r\n        \"|\",\r\n        \"bulletedList\",\r\n        \"numberedList\",\r\n        \"|\",\r\n        \"insertTable\",\r\n        \"|\",\r\n        \"undo\",\r\n        \"redo\",\r\n      ],\r\n    },\r\n    table: {\r\n      contentToolbar: [\"tableColumn\", \"tableRow\", \"mergeTableCells\"],\r\n    },\r\n    language: \"en\",\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n  let [searcherror, setsearcherror] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const [changeUnitproperty, setChangeUnitProperty] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [checkProductType, setCheckProductType] = useState(false);\r\n  const [error, setError] = useState(true);\r\n  const [vendorid, setVendorId] = useState([]);\r\n\r\n  const [filtervategory, setfiltercategory] = useState([]);\r\n  const [category, setCategory] = useState([]);\r\n  const [indVal, setIndVal] = useState(0);\r\n  const [subCategory, setSubCategory] = useState([]);\r\n  const [childCategory, setchildCategory] = useState([]);\r\n  const [grandcCategory, setgrandcCategory] = useState([]);\r\n  console.log(grandcCategory);\r\n  const [scategory, setScategory] = useState({\r\n    parent_category: \"\",\r\n    sub_category: \"\",\r\n    childcategory: \"\",\r\n    gcategory: \"\",\r\n  });\r\n\r\n  // console.log(cat_catname)\r\n\r\n  const [categoryeditparent, setCategoryEditparent] = useState(\"\");\r\n  const [categoryeditsubparent, setCategoryEditSubparent] = useState(\"\");\r\n  console.log(categoryeditsubparent);\r\n\r\n  const [categoryeditchildparent, setCategoryEditChildparent] = useState(\"\");\r\n\r\n  const [level, setlevel] = useState(\"\");\r\n  console.log(level);\r\n\r\n  const [pdata, setpdata] = useState([]);\r\n  // console.log(\"PDAYTAA>NAME\"+JSON.stringify(pdata.category_name))\r\n\r\n  const [variantid, setvariantid] = useState(\"\");\r\n  console.log(variantid);\r\n\r\n  const [productid, setproductid] = useState(\"\");\r\n  const [Alert, setAlert] = useState(false);\r\n  const [VerityAlert, setVerityAlert] = useState(false);\r\n  const [varietyValidation, setvarietyValidated] = useState(false);\r\n  const [ProductDraftAlert, setProductDraftAlert] = useState(false);\r\n  const [UpdatetAlert, setUpdatetAlert] = useState(false);\r\n  const [ProductAlert, setProductAlert] = useState(false);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [variantapicall, setvariantapicall] = useState(false);\r\n  const [varietyshow, setvarietyShow] = useState(false);\r\n  const [addtag, setaddtag] = useState();\r\n  const [validated, setValidated] = useState(false);\r\n  const [customvalidated, setcustomValidated] = useState(false);\r\n  const [modalshow, setmodalshow] = useState(false);\r\n  const [unitValidated, setunitValidated] = useState(false);\r\n  const [varietyUnitvalidation, setVarietyUnitvalidation] = useState(\"\");\r\n  var veriantData = {\r\n    product_status: \"pending\",\r\n    product_id: \"\",\r\n    unit: \"\",\r\n    colors: \"\",\r\n    unit_quantity: \"\",\r\n    size: \"\",\r\n    product_price: \"\",\r\n    mrp: \"\",\r\n    sale_price: \"\",\r\n    discount: \"0\",\r\n    special_offer: false,\r\n    featured_product: false,\r\n    manufacturing_date: \"\",\r\n    expire_date: \"\",\r\n    quantity: \"\",\r\n  };\r\n\r\n  const [totaltax, settotaltax] = useState(\"\");\r\n  const [variantarray, setvariantarray] = useState(veriantData);\r\n\r\n\r\n  const [variantmainarray, setvariantmainarray] = useState([]);\r\n  // const [productvariantarray, setproductvariantarray] = useState(veriantData);\r\n  const [data1, setdata1] = useState(\"\");\r\n  console.log(data1);\r\n  const [otherintro, setotherintro] = useState(\"\");\r\n  console.log(otherintro);\r\n\r\n  const [headerval, setheaderval] = useState(\"\");\r\n  const [descval, setdescval] = useState(\"\");\r\n  const [customarray, setcustomarray] = useState([]);\r\n  const [AddCustom, setAddCustom] = useState({\r\n    header: [],\r\n    description: [],\r\n  });\r\n  const [vdata, setvdata] = useState([]);\r\n  // let [condition, setCondition] = useState(false);\r\n  // var category_name={\r\n\r\n  // }\r\n  var data = {\r\n    add_custom_input: [],\r\n    product_title_name: \"\",\r\n    product_slug: \"\",\r\n    store_name: \"\",\r\n    product_type: \"\",\r\n    category: [],\r\n    parent_category: \"\",\r\n    wholesale_sales_tax: \"0\",\r\n    gst: \"0\",\r\n    cgst: \"0\",\r\n    sgst: \"0\",\r\n    retails_sales_tax: \"0\",\r\n    value_added_tax: \"0\",\r\n    manufacturers_sales_tax: \"0\",\r\n    manufacturing_date: \"\",\r\n    expire_date: \"\",\r\n    seo_tag: [],\r\n    variety: \"\",\r\n    product_description: \"\",\r\n    other_introduction: \"\",\r\n    vendor_id: \"\",\r\n    shop: \"\",\r\n    show_product_rating: \"0\",\r\n  };\r\n  const [RestoreAlert, setRestoreAlert] = useState(false);\r\n  const [productdata, setproductdata] = useState(data);\r\n  const mainformRef = useRef();\r\n  const formRef = useRef();\r\n  const [searchdata, setsearchData] = useState({\r\n    product_title_name: \"\",\r\n    vendor: \"\",\r\n    brand: \"\",\r\n    tag: \"\",\r\n    category: \"\",\r\n    product_status: \"\",\r\n  });\r\n\r\n  const [variantremove, setVariantRemove] = useState([]);\r\n  const [editbutton, setEditButton] = useState(false);\r\n  console.log(editbutton)\r\n  const [taxdata, settaxdata] = useState({\r\n    wholesale_sales_tax: \"0\",\r\n    gst: \"0\",\r\n    cgst: \"0\",\r\n    sgst: \"0\",\r\n    retails_sales_tax: \"0\",\r\n    value_added_tax: \"0\",\r\n    manufacturers_sales_tax: \"0\",\r\n  });\r\n  const [productID, setproductID] = useState(\"\");\r\n  const [bulkProductError, setBulkProductError] = useState(\"\");\r\n  const [AddtagError, setAddTagError] = useState(\"\");\r\n  console.log(AddtagError)\r\n\r\n  const [Docnamearray, setDocnameArray] = useState([]);\r\n\r\n  // OFFER ADD MODAL\r\n  const [featureshow, setfeatureShow] = useState(false);\r\n  const [featuredata, setfeaturedata] = useState({\r\n    start_date: \"\",\r\n    end_date: \"\",\r\n    product_id: \"\",\r\n    fetured_type: \"\",\r\n  });\r\n  //ADD SEO TAG\r\n  const onDocuAddclick = () => {\r\n\r\n    if (addtag !== \"\") {\r\n      setDocnameArray((Docnamearray) => [...Docnamearray, addtag]);\r\n      console.log(Docnamearray)\r\n      setaddtag(\"\");\r\n      setAddTagError(\"\");\r\n      setcustomValidated(false);\r\n      setOpen(false)\r\n\r\n    }\r\n    else {\r\n      setcustomValidated(true);\r\n\r\n      //     setaddtag(e.target.value);\r\n      // console.log(\"e.target.value\")\r\n\r\n      // console.log(e.target.value)\r\n\r\n    }\r\n  };\r\n\r\n  const onDocumentNamechange = (e) => {\r\n    setaddtag(e.target.value);\r\n    // console.log(\"e.target.value\")\r\n    // console.log(e.target.value)\r\n  };\r\n\r\n  const DocuRemoveClick = (e) => {\r\n    setDocnameArray(Docnamearray.filter((item) => item !== e));\r\n  };\r\n\r\n  const [productname, setproductname] = useState(\"\");\r\n\r\n  const OnOfferProductAdd = (e) => {\r\n    setValidated(true)\r\n    e.preventDefault();\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL_0}/add_fetured_product`,\r\n        featuredata,\r\n        {\r\n          headers: { admin_token: `${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n\r\n        if (response.data.message === \"Already_Exist\") {\r\n          setError(false);\r\n        } else {\r\n          setRestoreAlert(true);\r\n          setapicall(true);\r\n          setfeatureShow(false);\r\n          setfeaturedata({\r\n            start_date: \"\",\r\n            end_date: \"\",\r\n          });\r\n          setError(\"\");\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const featureModalClose = (e) => {\r\n    setfeatureShow(false);\r\n    setError(\"\");\r\n    setfeaturedata({ start_date: \"\", end_date: \"\" });\r\n  };\r\n  // const featureModalShow = () => setfeatureShow(true);\r\n  const OnProductOfferClick = (e, productid, productname) => {\r\n    setfeaturedata({\r\n      ...featuredata,\r\n      product_id: `${productid}`,\r\n      fetured_type: e,\r\n    });\r\n    setproductname(productname);\r\n    setfeatureShow(true);\r\n  };\r\n  const OnFeatureDateChaneg = (e) => {\r\n    setfeaturedata({ ...featuredata, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // OFFER ADD MODAL END\r\n\r\n  // PRODUCT STATUS CHANGE API\r\n  const onProductStatusChange = (e, id, productid) => {\r\n    setLoading(true);\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL_0}/product_status_update`,\r\n        {\r\n          id: `${id}`,\r\n          product_id: `${productid}`,\r\n          product_status: e.target.value,\r\n        },\r\n        {\r\n          headers: { admin_token: `${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setLoading(false);\r\n        setapicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        setLoading(false);\r\n      });\r\n\r\n  };\r\n  // PRODUCT STATUS CHANGE API END\r\n\r\n  // MAIN PRODUCT LIST API\r\n  const fetchdata = () => {\r\n    let productArry = [];\r\n    setLoading(true);\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL_0}/home?page=0&per_page=400`,\r\n        {\r\n          product_search: {\r\n            search: [`${searchdata.product_title_name}`],\r\n            price_from: \"\",\r\n            price_to: \"\",\r\n            id: \"\",\r\n            sale_price: \"\",\r\n            short_by_updated_on: \"\",\r\n            product_title_name_asc_desc: \"\",\r\n            category: [`${searchdata.category}`],\r\n            product_status: [`${searchdata.product_status}`],\r\n            is_delete: [\"1\"],\r\n            colors: [],\r\n            size: [],\r\n            seo_tag: [`${searchdata.tag}`],\r\n            parent_category: [],\r\n            product_type: [],\r\n            // product_title_name: [],\r\n            brand: [`${searchdata.brand}`],\r\n            shop: [`${searchdata.vendor}`],\r\n          },\r\n        },\r\n        {\r\n          headers: { admin_token: `${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        let v = response.data.results;\r\n        v.forEach(function (item, index) {\r\n\r\n          // console.log(item.category)\r\n          // console.log(response.data.category_name[item.category])\r\n          let catname = response.data.category_name[item.category]\r\n          // console.log(catname)\r\n          // console.log(item)\r\n\r\n          item.category = catname;\r\n          // console.log(\"item\"+JSON.stringify(item))\r\n\r\n          productArry.push(item)\r\n        }\r\n        );\r\n        let response_data = {};\r\n        response_data[\"results\"] = productArry;\r\n        //  console.log(\"response_data\")\r\n        //  console.log(response_data)\r\n        setpdata(response_data)\r\n        setLoading(false);\r\n        setapicall(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // const first = \"\";\r\n    fetchdata();\r\n    getVendorData();\r\n    getCategorydatafilter();\r\n  }, [apicall, variantapicall, Alert]);\r\n\r\n  //MAIN PRODUCT LIST API END\r\n\r\n  // PRODUCT DELETE ALERT\r\n  // let filtered;\r\n  const handleAlert = (id) => {\r\n    setAlert(true);\r\n    setVariantRemove({ ...variantremove, id: id[0], productid: id[1] });\r\n    setvariantid(id[0]);\r\n    setproductid(id[1]);\r\n  };\r\n  // END PRODUCT DELETE ALERT\r\n\r\n  //  json\r\n  var varietyy = VariationJson;\r\n\r\n  var categorytype = CategoryJson;\r\n  const OnProductNameClick = (id) => {\r\n    localStorage.setItem(\"variantid\", id[0]);\r\n    localStorage.setItem(\"productid\", id[1]);\r\n    navigate(\"/productdetail\");\r\n  };\r\n  // CATEGORY SELECT SHOW ON PRODUCT ADD\r\n  const categoryFormChange = (e, id) => {\r\n    setIndVal(e.target.value);\r\n    setScategory({ ...scategory, [e.target.name]: e.target.value });\r\n  };\r\n  useEffect(() => {\r\n    if (indVal === \"\") {\r\n      setSubCategory(\"\");\r\n      setchildCategory(\"\");\r\n      //   setgrandcCategory(\"\");\r\n      //   setproductdata({\r\n      //     ...productdata,\r\n      //     category: indVal,\r\n      //   });\r\n    } else {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL_0}/category?category=${indVal}`)\r\n        .then((response) => {\r\n          if (response.data !== []) {\r\n            let cgory = response.data;\r\n            if (indVal === scategory.parent_category) {\r\n              setSubCategory(cgory);\r\n              setproductdata({\r\n                ...productdata,\r\n                parent_category: \"0\",\r\n                category: indVal,\r\n              });\r\n            } else if (indVal === scategory.sub_category) {\r\n              setchildCategory(cgory);\r\n\r\n              setproductdata({\r\n                ...productdata,\r\n                parent_category: cgory[0].all_parent_id,\r\n                category: indVal,\r\n              });\r\n              setlevel(2);\r\n            } else if (indVal === scategory.childcategory) {\r\n              setgrandcCategory(cgory);\r\n              setproductdata({\r\n                ...productdata,\r\n                parent_category: cgory.all_parent_id,\r\n                category: indVal,\r\n              });\r\n              setlevel(3);\r\n            } else if (indVal === scategory.gcategory) {\r\n              setgrandcCategory(cgory);\r\n              setproductdata({\r\n                ...productdata,\r\n                parent_category: cgory[0].all_parent_id,\r\n                category: indVal,\r\n              });\r\n              setlevel(4);\r\n            }\r\n          }\r\n        });\r\n    }\r\n  }, [scategory, indVal]);\r\n  //category name api for filter\r\n\r\n\r\n  // vendor api for filter\r\n  const getVendorData = () => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/vendors`,\r\n          { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n          const result = cgory.filter(\r\n            (thing, index, self) =>\r\n              index === self.findIndex((t) => t.shop_name === thing.shop_name)\r\n          );\r\n          const result1 = result.filter(\r\n            (item) => item.status === \"approved\" || item.status === \"active\"\r\n          );\r\n          setVendorId(result1);\r\n          // setVid(\"\")\r\n        });\r\n    } catch (err) { }\r\n  };\r\n  // end vendor api\r\n\r\n  // category api for filter\r\n  const getCategorydatafilter = () => {\r\n    try {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL_0}/category?category=all`)\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n          setfiltercategory(cgory);\r\n        });\r\n    } catch (err) { }\r\n  };\r\n  // end category api\r\n\r\n  // modal\r\n  const [editparentCategory, seteditparentCategory] = useState(\"\");\r\n  let token = localStorage.getItem(\"token\");\r\n  // ADD AND EDIT PRODUCT MODAL\r\n\r\n  const handleShow = (e) => {\r\n\r\n    setproductdata(data);\r\n    // vendor\r\n    getVendorData();\r\n    // end vendor api\r\n\r\n    // category data\r\n    const getCategorydata = () => {\r\n      try {\r\n        axios\r\n          .get(`${process.env.REACT_APP_BASEURL_0}/category?category=${indVal}`)\r\n          .then((response) => {\r\n            let cgory = response.data;\r\n\r\n            if (indVal === 0) {\r\n              setCategory(cgory);\r\n              setSubCategory(\"\");\r\n\r\n              setlevel(0);\r\n            }\r\n          });\r\n      } catch (err) { }\r\n    };\r\n    getCategorydata();\r\n    // end category data\r\n\r\n    if (e === \"add\") {\r\n      setmodalshow(e);\r\n    } else {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL}/product_details?id=${e}`)\r\n        .then((response) => {\r\n          let data = response.data;\r\n          if (data !== undefined || data !== \"\" || data !== null) {\r\n            setproductdata(data);\r\n            console.log(\"BHAVNAA\" + JSON.stringify(data))\r\n            // categoryedit\r\n\r\n            const arr = data.parent_category.split(\",\");\r\n            for (let i = 0; i < arr.length; i++) {\r\n              console.log(\"&&&&&&&&&&\" + arr)\r\n\r\n              axios\r\n                .get(\r\n                  `${process.env.REACT_APP_BASEURL_0}/category_details?id=${arr[i]}`\r\n                )\r\n                .then((response) => {\r\n                  let data = response.data[0];\r\n                  setCategoryEditData(data);\r\n\r\n                  if (i === 0) {\r\n                    axios\r\n                      .get(\r\n                        `${process.env.REACT_APP_BASEURL_0}/category?category=${arr[i]}`\r\n                      )\r\n                      .then((response) => {\r\n                        console.log(\r\n                        );\r\n                        setSubCategory(response.data);\r\n                      });\r\n                    seteditparentCategory(data.category_name);\r\n                    console.log(\"PPPPPPP-000\" + editparentCategory)\r\n                    setCategoryEditparent(data.category_name);\r\n                    console.log(\"88uuuuuuuuuHHHHH\" + categoryeditparent)\r\n\r\n\r\n                  } else if (i === 1) {\r\n                    axios\r\n                      .get(\r\n                        `${process.env.REACT_APP_BASEURL_0}/category?category=${arr[i]}`\r\n                      )\r\n                      .then((response) => {\r\n\r\n                        setchildCategory(response.data);\r\n                      });\r\n                    setCategoryEditparent(data.category_name);\r\n\r\n                    setCategoryEditSubparent(data.category_name);\r\n                    setCategoryEditChildparent(data.category_name);\r\n                  } else if (i === 2) {\r\n                    axios\r\n                      .get(\r\n                        `${process.env.REACT_APP_BASEURL_0}/category?category=${arr[i]}`\r\n                      )\r\n                      .then((response) => {\r\n\r\n                        setgrandcCategory(response.data);\r\n                      });\r\n                    setCategoryEditSubparent(data.category_name);\r\n                    setCategoryEditChildparent(data.category_name);\r\n                  } else if (i === 3) {\r\n                    setCategoryEditChildparent(data.category_name);\r\n                  }\r\n                  setCategoryEditData(data)\r\n                });\r\n            }\r\n            // end category edit api\r\n          }\r\n\r\n          let customdatra = JSON.parse(response.data.add_custom_input);\r\n          setcustomarray(customdatra);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      setmodalshow(e);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    handleShow();\r\n  }, []);\r\n\r\n  // ONADD PRODUCT INPUT  CHANGE\r\n  const handleInputFieldChange = (e) => {\r\n    setCheckProductType(false);\r\n    setproductdata({\r\n      ...productdata,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    settaxdata({\r\n      ...taxdata,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const handleVendorNameChange = (e) => {\r\n    let arr = e.target.value.split(\",\");\r\n    setproductdata({\r\n      ...productdata,\r\n      store_name: arr[1],\r\n      vendor_id: arr[0],\r\n      shop: arr[1],\r\n    });\r\n  };\r\n\r\n  const handleClose = () => {\r\n\r\n    setShow(false)\r\n\r\n    setValidated(false);\r\n    setmodalshow(false);\r\n    setCurrentPage(\"choose-img\");\r\n    setIndVal(0);\r\n    setCategoryEditData(\"\");\r\n    setproductdata(data);\r\n    setcustomarray([]);\r\n    setvariantarray(veriantData);\r\n    setvariantmainarray([]);\r\n    setcustomValidated(false);\r\n    setVarietyUnitvalidation(\"\");\r\n    setvarietyValidated(false);\r\n  };\r\n  // END ADD AND EDIT PRODUCT MODAL\r\n\r\n  // seotag\r\n  // let tagname;\r\n  // const ontagchange = (e) => {\r\n  //   tagname = e.target.value;\r\n  //   setaddtag(tagname);\r\n  // };\r\n\r\n  // const tagRemoveClick = (e) => {\r\n  //   setproductdata({ ...productdata, seo_tag: \"\" });\r\n  //   // setseoArray(seoarray.filter((item) => item !== e));\r\n  // };\r\n  // const ontagaddclick = (e) => {\r\n  //   if (addtag === \"\") {\r\n  //     setunitValidated(\"seotagclick\");\r\n  //   } else {\r\n  //     setunitValidated(\"\");\r\n  //     setproductdata({\r\n  //       ...productdata,\r\n  //       seo_tag: addtag,\r\n  //     });\r\n  //   }\r\n  //   setaddtag(\"\");\r\n  // };\r\n  // END SEO TAG ADD\r\n  // IMAGE UPLOAD SECTION\r\n  // const convertToBase64 = (file) => {\r\n  //   console.log(\"baseeeeeeeeeeeeee\");\r\n  //   return new Promise((resolve, reject) => {\r\n  //     const fileReader = new FileReader();\r\n  //     const { name } = file;\r\n  //     fileReader.addEventListener(\"load\", () => {\r\n  //       resolve({ name: name, base64: fileReader.result });\r\n  //     });\r\n  //     fileReader.readAsDataURL(file);\r\n  //     fileReader.onerror = (error) => {\r\n  //       reject(error);\r\n  //     };\r\n  //   });\r\n  // };\r\n  const onImageSelected = (event) => {\r\n    if (event.target.files[0].name && event.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      const image_name = event.target.files[0].name;\r\n      reader.readAsDataURL(event.target.files[0]);\r\n\r\n      reader.onload = function () {\r\n        console.log(\"stage1 \")\r\n        setImage(reader.result);\r\n        setimageName(image_name)\r\n        // onImageSelected({ \"dataurl\": reader.result, \"imageName\": image_name });\r\n      };\r\n\r\n\r\n      setCurrentPage(\"crop-img\");\r\n      // setShow(true)\r\n    }\r\n  };\r\n\r\n\r\n  // const handleClose=(mclose)=>{\r\n  //    setShow(mclose.false)\r\n  //    console.log(\"\")\r\n  //    console.log(mclose.false)\r\n\r\n  // };\r\n  const onCropDone = (imgCroppedArea, product_id, id, vendor_id) => {\r\n\r\n    const canvasEle = document.createElement(\"canvas\");\r\n    canvasEle.width = imgCroppedArea.width;\r\n\r\n    canvasEle.height = imgCroppedArea.height;\r\n    const context = canvasEle.getContext(\"2d\");\r\n    let imageObj1 = new Image();\r\n    imageObj1.src = image;\r\n    imageObj1.onload = function () {\r\n      context.drawImage(\r\n        imageObj1,\r\n        imgCroppedArea.x,\r\n        imgCroppedArea.y,\r\n        imgCroppedArea.width,\r\n        imgCroppedArea.height,\r\n        0,\r\n        0,\r\n        imgCroppedArea.width,\r\n        imgCroppedArea.height\r\n      );\r\n\r\n      const dataURL = canvasEle.toDataURL(\"image/jpeg\");\r\n\r\n      imguploadchange(dataURL, product_id, id, vendor_id)\r\n      onImgView(id, product_id)\r\n\r\n      // console.log(\"VARIENT IDDD+\"+id)\r\n      setimageboxid(imageboxid);\r\n      setCurrentPage(\"img-cropped\");\r\n    };\r\n    setapicall(true)\r\n\r\n  };\r\n\r\n  const onCropCancel = () => {\r\n    setCurrentPage(\"choose-img\");\r\n    setImage(\"\");\r\n  };\r\n\r\n  const imguploadchange = async (dataURL, product_id, id, vendor_id) => {\r\n    setcustomValidated(\"\");\r\n    onImgView(id, product_id);\r\n    setimageboxid(id);\r\n    console.log(\"IMAGEBOXXXIDDD\" + imageboxid)\r\n\r\n    // let i\r\n\r\n    for (var i = 0; i < imageName.length; i++) {\r\n      var coverimg;\r\n\r\n      console.log(\"ggggggggg\" + coverimg)\r\n      if (newImageUrls.length === 0 && i === 0) {\r\n        coverimg = \"cover\";\r\n      } else {\r\n        coverimg = `cover${i}`;\r\n\r\n      }\r\n    }\r\n    //   encoded = await convertToBase64(e.target.files[i]);\r\n    encoded = dataURL;\r\n    const [first, ...rest] = encoded.split(\",\");\r\n    let imgvalidation = first.split(\"/\").pop();\r\n    if (\r\n      imgvalidation === \"jpeg;base64\" ||\r\n      imgvalidation === \"jpg;base64\" ||\r\n      imgvalidation === \"png;base64\"\r\n    ) {\r\n      const productimg = rest.join(\"-\");\r\n      let imar = {\r\n        product_id: `${product_id}`,\r\n        product_verient_id: `${imageboxid}`,\r\n        vendor_id: `${vendor_id}`,\r\n        product_image_name: `${imageName}${i}${imageboxid}`,\r\n        image_position: coverimg,\r\n        img_64: productimg,\r\n      };\r\n\r\n\r\n      ImgObj.push(imar);\r\n      axios\r\n        .post(`${process.env.REACT_APP_BASEURL}/product_images`, ImgObj)\r\n        .then((response) => {\r\n\r\n          ImgObj = [];\r\n          setcustomValidated(\"\");\r\n          setimageboxid(\"\");\r\n\r\n          setapicall(true)\r\n          onImgView(id, product_id);\r\n\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      setcustomValidated(\"imgformat\");\r\n\r\n    }\r\n    setProductAlert(true);\r\n\r\n  };\r\n\r\n\r\n  const [imageboxid, setimageboxid] = useState(0);\r\n\r\n  const onImgView = (id, productid) => {\r\n    setEditButton(false);\r\n    setimageboxid(id);\r\n\r\n    axios\r\n      .get(\r\n        `${process.env.REACT_APP_BASEURL}/product_images_get_singal_veriant?product_id=${productid}&product_verient_id=${id}`\r\n      )\r\n      .then((response) => {\r\n        setnewImageUrls(response.data)\r\n        setapicall(true);\r\n        setmodalshow(false);\r\n        setImgAfterCrop(\"\")\r\n\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n\r\n  const onImgCoverEditClick = (imgid, productid, productvariantid) => {\r\n\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/change_porduct_cover_image`, {\r\n        product_image_id: `${imgid}`,\r\n        product_id: `${productid}`,\r\n        product_verient_id: `${productvariantid}`,\r\n      })\r\n      .then((response) => {\r\n        onImgView(productvariantid, productid);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const onImgRemove = (id, name, vendor_id, product_id, product_verient_id) => {\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/product_image_delete`, {\r\n        product_image_id: `${id}`,\r\n        product_image_name: `${name}`,\r\n        vendor_id: `${vendor_id}`,\r\n      })\r\n      .then((response) => {\r\n        setapicall(true);\r\n\r\n        onImgView(product_verient_id, product_id);\r\n\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n  // ADD AND EDIT  VARIETY SECTION\r\n  const onVariantChange = (e) => {\r\n    // setValidated(true);\r\n    setcustomValidated(false);\r\n    setVarietyUnitvalidation(\"\");\r\n    setvarietyValidated(false);\r\n    setvariantarray({\r\n      ...variantarray,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n\r\n\r\n  };\r\n\r\n\r\n  let discountt = (variantarray.mrp * variantarray.discount) / 100;\r\n  let saleprice = variantarray.mrp - discountt;\r\n  let totaltaxpercent =\r\n    Number(taxdata.gst) +\r\n    Number(taxdata.wholesale_sales_tax) +\r\n    Number(taxdata.retails_sales_tax) +\r\n    Number(taxdata.manufacturers_sales_tax) +\r\n    Number(taxdata.value_added_tax);\r\n  let totaltaxx = (saleprice * totaltaxpercent) / 100;\r\n\r\n  let product_price = variantarray.sale_price - totaltaxx;\r\n  useEffect(() => {\r\n    // let discountt = (variantarray.mrp * variantarray.discount) / 100;\r\n    // let saleprice = variantarray.mrp - discountt;\r\n    // let totaltaxpercent =\r\n    //   Number(taxdata.gst) +\r\n    //   Number(taxdata.wholesale_sales_tax) +\r\n    //   Number(taxdata.retails_sales_tax) +\r\n    //   Number(taxdata.manufacturers_sales_tax) +\r\n    //   Number(taxdata.value_added_tax);\r\n    // let totaltaxx = (saleprice * totaltaxpercent) / 100;\r\n    settotaltax(totaltaxx);\r\n    // let product_price = saleprice - totaltaxx;\r\n    setvariantarray({\r\n      ...variantarray,\r\n      product_status: \"pending\",\r\n      product_price: `${product_price}`,\r\n      sale_price: `${saleprice}`,\r\n    });\r\n  }, [variantarray.mrp, variantarray.discount, taxdata]);\r\n  // const handleInputcheckboxChange = (e) => {\r\n  //   setcustomValidated(false);\r\n  //   const target = e.target;\r\n  //   const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n  //   setvariantarray({\r\n  //     ...variantarray,\r\n  //     [e.target.name]: value,\r\n  //   });\r\n  // };\r\n  // const handleVarietyChange = (e) => {\r\n  //   setValidated(false);\r\n  //   setcustomValidated(false);\r\n  //   setVarietyUnitvalidation(\"\");\r\n  //   setvarietyValidated(false);\r\n  //   setvariantarray({\r\n  //     ...variantarray,\r\n  //     [e.target.name]: e.target.value,\r\n  //   });\r\n  // };\r\n\r\n  const getProductVariant = (id) => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL_0}/home?page=0&per_page=400`,\r\n        {\r\n          product_search: {\r\n            search: \"\",\r\n            category: [],\r\n            price_from: \"\",\r\n            price_to: \"\",\r\n            id: \"\",\r\n            product_title_name_asc_desc: \"\",\r\n            sale_price: \"\",\r\n            short_by_updated_on: \"\",\r\n            is_delete: [\"1\"],\r\n            product_id: [`${id}`],\r\n            product_title_name: [],\r\n          },\r\n        },\r\n        {\r\n          headers: { admin_token: `${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setvdata(response.data.results);\r\n        settaxdata(response.data.results[0]);\r\n        setvariantapicall(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // ADD VARIETY MODAL\r\n  const handlevarietyShow = (id, variantid) => {\r\n    console.log(\"----\")\r\n    console.log(variantid)\r\n\r\n    // START GET THE SELECTED VARIENT DATA------------------------------------------------------\r\n    axios\r\n      .get(\r\n        `${process.env.REACT_APP_BASEURL}/products_pricing?id=${variantid}&product_id=${id}`\r\n      )\r\n      .then((response) => {\r\n        setvariantarray({\r\n          ...variantarray,\r\n          unit: response.data[0].unit,\r\n          product_id: id,\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    // END GET THE SELECTED VARIENT DATA------------------------------------------------------\r\n\r\n    getProductVariant(id);\r\n    onImgView(variantid, id);\r\n    setvariantarray({\r\n      ...variantarray,\r\n      product_id: id,\r\n    });\r\n    setproductID(id);\r\n    setvarietyShow(true);\r\n  };\r\n\r\n  const handlevarietyClose = (e) => {\r\n    setChangeUnitProperty(false);\r\n    setvariantarray(veriantData);\r\n    setVarietyUnitvalidation(\"\");\r\n    setcustomValidated(false);\r\n    setvarietyShow(false);\r\n  };\r\n  const onVariantaddclick = (id) => {\r\n    if (id === undefined || id === null || unitValidated === \"false\") {\r\n      if (\r\n        variantarray.unit === \"\" ||\r\n        variantarray.unit === null ||\r\n        variantarray.unit === \"Select\" ||\r\n        variantarray.product_price === \"\" ||\r\n        variantarray.mrp === \"\" ||\r\n        variantarray.sale_price === \"\" ||\r\n        variantarray.manufacturing_date === \"\" ||\r\n        variantarray.expire_date === \"\" ||\r\n        variantarray.quantity === \"\"\r\n        // variantarray.product_price == \"\" ||\r\n        // variantarray.mrp == \"\" ||\r\n        // variantarray.sale_price == \"\" ||\r\n        // variantarray.manufacturing_date == \"\" ||\r\n        // variantarray.expire_date == \"\" ||\r\n        // variantarray.quantity == \"\"\r\n      ) {\r\n        setcustomValidated(true);\r\n        setValidated(true);\r\n      } else if (variantarray.quantity === 0 || variantarray.quantity < 1) {\r\n        setVarietyUnitvalidation(\"QwanityValidation\");\r\n      } else if (variantarray.manufacturing_date > variantarray.expire_date) {\r\n        setVarietyUnitvalidation(\"ExpireDateValidation\");\r\n      } else if (\r\n        vdata[0].product_type === \"Cloths\" &&\r\n        variantarray.unit === \"pcs\" &&\r\n        (variantarray.colors === \"\" ||\r\n          variantarray.size === null ||\r\n          variantarray.size === \"\")\r\n      ) {\r\n        setVarietyUnitvalidation(\"fillUnit&size&color\");\r\n      } else if (\r\n        vdata[0].product_type !== \"Cloths\" &&\r\n        variantarray.unit === \"pcs\" &&\r\n        variantarray.colors === \"\" &&\r\n        (variantarray.size === null || variantarray.size === \"\")\r\n      ) {\r\n        setVarietyUnitvalidation(\"fillUnit&color\");\r\n      } else if (\r\n        variantarray.unit !== \"pcs\" &&\r\n        (variantarray.unit_quantity === \"\" ||\r\n          variantarray.unit_quantity === \"null\" ||\r\n          variantarray.unit_quantity === null)\r\n      ) {\r\n        setVarietyUnitvalidation(\"unitQwanity&size&color\");\r\n      } else if (Number(variantarray.discount) > 100) {\r\n        setVarietyUnitvalidation(\"discountmore\");\r\n      } else if (\r\n        Number(variantarray.mrp) > 50000 ||\r\n        Number(variantarray.mrp) <= 0\r\n      ) {\r\n        setVarietyUnitvalidation(\"mrpmore\");\r\n      } else {\r\n        axios\r\n          .post(\r\n            `${process.env.REACT_APP_BASEURL}/products_varient_add`,\r\n            variantarray\r\n          )\r\n          .then((response) => {\r\n            if ((response.affectedRows = \"1\")) {\r\n              setProductAlert(true);\r\n              setValidated(false);\r\n\r\n              setvariantarray({\r\n                product_status: \"\",\r\n                colors: \"\",\r\n                unit_quantity: \"\",\r\n                size: \"\",\r\n                product_price: \"\",\r\n                mrp: \"\",\r\n                sale_price: \"\",\r\n                discount: \"0\",\r\n                special_offer: false,\r\n                featured_product: false,\r\n                manufacturing_date: \"\",\r\n                expire_date: \"\",\r\n                quantity: \"\",\r\n                product_id: productID,\r\n              });\r\n            } else if (response.errno === 1064) {\r\n              alert(\"Error in add product\");\r\n              setProductAlert(false);\r\n            } else {\r\n              setProductAlert(false);\r\n            }\r\n\r\n            // formRef.reset();\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      }\r\n    } else {\r\n      if (\r\n        // variantarray.unit == \"\" ||\r\n        // variantarray.unit == null ||\r\n        // variantarray.unit == \"Select\" ||\r\n        variantarray.product_price === \"\" ||\r\n        variantarray.mrp === \"\" ||\r\n        variantarray.sale_price === \"\" ||\r\n        variantarray.manufacturing_date === \"\" ||\r\n        variantarray.expire_date === \"\" ||\r\n        variantarray.quantity === \"\"\r\n      ) {\r\n        setcustomValidated(true);\r\n      } else if (variantarray.quantity === 0 || variantarray.quantity < 1) {\r\n        setVarietyUnitvalidation(\"QwanityValidation\");\r\n      } else if (variantarray.manufacturing_date > variantarray.expire_date) {\r\n        setVarietyUnitvalidation(\"ExpireDateValidation\");\r\n      } else if (\r\n        vdata[0].product_type === \"Cloths\" &&\r\n        variantarray.unit === \"pcs\" &&\r\n        (variantarray.colors === \"\" ||\r\n          variantarray.size === null ||\r\n          variantarray.size === \"\")\r\n      ) {\r\n        setVarietyUnitvalidation(\"fillUnit&size&color\");\r\n      } else if (\r\n        vdata[0].product_type !== \"Cloths\" &&\r\n        variantarray.unit === \"pcs\" &&\r\n        variantarray.colors === \"\" &&\r\n        (variantarray.size === null || variantarray.size === \"\")\r\n      ) {\r\n        setVarietyUnitvalidation(\"fillUnit&color\");\r\n      } else if (\r\n        variantarray.unit !== \"pcs\" &&\r\n        (variantarray.unit_quantity === \"\" ||\r\n          variantarray.unit_quantity === \"null\" ||\r\n          variantarray.unit_quantity === null)\r\n      ) {\r\n        setVarietyUnitvalidation(\"unitQwanity&size&color\");\r\n      } else if (\r\n        Number(variantarray.discount) > 100 ||\r\n        Number(variantarray.discount) < 0\r\n      ) {\r\n        setVarietyUnitvalidation(\"discountmore\");\r\n      } else if (\r\n        Number(variantarray.mrp) > 50000 ||\r\n        Number(variantarray.mrp) <= 0\r\n      ) {\r\n        setVarietyUnitvalidation(\"mrpmore\");\r\n      } else {\r\n        axios\r\n          .put(\r\n            `${process.env.REACT_APP_BASEURL}/products_varient_update`,\r\n            variantarray\r\n          )\r\n          .then((response) => {\r\n            setvariantarray({\r\n              product_status: \"\",\r\n              // unit: \"\",\r\n              colors: \"\",\r\n              unit_quantity: \"\",\r\n              size: \"\",\r\n              product_price: \"\",\r\n              mrp: \"\",\r\n              sale_price: \"\",\r\n              discount: \"0\",\r\n              special_offer: false,\r\n              featured_product: false,\r\n              manufacturing_date: \"\",\r\n              expire_date: \"\",\r\n              quantity: \"\",\r\n              product_id: productID,\r\n            });\r\n\r\n            if ((response.affectedRows = \"1\")) {\r\n              setUpdatetAlert(true);\r\n            } else if (response.error) {\r\n              alert(\"Error in add product\");\r\n              setUpdatetAlert(false);\r\n            } else {\r\n              setUpdatetAlert(false);\r\n            }\r\n\r\n            getProductVariant(productID);\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n  // addproduct variant\r\n  const VariantAddProduct = () => {\r\n\r\n    // console.log(\"&&&&&\"+e)\r\n    setproductdata({\r\n      ...productdata,\r\n      variety: true,\r\n    });\r\n    if (productdata.product_type === \"\") {\r\n\r\n      setCheckProductType(true);\r\n    } else {\r\n      if (\r\n        variantarray.unit === \"\" ||\r\n        variantarray.unit === undefined ||\r\n        variantarray.unit === null ||\r\n        variantarray.unit === \"Select\" ||\r\n        variantarray.product_price === \"\" ||\r\n        variantarray.mrp === \"\" ||\r\n        variantarray.sale_price === \"\" ||\r\n        variantarray.manufacturing_date === \"\" ||\r\n        variantarray.expire_date === \"\" ||\r\n        variantarray.quantity === \"\"\r\n      ) {\r\n        setcustomValidated(true);\r\n      } else if (variantarray.quantity === 0 || variantarray.quantity < 1) {\r\n        setVarietyUnitvalidation(\"QwanityValidation\");\r\n      } else if (variantarray.manufacturing_date > variantarray.expire_date) {\r\n        setVarietyUnitvalidation(\"ExpireDateValidation\");\r\n      } else if (\r\n        productdata.product_type === \"Cloths\" &&\r\n        variantarray.unit === \"pcs\" &&\r\n        (variantarray.colors === \"\" ||\r\n          variantarray.size === null ||\r\n          variantarray.size === \"\")\r\n      ) {\r\n        setVarietyUnitvalidation(\"fillUnit&size&color\");\r\n      } else if (\r\n        productdata.product_type !== \"Cloths\" &&\r\n        variantarray.unit === \"pcs\" &&\r\n        variantarray.colors === \"\" &&\r\n        (variantarray.size === \"\" || variantarray.size === null)\r\n      ) {\r\n        setVarietyUnitvalidation(\"fillUnit&color\");\r\n      } else if (\r\n        variantarray.unit !== \"pcs\" &&\r\n        (variantarray.unit_quantity === \"\" ||\r\n          variantarray.unit_quantity === \"null\" ||\r\n          variantarray.unit_quantity === null)\r\n      ) {\r\n        setunitValidated(true);\r\n        setVarietyUnitvalidation(\"unitQwanity&size&color\");\r\n      } else if (Number(variantarray.discount) > 100) {\r\n        setunitValidated(true);\r\n        setVarietyUnitvalidation(\"discountmore\");\r\n      } else if (\r\n        Number(variantarray.mrp) > 50000 ||\r\n        Number(variantarray.mrp) <= 0\r\n      ) {\r\n        setunitValidated(true);\r\n        setVarietyUnitvalidation(\"mrpmore\");\r\n      } else {\r\n        setvariantmainarray((variantmainarray) => [\r\n          ...variantmainarray,\r\n          variantarray,\r\n        ]);\r\n        setVarietyUnitvalidation(\"\");\r\n        setvarietyValidated(false);\r\n        setcustomValidated(false);\r\n\r\n        setvariantarray({\r\n          product_status: \"pending\",\r\n          unit: variantarray.unit,\r\n          colors: \"\",\r\n          unit_quantity: \"\",\r\n          size: \"\",\r\n          product_price: \"\",\r\n          mrp: \"\",\r\n          sale_price: \"\",\r\n          discount: \"0\",\r\n          special_offer: false,\r\n          featured_product: false,\r\n          manufacturing_date: \"\",\r\n          expire_date: \"\",\r\n          quantity: \"\",\r\n          product_id: productID,\r\n        });\r\n        // setcustomValidated(false);setvariantmainarray\r\n      }\r\n    }\r\n  };\r\n  // addproduct variant end\r\n  const VariantRemoveClick = (id, productid) => {\r\n    setVerityAlert(true);\r\n    setVariantRemove((variantremove) => {\r\n      return { ...variantremove, id: id, productid: productid };\r\n    });\r\n    setvariantarray({\r\n      product_status: \"\",\r\n      colors: \"\",\r\n      unit_quantity: \"\",\r\n      size: \"\",\r\n      product_price: \"\",\r\n      mrp: \"\",\r\n      sale_price: \"\",\r\n      discount: \"0\",\r\n      special_offer: false,\r\n      featured_product: false,\r\n      manufacturing_date: \"\",\r\n      expire_date: \"\",\r\n      quantity: \"\",\r\n      product_id: productID,\r\n    });\r\n  };\r\n\r\n  const MainVariantRemoveClick = (e) => {\r\n    setvariantmainarray(variantmainarray.filter((item) => item !== e));\r\n  };\r\n\r\n  const hideAlert = () => {\r\n    if (vdata.length === 1) {\r\n      setVerityAlert(false);\r\n      setRestoreAlert(false);\r\n      setvarietyShow(false);\r\n      setapicall(true);\r\n    }\r\n    if (vdata.length === 2) {\r\n      setChangeUnitProperty(\"editvariety\");\r\n    }\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/products_delete_remove`, {\r\n        varient_id: variantremove.id,\r\n        product_id: variantremove.productid,\r\n        is_delete: \"0\",\r\n      })\r\n      .then((response) => {\r\n        getProductVariant(variantremove.productid);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    // variety delete\r\n    setVerityAlert(false);\r\n    setRestoreAlert(false);\r\n  };\r\n\r\n  const deleteProductAlert = () => {\r\n    // product delete\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/products_delete_remove`, {\r\n        varient_id: variantremove.id,\r\n        product_id: variantremove.productid,\r\n        is_delete: \"0\",\r\n      })\r\n      .then((response) => {\r\n        setapicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    // variety delete\r\n    setAlert(false);\r\n  };\r\n\r\n  const closeAlert = () => {\r\n    setAlert(false);\r\n    setVerityAlert(false);\r\n  };\r\n\r\n  const closeProductAlert = () => {\r\n    setProductAlert(false);\r\n    setProductDraftAlert(false);\r\n    setunitValidated(false);\r\n    setcustomValidated(false);\r\n    getProductVariant(productID);\r\n    setUpdatetAlert(false);\r\n  };\r\n\r\n  const VariantEditClick = (id, productid) => {\r\n    if (vdata.length === 1) {\r\n      setChangeUnitProperty(true);\r\n    }\r\n    setVarietyUnitvalidation(\"\");\r\n    axios\r\n      .get(\r\n        `${process.env.REACT_APP_BASEURL}/products_pricing?id=${id}&product_id=${productid}`\r\n      )\r\n      .then((response) => {\r\n        setvariantarray(response.data[0]);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setproductdata({\r\n      ...productdata,\r\n      product_slug: productdata.product_title_name + \"_123\",\r\n      price: variantmainarray,\r\n    });\r\n  }, [variantmainarray]);\r\n\r\n  // ADD CUSTOM INPUT\r\n  const oncustomheadChange = (e) => {\r\n    setheaderval(e.target.value);\r\n    setAddCustom((AddCustom) => {\r\n      return { ...AddCustom, header: e.target.value };\r\n    });\r\n  };\r\n  const oncustomdescChange = (e) => {\r\n    setdescval(e.target.value);\r\n    setAddCustom((AddCustom) => {\r\n      return { ...AddCustom, description: e.target.value };\r\n    });\r\n  };\r\n  const handleAddClick = (e) => {\r\n    if (headerval !== \"\" && descval !== \"\") {\r\n      setcustomarray((customarray) => [...customarray, AddCustom]);\r\n      setheaderval(\"\");\r\n      setdescval(\"\");\r\n      setAddCustom(\"\");\r\n      setcustomValidated(false);\r\n    } else {\r\n      setcustomValidated(true);\r\n    }\r\n  };\r\n\r\n  const handleRemoveClick = (e) => {\r\n    setcustomarray(customarray.filter((item) => item !== e));\r\n  };\r\n  useEffect(() => {\r\n    setproductdata({\r\n      ...productdata,\r\n      add_custom_input: customarray,\r\n    });\r\n  }, [customarray]);\r\n  // END ADD CUSTOM INPUT\r\n  useEffect(() => {\r\n    setproductdata({ ...productdata, seo_tag: Docnamearray, })\r\n  }, [Docnamearray])\r\n\r\n  // CKEDITOR TEXT BOX\r\n  const handledescription = (event, editor) => {\r\n    setdata1(editor.getData());\r\n    // console.log({ event, editor, data1 });\r\n\r\n    let productdesc;\r\n    if (editor.getData() !== undefined) {\r\n      productdesc = editor.getData().replaceAll(/\"/g, \"'\");\r\n    }\r\n    setproductdata({\r\n      ...productdata,\r\n      product_description: productdesc,\r\n    });\r\n  };\r\n  // const handledescription = (event, editor) => {\r\n  //   console.log(\"00000\")\r\n  //   setdata1(editor.getData());\r\n\r\n  //   let productdesc;\r\n  //   if (editor.getData() !== undefined) {\r\n  //     productdesc = editor.getData().replaceAll(/\"/g, \"'\");\r\n  //   }\r\n  //   setproductdata({\r\n  //     ...productdata,\r\n  //     product_description: productdesc,\r\n  //   });\r\n\r\n  // };\r\n  const OtherDescription = (event, editor) => {\r\n    setotherintro(editor.getData());\r\n    // console.log({ event, editor, otherintro });\r\n    let otherinstrction;\r\n    if (editor.getData() !== undefined) {\r\n      otherinstrction = editor.getData().replaceAll(/\"/g, \"'\");\r\n    }\r\n    setproductdata({\r\n      ...productdata,\r\n      other_introduction: otherinstrction,\r\n    });\r\n  };\r\n  // const OtherDescription = (event, editor) => {\r\n  //   setotherintro(editor.getData());\r\n  //   let otherinstrction;\r\n  //   if (editor.getData() !== undefined) {\r\n  //     otherinstrction = editor.getData().replaceAll(/\"/g, \"'\");\r\n  //   }\r\n  //   setproductdata({\r\n  //     ...productdata,\r\n  //     other_introduction: otherinstrction,\r\n  //   });\r\n  // };\r\n  // END CKEDITOR BOX\r\n\r\n  let productdataa = [];\r\n  // let scategoryy = [];\r\n\r\n  // ADD PRICES ON ADDPRODUCT BUTTON\r\n  useEffect(() => {\r\n    let discountt = (variantarray.mrp * variantarray.discount) / 100;\r\n    let saleprice = variantarray.mrp - discountt;\r\n    setvariantarray({\r\n      ...variantarray,\r\n      product_price: (\r\n        saleprice -\r\n        (saleprice *\r\n          (Number(productdata.gst) +\r\n            Number(productdata.wholesale_sales_tax) +\r\n            Number(productdata.retails_sales_tax) +\r\n            Number(productdata.manufacturers_sales_tax) +\r\n            Number(productdata.value_added_tax))) /\r\n        100\r\n      ).toFixed(2),\r\n      sale_price: saleprice,\r\n    });\r\n  }, [\r\n    variantarray.mrp,\r\n    variantarray.discount,\r\n    productdata.value_added_tax,\r\n    productdata.gst,\r\n    productdata.wholesale_sales_tax,\r\n    productdata.retails_sales_tax,\r\n    productdata.manufacturers_sales_tax,\r\n  ]);\r\n  // END  ADD PRICES ON ADDPRODUCT BUTTON\r\n\r\n  // ADD PRODUCT AND SAVE TO DRAFT\r\n  // const handleSaveDraft = (e) => {\r\n  //   setproductvariantarray({\r\n  //     ...productvariantarray,\r\n  //     product_status: \"draft\",\r\n  //   });\r\n  //   productdataa.push(productdata);\r\n  //   const form = e.currentTarget;\r\n  //   if (\r\n  //     form.checkValidity() === false ||\r\n  //     productdata.variety === \"\" ||\r\n  //     variantmainarray.length === 0\r\n  //   ) {\r\n  //     e.stopPropagation();\r\n  //     e.preventDefault();\r\n  //     setValidated(true);\r\n  //     setcustomValidated(false);\r\n  //     setvarietyValidated(\"varietyadd\");\r\n  //   } else {\r\n  //     axios\r\n  //       .post(`${process.env.REACT_APP_BASEURL}/products`, productdataa)\r\n  //       .then((response) => {\r\n  //         setProductDraftAlert(true);\r\n  //         setapicall(true);\r\n  //       });\r\n  //   }\r\n  // };\r\n  const handleAddProduct = (e) => {\r\n    productdataa.push(productdata);\r\n    const form = e.currentTarget;\r\n    if (\r\n      form.checkValidity() === false ||\r\n      productdata.variety === \"\" ||\r\n      variantmainarray.length === 0 ||\r\n      productdata.category === \"\"\r\n    ) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n\r\n      setValidated(true);\r\n      setcustomValidated(false);\r\n      setvarietyValidated(\"varietyadd\");\r\n    } else {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/products`,\r\n\r\n          productdataa,\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          localStorage.setItem(\"productid\", productid)\r\n          if (response.data.response === \"please fill all input\") {\r\n            setcustomValidated(\"plesefillall\");\r\n            setValidated(false);\r\n            setcustomValidated(false);\r\n            setvarietyValidated(false);\r\n            setapicall(true);\r\n\r\n\r\n          } else {\r\n            setapicall(true);\r\n          }\r\n        });\r\n      e.preventDefault();\r\n      setValidated(false);\r\n      setcustomValidated(true);\r\n      setProductAlert(true);\r\n      setapicall(true);\r\n      handleClose();\r\n    }\r\n  };\r\n  // END ADD PRODUCT AND SAVE TO DRAFT\r\n\r\n  // UPDATE PRODUCT COMMON DATA\r\n  const handleUpdateProduct = (e) => {\r\n    productdataa.push(productdata);\r\n\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false || variantmainarray.length !== 0) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setValidated(true);\r\n    } else {\r\n      axios\r\n        .put(`${process.env.REACT_APP_BASEURL}/products_update`, productdata)\r\n        .then((response) => {\r\n          setapicall(true);\r\n          setmodalshow(false);\r\n          setUpdatetAlert(true);\r\n        })\r\n\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      e.preventDefault();\r\n      setValidated(false);\r\n      setcustomValidated(true);\r\n      setProductAlert(true);\r\n      handleClose();\r\n      // formRef.current.reset();\r\n\r\n    }\r\n  };\r\n  // END UPDATE PRODUCT COMMON DATA\r\n\r\n  // PRODUCT SEARCH , FILTER  AND RESET\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n\r\n  const onProductSearchClick = () => {\r\n    if (\r\n      searchdata.product_title_name === \"\" &&\r\n      searchdata.product_status === \"\" &&\r\n      searchdata.brand === \"\" &&\r\n      searchdata.tag === \"\" &&\r\n      searchdata.category === \"\" &&\r\n      searchdata.vendor === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      setapicall(true);\r\n      setsearcherror(false);\r\n    }\r\n  };\r\n\r\n  const OnReset = () => {\r\n    setsearchData({\r\n      product_title_name: \"\",\r\n      product_status: \"\",\r\n      vendor: \"\",\r\n      brand: \"\",\r\n      tag: \"\",\r\n      category: \"\",\r\n    });\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n  // END PRODUCT SEARCH , FILTER  AND RESET\r\n\r\n  //-----------------------Download excel sheet code start here---------------------------------------------------\r\n\r\n  const header = [\r\n    \"product_code\",\r\n    \"product_title_name\",\r\n    \"product_slug\",\r\n    \"store_name\",\r\n    \"product_description\",\r\n    \"product_type\",\r\n    \"brand\",\r\n    \"category\",\r\n    \"parent_category\",\r\n    \"seo_tag\",\r\n    \"other_introduction\",\r\n    \"add_custom_input\",\r\n    \"wholesale_sales_tax\",\r\n    \"manufacturers_sales_tax\",\r\n    \"retails_sales_tax\",\r\n    \"gst\",\r\n    \"cgst\",\r\n    \"sgst\",\r\n    \"value_added_tax\",\r\n    \"variety\",\r\n    \"vendor_id\",\r\n    \"shop\",\r\n    \"colors\",\r\n    \"size\",\r\n    \"mrp\",\r\n    \"product_price\",\r\n    \"sale_price\",\r\n    \"discount\",\r\n    \"manufacturing_date\",\r\n    \"expire_date\",\r\n    \"special_offer\",\r\n    \"featured_product\",\r\n    \"unit\",\r\n    \"unit_quantity\",\r\n    \"quantity\",\r\n    \"product_status\",\r\n  ];\r\n\r\n  function handleDownloadExcel() {\r\n    downloadExcel({\r\n      fileName: \"Product Excel Report -> downloadExcel method\",\r\n      sheet: \"Product Excel Report\",\r\n      tablePayload: {\r\n        header,\r\n        body: [\"\"],\r\n        blankrows: \"No record\",\r\n      },\r\n    });\r\n  }\r\n\r\n  const FileUploadAPI = (e) => {\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"bulk_xls\", e.target.files[0]);\r\n\r\n    axios\r\n      .post(`${process.env.REACT_APP_BASEURL}/product_bulk_uploads`, formData)\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          setProductAlert(true);\r\n          setapicall(true);\r\n        } else {\r\n          setBulkProductError(\"Error in adding BulkProducts\");\r\n        }\r\n      });\r\n\r\n  };\r\n  //-----------------------Download excel sheet code End  here---------------------------------------------------\r\n  // console.log(cat_catname+\"pppppppppppppppppppppppppppppppppppppppppppppppp\")\r\n\r\n  // DATATABLE COLUMN PRODUCT LIST\r\n  const columns = [\r\n    {\r\n      name: \"#\",\r\n      width: \"100px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <img\r\n          alt={\"apna_organic\"}\r\n          src={\r\n            row.all_images\r\n              ? row.all_images\r\n              : \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n          }\r\n          style={{\r\n            padding: 10,\r\n            textAlign: \"right\",\r\n            maxHeight: \"100px\",\r\n            maxWidth: \"100px\",\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => (\r\n        <div>\r\n          <p\r\n            className=\"mb-1\"\r\n            onClick={OnProductNameClick.bind(this, [row.id, row.product_id])}\r\n          >\r\n            <b>\r\n              {row.product_title_name}\r\n              <br />\r\n            </b>\r\n            {/* Product ID: {row.product_id} <br /> */}\r\n            <div className=\"d-flex flex-column \">\r\n              {row.is_featured === 1 ? (\r\n                <span className={\"badge bg-warning mt-1\"}>\r\n                  {\"featured product\"}\r\n                </span>\r\n              ) : null}\r\n              {row.is_special_offer === 1 ? (\r\n                <span className={\"badge bg-info mt-1\"}>{\"special offer\"}</span>\r\n              ) : null}\r\n              {row.is_promotional === 1 ? (\r\n                <span className={\"badge bg-primary mt-1\"}>{\"promotional\"}</span>\r\n              ) : null}\r\n            </div>\r\n          </p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n      width: \"250px\",\r\n    },\r\n    {\r\n      name: \"Category\",\r\n      //     selector: (row) =>{\r\n      //       // console.log(row.cat_catname)\r\n      //       // console.log(row.category)\r\n      //       console.log(cat_catname[row.category])\r\n      //  return(\r\n      //   <>\r\n      //   {row.cat_catname === undefined ? \"null\":  cat_catname[row.category]}\r\n      //   </>\r\n      //  )\r\n\r\n      //     },\r\n      selector: (row) => row.category,\r\n      sortable: true,\r\n      width: \"150px\",\r\n    },\r\n    {\r\n      name: \"Category Id\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n      width: \"150px\",\r\n    },\r\n    {\r\n      name: \"Vendor\",\r\n      selector: (row) => row.shop,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Seo_Tag\",\r\n      selector: (row) => row.seo_tag,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Product Type\",\r\n      selector: (row) => row.product_type,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Brand\",\r\n      selector: (row) => row.brand,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    {\r\n      name: \"Mrp\",\r\n      selector: (row) => (\r\n        <p className=\"m-0\">\r\n          <b>MRP :</b>₹ {Number(row.mrp).toFixed(2)} <br />\r\n          <b>Discount : </b>\r\n          {Number(row.discount).toFixed(2)}%\r\n          {/* {row.discount === \"0\" ? null : row.discount + \"%\"}{\" \"} */}\r\n          <br />\r\n          <b>Product Price:</b>₹ {Number(row.product_price).toFixed(2)} <br />\r\n          <b>Sale Price:</b>₹ {Number(row.sale_price).toFixed(2)} <br />\r\n        </p>\r\n      ),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Tax\",\r\n      selector: (row) => (\r\n        <div className=\"d-flex flex-column\">\r\n          <b>\r\n            Total:\r\n            {Number(row.gst) +\r\n              Number(row.wholesale_sales_tax) +\r\n              Number(row.retails_sales_tax) +\r\n              Number(row.manufacturers_sales_tax) +\r\n              Number(row.value_added_tax) +\r\n              \"%\"}{\" \"}\r\n          </b>{\" \"}\r\n          <div className=\"d-flex\">\r\n            {row.gst === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>Gst :</b>\r\n                {Number(row.gst).toFixed(1)}%\r\n              </p>\r\n            )}\r\n            {row.cgst === \"0\" ? null : (\r\n              <p className=\"mb-0 mx-1\">\r\n                <b>Cgst : </b> {Number(row.cgst).toFixed(1)}%{\" \"}\r\n              </p>\r\n            )}\r\n            {row.sgst === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>Sgst:</b> {Number(row.sgst).toFixed(1)}%\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"d-flex flex-column\">\r\n            {row.wholesale_sales_tax === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>\r\n                  wholesale_sales_tax:\r\n                  {Number(row.wholesale_sales_tax).toFixed(1)}%\r\n                </b>{\" \"}\r\n              </p>\r\n            )}\r\n            {row.retails_sales_tax === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>\r\n                  retails_sales_tax:{Number(row.retails_sales_tax).toFixed(1)}%\r\n                </b>{\" \"}\r\n              </p>\r\n            )}\r\n            {row.value_added_tax === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>\r\n                  value_added_tax:{Number(row.value_added_tax).toFixed(1)}%{\" \"}\r\n                </b>\r\n              </p>\r\n            )}\r\n            {row.manufacturers_sales_tax === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>\r\n                  manufacturers_sales_tax:{\" \"}\r\n                  {Number(row.manufacturers_sales_tax).toFixed(1)}%\r\n                </b>{\" \"}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ),\r\n\r\n      sortable: true,\r\n      width: \"250px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"SP\",\r\n      selector: (row) => row.sale_price.toFixed(2),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Qty\",\r\n      selector: (row) =>\r\n        row.quantity === \"0\" || row.quantity === 0 ? (\r\n          <span className=\"text-danger\">Out Of Stock</span>\r\n        ) : (\r\n          row.quantity\r\n        ),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <span\r\n          className={\r\n            row.product_status === \"pending\" || row.product_status === \"1\"\r\n              ? \"badge bg-warning\"\r\n              : row.product_status === \"approved\"\r\n                ? \"badge bg-success\"\r\n                : // ? \"badge bg-info\"\r\n                row.product_status === \"draft\"\r\n                  ? \"badge bg-secondary\"\r\n                  : \"badge bg-secondary\"\r\n          }\r\n        >\r\n          {row.product_status === \"pending\" || row.product_status === \"1\"\r\n            ? \"Pending\"\r\n            : row.product_status === \"approved\"\r\n              ? \"Approved\"\r\n              : // : row.product_status === \"\"\r\n              // ? \"Status\"\r\n              row.product_status === \"draft\"\r\n                ? \"Draft\"\r\n                : \"Draft\"}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n      width: \"115px\",\r\n      // center: true,\r\n    },\r\n    {\r\n      name: \"Change Status\",\r\n      selector: (row) => (\r\n        <Form.Select\r\n          aria-label=\"Search by delivery\"\r\n          size=\"sm\"\r\n          className=\"w-100\"\r\n          onChange={(e) => onProductStatusChange(e, row.id, row.product_id)}\r\n          value={row.product_status}\r\n        >\r\n          {/* <option value={\"\"}>Status</option> */}\r\n          {(productstatus.productstatus || []).map((data, i) => {\r\n\r\n            return (\r\n              <option value={data} key={i}>\r\n                {\" \"}\r\n                {data}\r\n              </option>\r\n            );\r\n          })}\r\n        </Form.Select>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Variety\",\r\n      selector: (row) => (\r\n        <Button\r\n          size=\"sm\"\r\n          onClick={handlevarietyShow.bind(this, row.product_id, row.id)}\r\n        >\r\n          Add Variety\r\n        </Button>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"110px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n\r\n          <div className=\"feature_product_dropdown_box adminselectbox \">\r\n\r\n            <DropdownButton id=\"dropdown-basic-button\" title=\"\">\r\n              <Dropdown.Item value=\"\">Select</Dropdown.Item>\r\n              <Dropdown.Item\r\n                value=\"special_offer\"\r\n                onClick={(e) =>\r\n                  OnProductOfferClick(\r\n                    \"special_offer\",\r\n                    row.product_id,\r\n                    row.product_title_name\r\n                  )\r\n                }\r\n              >\r\n                Special Offer\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                value=\"featured_offer\"\r\n                onClick={(e) =>\r\n                  OnProductOfferClick(\r\n                    \"featured_offer\",\r\n                    row.product_id,\r\n                    row.product_title_name\r\n                  )\r\n                }\r\n              >\r\n                Featured Offer\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                value=\"promotional\"\r\n                onClick={(e) =>\r\n                  OnProductOfferClick(\r\n                    \"promotional\",\r\n                    row.product_id,\r\n                    row.product_title_name\r\n                  )\r\n                }\r\n              >\r\n                Promotional\r\n              </Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.product_id)}\r\n          />\r\n          <BsTrash\r\n            className=\" p-0 m-0 editiconn text-danger\"\r\n            onClick={handleAlert.bind(this, [\r\n              row.id,\r\n              row.product_id,\r\n              row.is_delete,\r\n            ])}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  // END DATATABLE DATA\r\n  return (\r\n    <>\r\n\r\n      {loading === true ? <Loader /> : null}\r\n      <div className=\"App productlist_maindiv\">\r\n        <h2>Products</h2>\r\n        <div className=\"card mt-3 p-3 \">\r\n          {/* search bar */}\r\n          <div className=\"row\">\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <input\r\n                type={\"text\"}\r\n                placeholder={\"Search by product name\"}\r\n                onChange={OnSearchChange}\r\n                name=\"product_title_name\"\r\n                value={searchdata.product_title_name}\r\n                className={\"form-control\"}\r\n              />\r\n              {searcherror === true ? (\r\n                <small className=\"text-danger\">please fill the feild</small>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <input\r\n                type={\"text\"}\r\n                placeholder={\"Search by seo_tag\"}\r\n                onChange={OnSearchChange}\r\n                name=\"tag\"\r\n                value={searchdata.tag}\r\n                className={\"form-control\"}\r\n              />\r\n\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by category\"\r\n                onChange={OnSearchChange}\r\n                name=\"category\"\r\n                value={searchdata.category}\r\n              >\r\n                <option value={\"\"}>Select Category</option>\r\n                {(filtervategory || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.id} key={i}>\r\n                      {\" \"}\r\n                      {data.category_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by vendor\"\r\n                onChange={OnSearchChange}\r\n                name=\"vendor\"\r\n                value={searchdata.vendor}\r\n              >\r\n                <option value={\"\"}>Select Vendor</option>\r\n                {(vendorid || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.shop_name} key={i}>\r\n                      {\" \"}\r\n                      {data.shop_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by brand\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by brand\"\r\n                onChange={OnSearchChange}\r\n                name=\"brand\"\r\n                value={searchdata.brand}\r\n              >\r\n                <option value={\"\"}>Select Brand</option>\r\n                {(BrandJson.BrandJson || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data} key={i}>\r\n                      {\" \"}\r\n                      {data}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by status\"\r\n                onChange={OnSearchChange}\r\n                name=\"product_status\"\r\n                value={searchdata.product_status}\r\n              >\r\n                <option value={\"\"}>Select Status</option>\r\n                {(productstatus.productstatus || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data} key={i}>\r\n                      {\" \"}\r\n                      {data}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6  mt-2 aos_input\">\r\n              <MainButton\r\n                onClick={onProductSearchClick}\r\n                btntext={\"Search\"}\r\n                btnclass={\"button main_button w-100\"}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6  mt-2 aos_input\">\r\n              <MainButton\r\n                btntext={\"Reset\"}\r\n                btnclass={\"button main_button w-100\"}\r\n                type=\"reset\"\r\n                onClick={OnReset}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* upload */}\r\n\r\n          <div className=\"product_page_uploadbox my-4\">\r\n            <div className=\"product_page_uploadbox_one\">\r\n              <input\r\n                type=\"file\"\r\n                className=\"product_page_uploadbox_button\"\r\n                onChange={(e) => {\r\n                  FileUploadAPI(e);\r\n                }}\r\n              />\r\n              <Iconbutton\r\n                btntext={\"Upload\"}\r\n                btnclass={\"button main_outline_button\"}\r\n                Iconname={<AiOutlineCloudUpload />}\r\n              />\r\n            </div>\r\n            {bulkProductError === \"\" ? (\r\n              \"\"\r\n            ) : (\r\n              <p className=\"mt-1 ms-2 text-danger\" type=\"invalid\">\r\n                {bulkProductError}\r\n              </p>\r\n            )}\r\n            <MainButton btntext={\"Download\"} onClick={handleDownloadExcel} />\r\n\r\n            <Iconbutton\r\n              btntext={\"Add Product\"}\r\n              onClick={() => {\r\n                handleShow(\"add\");\r\n              }}\r\n              Iconname={<AiOutlinePlus />}\r\n              btnclass={\"button main_button \"}\r\n            />\r\n          </div>\r\n\r\n          {/* main product datatable */}\r\n          <Modal\r\n            show={modalshow}\r\n            onHide={() => handleClose()}\r\n            dialogClassName=\"addproductmainmodal\"\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            centered\r\n          >\r\n            <Form\r\n              className=\"p-2 addproduct_form\"\r\n              noValidate\r\n              validated={validated}\r\n              ref={mainformRef}\r\n              onSubmit={\r\n                modalshow === \"add\"\r\n                  ? (e) => handleAddProduct(e)\r\n                  : (modalshow) => handleUpdateProduct(modalshow)\r\n              }\r\n            >\r\n              <Modal.Header closeButton className=\"addproductheader\">\r\n                <Modal.Title id=\"example-custom-modal-styling-title\">\r\n                  {modalshow === \"add\" ? \"Add Product\" : \"Update Product\"}\r\n                </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body className=\"addproductbody p-2\">\r\n                <div className=\" addproduct_form_boxx p-0 m-0\">\r\n                  <div className=\"my-3 inputsection_box\">\r\n                    <h5 className=\"m-0\">Basic Info</h5>\r\n                    <div className=\"d-flex product_basixinfo\">\r\n                      <div className=\"product_detail-box col-md-4\">\r\n                        <Form.Group\r\n                          className=\"mx-3\"\r\n                          controlId=\"validationCustom01\"\r\n                        >\r\n                          <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                            Product Title/Name\r\n                            {/* <span className=\"text-danger\">\r\n                            *\r\n                            {validated===false?\r\n                            <Form.Control.Feedback\r\n                              type=\"text\"\r\n                              className=\"h6\"\r\n                            >\r\n                              Please fill productname\r\n                            </Form.Control.Feedback>:null}\r\n                          </span> */}\r\n                          </Form.Label>\r\n                          <Col sm=\"12\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              placeholder=\"Product Title/Name\"\r\n                              required\r\n                              onChange={(e) => handleInputFieldChange(e)}\r\n                              name={\"product_title_name\"}\r\n                              value={productdata.product_title_name}\r\n                              maxLength={20}\r\n                            />\r\n                            <Form.Control.Feedback\r\n                              type=\"invalid\"\r\n                              className=\"h6\"\r\n                            >\r\n                              Please Product Name\r\n                            </Form.Control.Feedback>\r\n                          </Col>\r\n                        </Form.Group>\r\n                        <Form.Group\r\n                          className=\"mx-3\"\r\n                          controlId=\"validationProductName\"\r\n                        >\r\n                          <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                            Product Slug<span className=\"text-danger\">* </span>\r\n                          </Form.Label>\r\n                          <Col sm=\"12\">\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              placeholder=\"product_slug\"\r\n                              required\r\n                              onChange={(e) => handleInputFieldChange(e)}\r\n                              name={\"product_slug\"}\r\n                              value={productdata.product_slug}\r\n                              maxLength={20}\r\n\r\n                            // type=\"text\"\r\n                            // placeholder=\"Product Slug\"\r\n                            // onChange={(e) => handleInputFieldChange1(e)}\r\n                            // name={\"product_slug\"}\r\n                            // value={\r\n                            //   productdata.product_title_name === \"\" ||\r\n                            //   productdata.product_title_name === \"null\" ||\r\n                            //   productdata.product_title_name === null\r\n                            //     ? null\r\n                            //     : productdata.product_title_name + \"_123\"\r\n                            />\r\n                            <Form.Control.Feedback\r\n                              type=\"invalid\"\r\n                              className=\"h6\"\r\n                            >\r\n                              Please Product Name\r\n                            </Form.Control.Feedback>\r\n                          </Col>\r\n                        </Form.Group>\r\n                        <Form.Group\r\n                          className=\"mx-3\"\r\n                          controlId=\"validationProductslug\"\r\n                        >\r\n                          <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                            Product Brand{\" \"}\r\n                            <span className=\"text-danger\">* </span>\r\n                          </Form.Label>\r\n                          <Col sm=\"12\">\r\n                            <Form.Select\r\n                              aria-label=\"Product Type\"\r\n                              className=\"adminselectbox\"\r\n                              name=\"brand\"\r\n                              required\r\n                              onChange={(e) => handleInputFieldChange(e)}\r\n                              value={\r\n                                productdata.brand === null ||\r\n                                  productdata.brand === undefined\r\n                                  ? \"\"\r\n                                  : productdata.brand\r\n                              }\r\n                            >\r\n                              <option value={\"\"}>Select Brand</option>\r\n                              {(BrandJson.BrandJson || []).map((item, i) => {\r\n                                return <option value={item} key={i}>{item}</option>;\r\n                              })}\r\n                            </Form.Select>\r\n                            <Form.Control.Feedback\r\n                              type=\"invalid\"\r\n                              className=\"h6\"\r\n                            >\r\n                              Please Select Product Brand\r\n                            </Form.Control.Feedback>\r\n                          </Col>\r\n                        </Form.Group>\r\n                        <Form.Group\r\n                          className=\"mx-3\"\r\n                          controlId=\"validationCustom03\"\r\n                        >\r\n                          <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                            Store Name\r\n                            {/* <span className=\"text-danger\">\r\n                            *\r\n                            <Form.Control.Feedback\r\n                              type=\"invalid\"\r\n                              className=\"h6\"\r\n                            >\r\n                              Please fill storename\r\n                            </Form.Control.Feedback>\r\n                          </span> */}\r\n                          </Form.Label>\r\n                          <Form.Select\r\n                            onChange={handleVendorNameChange}\r\n                            aria-label=\"store_name\"\r\n                            className=\"adminselectbox\"\r\n                            required\r\n                          >\r\n                            {\" \"}\r\n                            <option value={\"\"}> Select Store Name</option>\r\n                            {(vendorid || []).map((cdata, i) => {\r\n                              return (\r\n                                <option\r\n                                  value={[cdata.id, cdata.shop_name]}\r\n                                  key={i}\r\n                                  selected={\r\n                                    (productdata.vendor_id,\r\n                                      productdata.store_name) ===\r\n                                    (cdata.id, cdata.shop_name)\r\n                                  }\r\n                                >\r\n                                  {cdata.shop_name}\r\n                                  {\"\"}\r\n                                </option>\r\n                              );\r\n                            })}\r\n                          </Form.Select>\r\n                          <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                            Please Select Store Name\r\n                          </Form.Control.Feedback>\r\n                          {/* <Col sm=\"12\">\r\n                          <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                            Please fill storename\r\n                          </Form.Control.Feedback>\r\n                        </Col> */}\r\n                        </Form.Group>\r\n                      </div>\r\n\r\n                      <div className=\"col-md-8\">\r\n                        <Form.Group\r\n                          className=\"mx-3\"\r\n                          controlId=\"validationCustom04\"\r\n                        >\r\n                          <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                            Product Description\r\n                          </Form.Label>\r\n                          <Col sm=\"12\">\r\n                            <CKEditor\r\n                              editor={ClassicEditor}\r\n                              data={productdata.product_description}\r\n                              onChange={handledescription}\r\n                              name={\"product_description\"}\r\n                            />\r\n                          </Col>\r\n                        </Form.Group>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {/* category */}\r\n                  <div className=\"my-3 inputsection_box\">\r\n                    <h5 className=\"m-0\">Category Info</h5>\r\n                    <div className=\"productvariety\">\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom05\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Product Type<span className=\"text-danger\">* </span>\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Select\r\n                            aria-label=\"Product Type\"\r\n                            className=\"adminselectbox\"\r\n                            required\r\n                            name=\"product_type\"\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                            value={\r\n                              productdata.product_type === null ||\r\n                                productdata.product_type === undefined\r\n                                ? \"\"\r\n                                : productdata.product_type\r\n                            }\r\n                          >\r\n                            <option value={\"\"}>Select Product Type</option>\r\n\r\n                            {(categorytype.categorytype || []).map((data, i) => {\r\n                              return <option value={data} key={i}>{data}</option>;\r\n                            })}\r\n                          </Form.Select>\r\n                          <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                            Please select product type\r\n                          </Form.Control.Feedback>\r\n                        </Col>\r\n                      </Form.Group>\r\n\r\n                      {/* category select */}\r\n                      <Form.Group\r\n                        className=\" aos_input\"\r\n                        controlId=\"validationCustom06\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Parent Category{\" \"}\r\n                          <span className=\"text-danger\">* </span>\r\n                        </Form.Label>\r\n                        <Form.Select\r\n                          name={\"parent_category\"}\r\n                          aria-label=\"Parent Category\"\r\n                          className=\"adminselectbox\"\r\n                          required\r\n                          onChange={(e, id) => categoryFormChange(e, id)}\r\n                        >\r\n                          <option value={\"\"}>Select Parent Category </option>\r\n                          {(category || []).map((cdata, i) => {\r\n                            return (\r\n                              <option\r\n                                value={cdata.id}\r\n                                name=\"parent_category\"\r\n                                key={i}\r\n                                selected={\r\n                                  editparentCategory === cdata.category_name\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              >\r\n                                {cdata.category_name} {\"\"}\r\n                              </option>\r\n                            )\r\n\r\n\r\n                          })}\r\n                        </Form.Select>\r\n\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please select Category\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n\r\n                      {subCategory === \"\" ||\r\n                        subCategory === null ||\r\n                        subCategory === undefined ? null : (\r\n                        <Form.Group\r\n                          className=\" aos_input\"\r\n                          controlId=\"formBasicParentCategory\"\r\n                        >\r\n                          <Form.Label>\r\n                            Sub Category <span className=\"text-danger\">* </span>\r\n                          </Form.Label>\r\n                          <Form.Select\r\n                            aria-label=\"Search by status\"\r\n                            className=\"adminselectbox\"\r\n                            onChange={(e, id) => categoryFormChange(e, id)}\r\n                            name={\"sub_category\"}\r\n                            required\r\n                          >\r\n                            <option value={\"\"}>Select Category </option>\r\n                            {(subCategory || []).map((cdata, i) => {\r\n                              return (\r\n                                <option\r\n                                  value={cdata.id}\r\n                                  key={i}\r\n                                  selected={\r\n                                    categoryeditparent === cdata.category_name\r\n                                      ? true\r\n                                      : false\r\n                                  }\r\n                                >\r\n                                  {cdata.category_name}{\" \"}\r\n                                </option>\r\n                              )\r\n\r\n                            })}\r\n                          </Form.Select>\r\n                          <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                            Please fill category\r\n                          </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                      )}\r\n                      {childCategory[0] === \"\" ||\r\n                        childCategory[0] === null ||\r\n                        childCategory[0] === undefined ? null : (\r\n                        <Form.Group\r\n                          className=\" aos_input\"\r\n                          controlId=\"formBasicParentCategory\"\r\n                        >\r\n                          <Form.Label>\r\n                            Child Category{\" \"}\r\n                            <span className=\"text-danger\">* </span>\r\n                          </Form.Label>{\" \"}\r\n                          {/* {categoryeditchildparent} */}\r\n                          <Form.Select\r\n                            aria-label=\"Search by status\"\r\n                            className=\"adminselectbox\"\r\n                            onChange={(e, id) => categoryFormChange(e, id)}\r\n                            name={\"childcategory\"}\r\n                            required\r\n                          >\r\n                            <option value={\"\"}>Select Category </option>\r\n                            {(childCategory || []).map((cdata, i) => {\r\n                              return (\r\n                                <option\r\n                                  value={cdata.id}\r\n                                  key={i}\r\n                                  selected={\r\n                                    categoryeditchildparent\r\n                                      ? true\r\n                                      : false\r\n\r\n                                  }\r\n                                >\r\n                                  {cdata.category_name}{\" \"}\r\n                                </option>\r\n\r\n                              )\r\n\r\n\r\n                            })}\r\n                          </Form.Select>\r\n                          <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                            Please fill category\r\n                          </Form.Control.Feedback>\r\n                        </Form.Group>\r\n                      )}\r\n\r\n                      {/* {grandcCategory[0] === \"\" ||\r\n                    grandcCategory[0] === null ||\r\n                    grandcCategory[0] === undefined ? null : (\r\n                      <Form.Group\r\n                        className=\"mb-3 aos_input\"\r\n                        controlId=\"formBasicParentCategory\"\r\n                      >\r\n                        <Form.Label> Inner Category</Form.Label>\r\n                        <Form.Select\r\n                          aria-label=\"Search by status\"\r\n                          className=\"adminselectbox\"\r\n                          onChange={(e, id) => categoryFormChange(e, id)}\r\n                          name={\"gcategory\"}\r\n                        >\r\n                          <option value={\"\"}>Select Category </option>\r\n                          {grandcCategory.map((cdata, i) => {\r\n                            return (\r\n                              <option\r\n                                value={cdata.id}\r\n                                key={i}\r\n                                selected={\r\n                                  categoryeditchildparent ===\r\n                                  cdata.category_name\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              >\r\n                                {cdata.category_name}{\" \"}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Form.Select>\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please fill category\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                    )} */}\r\n\r\n                      {/* end category select */}\r\n                    </div>\r\n                  </div>\r\n                  {/* Taxes */}\r\n                  <div className=\"my-3 inputsection_box\">\r\n                    <h5 className=\"m-0\">Taxes</h5>\r\n                    <div className=\"productvariety mt-0\">\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Wholesale Sales Tax\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            min={0}\r\n                            type=\"number\"\r\n                            placeholder=\"Wholesale Sales Tax\"\r\n                            name=\"wholesale_sales_tax\"\r\n                            value={\r\n                              productdata.wholesale_sales_tax === null ||\r\n                                productdata.wholesale_sales_tax === undefined\r\n                                ? \"\"\r\n                                : productdata.wholesale_sales_tax\r\n                            }\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Manufacturers’ Sales Tax\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Manufacturers’ Sales Tax \"\r\n                            name=\"manufacturers_sales_tax\"\r\n                            value={\r\n                              productdata.manufacturers_sales_tax === null ||\r\n                                productdata.manufacturers_sales_tax === undefined\r\n                                ? \"\"\r\n                                : productdata.manufacturers_sales_tax\r\n                            }\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"m-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Retail Sales Tax\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Retail Sales Tax\"\r\n                            name=\"retails_sales_tax\"\r\n                            value={\r\n                              productdata.retails_sales_tax === null ||\r\n                                productdata.retails_sales_tax === undefined\r\n                                ? \"\"\r\n                                : productdata.retails_sales_tax\r\n                            }\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Gst<span className=\"text-danger\">* </span>\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={1}\r\n                            placeholder=\"Gst\"\r\n                            name=\"gst\"\r\n                            value={productdata.gst}\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                            required\r\n                          />\r\n                          <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                            Please Fill Gst\r\n                          </Form.Control.Feedback>\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Sgst<span className=\"text-danger\"> </span>\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Sgst\"\r\n                            // className={\r\n                            //   customvalidated === true ? \"border-danger\" : null\r\n                            // }\r\n                            name=\"sgst\"\r\n                            value={productdata.sgst}\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Cgst<span className=\"text-danger\"></span>\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Cgst\"\r\n                            // className={\r\n                            //   customvalidated === true ? \"border-danger\" : null\r\n                            // }\r\n                            name=\"cgst\"\r\n                            value={productdata.cgst}\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Value Added Tax\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Value Added Tax\"\r\n                            name=\"value_added_tax\"\r\n                            value={\r\n                              productdata.value_added_tax === null ||\r\n                                productdata.value_added_tax === undefined\r\n                                ? \"\"\r\n                                : productdata.value_added_tax\r\n                            }\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                    </div>\r\n                    {/* <div className=\"productvariety mt-0\">\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Wholesale Sales Tax\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            min={0}\r\n                            type=\"number\"\r\n                            placeholder=\"Wholesale Sales Tax\"\r\n                            name=\"wholesale_sales_tax\"\r\n                            value={\r\n                              productdata.wholesale_sales_tax === null ||\r\n                              productdata.wholesale_sales_tax === undefined\r\n                                ? \"\"\r\n                                : productdata.wholesale_sales_tax\r\n                            }\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Manufacturers’ Sales Tax\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Manufacturers’ Sales Tax \"\r\n                            name=\"manufacturers_sales_tax\"\r\n                            value={\r\n                              productdata.manufacturers_sales_tax === null ||\r\n                              productdata.manufacturers_sales_tax === undefined\r\n                                ? \"\"\r\n                                : productdata.manufacturers_sales_tax\r\n                            }\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"m-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Retail Sales Tax\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Retail Sales Tax\"\r\n                            name=\"retails_sales_tax\"\r\n                            value={\r\n                              productdata.retails_sales_tax === null ||\r\n                              productdata.retails_sales_tax === undefined\r\n                                ? \"\"\r\n                                : productdata.retails_sales_tax\r\n                            }\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Value Added Tax\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Value Added Tax\"\r\n                            name=\"value_added_tax\"\r\n                            value={\r\n                              productdata.value_added_tax === null ||\r\n                              productdata.value_added_tax === undefined\r\n                                ? \"\"\r\n                                : productdata.value_added_tax\r\n                            }\r\n                            onChange={(e) => handleInputFieldChange(e)}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Gst<span className=\"text-danger\">* </span>\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={1}\r\n                            placeholder=\"Gst\"\r\n                            name=\"gst\"\r\n                            value={productdata.gst}\r\n                            onChange={(e) =>\r\n                              setproductdata({\r\n                                ...productdata,\r\n                                gst: e.target.value,\r\n                                cgst: e.target.value / 2,\r\n                                sgst: e.target.value / 2,\r\n                              })\r\n                            }\r\n                            required\r\n                          />\r\n                          <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                            Please fill gst\r\n                          </Form.Control.Feedback>\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Sgst<span className=\"text-danger\"> </span>\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Sgst\"\r\n                            name=\"sgst\"\r\n                            value={productdata.gst / 2}\r\n                            readOnly={true}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                          Cgst<span className=\"text-danger\"></span>\r\n                        </Form.Label>\r\n                        <Col sm=\"12\">\r\n                          <Form.Control\r\n                            type=\"number\"\r\n                            min={0}\r\n                            placeholder=\"Cgst\"\r\n                            name=\"cgst\"\r\n                            value={productdata.gst / 2}\r\n                            readOnly={true}\r\n                          />\r\n                        </Col>\r\n                      </Form.Group>\r\n                    </div> */}\r\n                  </div>\r\n                  {/*single variety  */}\r\n                  <Form\r\n                    className=\"p-2 addproduct_form\"\r\n                    validated={validated}\r\n                    ref={mainformRef}\r\n                  >\r\n                    {modalshow === \"add\" ? (\r\n                      <div className=\"my-3 inputsection_box\">\r\n                        <h5 className=\"m-0\">Add Variety</h5>\r\n                        <div className=\"productvariety_box\">\r\n                          {/* <div className=\"productvariety\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom11\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"inputlabelheading\"\r\n                              sm=\"12 d-flex align-itmes-center\"\r\n                            >\r\n                              {productdata.variety === false ? (\r\n                                <Form.Check\r\n                                  type=\"radio\"\r\n                                  aria-label=\"radio 1\"\r\n                                  className=\"mx-2\"\r\n                                  onChange={handleVarietyChange}\r\n                                  name=\"variety\"\r\n                                  value={false}\r\n                                />\r\n                              ) : (\r\n                                <Form.Check\r\n                                  type=\"radio\"\r\n                                  aria-label=\"radio 1\"\r\n                                  className=\"mx-2\"\r\n                                  onChange={handleVarietyChange}\r\n                                  name=\"variety\"\r\n                                  value={false}\r\n                                />\r\n                              )}\r\n                              Single Product\r\n                            </Form.Label>\r\n                          </Form.Group>\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom11\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"inputlabelheading\"\r\n                              sm=\"12 d-flex align-itmes-center\"\r\n                            >\r\n                              {productdata.variety === true ? (\r\n                                <Form.Check\r\n                                  type=\"radio\"\r\n                                  aria-label=\"radio 2\"\r\n                                  className=\"mx-2\"\r\n                                  onChange={handleVarietyChange}\r\n                                  name=\"variety\"\r\n                                  value={true}\r\n                                />\r\n                              ) : (\r\n                                <Form.Check\r\n                                  type=\"radio\"\r\n                                  aria-label=\"radio 2\"\r\n                                  className=\"mx-2\"\r\n                                  onChange={handleVarietyChange}\r\n                                  name=\"variety\"\r\n                                  value={true}\r\n                                />\r\n                              )}\r\n                              Multiple Variety\r\n                            </Form.Label>\r\n                          </Form.Group>\r\n                        </div> */}\r\n                          <div className=\"row\">\r\n                            <Form.Group className=\"mx-3\">\r\n                              <div className=\"variation_box my-2\">\r\n                                <div className=\"row\">\r\n                                  <div className=\"col-auto\">\r\n                                    <Table\r\n                                      bordered\r\n                                      className=\"align-middle my-2 aadvariety_table_\"\r\n                                    >\r\n                                      <thead className=\"align-middle\">\r\n                                        <tr>\r\n                                          <th>\r\n                                            Variety\r\n                                            <span className=\"text-danger\">\r\n                                              *{\" \"}\r\n                                            </span>\r\n                                          </th>\r\n                                          <th>Color</th>\r\n                                          <th>Weight/piece/Volume</th>\r\n                                          <th>Size</th>\r\n                                          <th>\r\n                                            Mrp{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                              *{\"\"}\r\n                                            </span>\r\n                                          </th>\r\n                                          <th>Discount</th>\r\n                                          <th>Price</th>\r\n                                          <th>\r\n                                            Sale Price{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                              *\r\n                                            </span>\r\n                                          </th>\r\n                                          {/* <th>Special Offer</th>\r\n                                        <th>Featured Product</th> */}\r\n                                          <th className=\"manufacture_date\">\r\n                                            Mdate\r\n                                            <span className=\"text-danger\">\r\n                                              *\r\n                                            </span>\r\n                                          </th>\r\n                                          <th className=\"manufacture_date\">\r\n                                            Edate{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                              *\r\n                                            </span>\r\n                                          </th>\r\n                                          <th className=\"\">\r\n                                            Qty{\" \"}\r\n                                            <span className=\"text-danger\">\r\n                                              *{\" \"}\r\n                                            </span>\r\n                                          </th>\r\n                                        </tr>\r\n                                      </thead>\r\n                                      <tbody>\r\n                                        <tr>\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\" d-flex align-items-center\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Select\r\n                                                  aria-label=\"Default select example\"\r\n                                                  name=\"unit\"\r\n                                                  required\r\n                                                  value={variantarray.unit}\r\n                                                  onChange={(e) =>\r\n                                                    onVariantChange(e)\r\n                                                  }\r\n                                                  disabled={\r\n                                                    variantmainarray.length ===\r\n                                                      0\r\n                                                      ? false\r\n                                                      : true\r\n                                                  }\r\n                                                // className={\r\n                                                //   customvalidated === true\r\n                                                //     ? \"border-danger\"\r\n                                                //     : null\r\n                                                // }\r\n                                                >\r\n                                                  <option value={\"\"}>\r\n                                                    Select\r\n                                                  </option>\r\n                                                  {(varietyy.variety || []).map(\r\n                                                    (vari, i) => {\r\n                                                      return changeUnitproperty ===\r\n                                                        true ? (\r\n                                                        <option\r\n                                                          value={\r\n                                                            vari === \"color\"\r\n                                                              ? \"pcs\"\r\n                                                              : vari ===\r\n                                                                \"weight\"\r\n                                                                ? \"gms\"\r\n                                                                : vari ===\r\n                                                                  \"volume\"\r\n                                                                  ? \"ml\"\r\n                                                                  : vari === \"piece\"\r\n                                                                    ? \"piece\"\r\n                                                                    : \"\"\r\n                                                          }\r\n                                                          key={i}\r\n                                                        >\r\n                                                          {vari}\r\n                                                        </option>\r\n                                                      ) : productdata.product_type ===\r\n                                                        \"Cloths\" ||\r\n                                                        productdata.product_type ===\r\n                                                        \"Fashion\" ? (\r\n                                                        vari === \"weight\" ||\r\n                                                          vari ===\r\n                                                          \"volume\" ? null : (\r\n                                                          <option\r\n                                                            value={\r\n                                                              vari === \"piece\"\r\n                                                                ? \"piece\"\r\n                                                                : vari ===\r\n                                                                  \"color\"\r\n                                                                  ? \"pcs\"\r\n                                                                  : \"\"\r\n                                                            }\r\n                                                            key={i}\r\n                                                          >\r\n                                                            {vari}\r\n                                                          </option>\r\n                                                        )\r\n                                                      ) : vari ===\r\n                                                        \"color\" ? null : (\r\n                                                        <option\r\n                                                          value={\r\n                                                            vari === \"weight\"\r\n                                                              ? \"gms\"\r\n                                                              : vari ===\r\n                                                                \"volume\"\r\n                                                                ? \"ml\"\r\n                                                                : vari === \"piece\"\r\n                                                                  ? \"piece\"\r\n                                                                  : \"\"\r\n                                                          }\r\n                                                          key={i}\r\n                                                        >\r\n                                                          {vari}\r\n                                                        </option>\r\n                                                      );\r\n                                                    }\r\n                                                  )}\r\n                                                </Form.Select>\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\" d-flex align-items-center\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Select\r\n                                                  aria-label=\"Default select example\"\r\n                                                  name=\"colors\"\r\n                                                  value={variantarray.colors}\r\n                                                  onChange={(e) =>\r\n                                                    onVariantChange(e)\r\n                                                  }\r\n                                                  disabled={\r\n                                                    variantarray.unit !== \"pcs\" &&\r\n                                                      variantarray.unit !== \"\"\r\n                                                      ? true\r\n                                                      : variantarray.unit === \"\"\r\n                                                        ? false\r\n                                                        : false\r\n                                                  }\r\n                                                  required\r\n                                                >\r\n                                                  {\" \"}\r\n                                                  <option value={\"\"}>\r\n                                                    {\" \"}\r\n                                                    Select Color\r\n                                                  </option>\r\n                                                  {(varietyy.color || []).map(\r\n                                                    (vari, i) => {\r\n                                                      return (\r\n                                                        <option\r\n                                                          value={vari}\r\n                                                          key={i}\r\n                                                          selected={\r\n                                                            productdata.color\r\n                                                          }\r\n                                                        >\r\n                                                          {vari}\r\n                                                        </option>\r\n                                                      );\r\n                                                    }\r\n                                                  )}\r\n                                                </Form.Select>\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\" d-flex align-items-center\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Control\r\n                                                  type=\"number\"\r\n                                                  sm=\"9\"\r\n                                                  value={\r\n                                                    variantarray.unit_quantity\r\n                                                  }\r\n                                                  disabled={\r\n                                                    variantarray.unit === \"pcs\"\r\n                                                      ? true\r\n                                                      : false\r\n                                                  }\r\n                                                  onChange={(e) =>\r\n                                                    onVariantChange(e)\r\n                                                  }\r\n                                                  name={\"unit_quantity\"}\r\n                                                  required\r\n                                                />\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\" d-flex align-items-center\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Select\r\n                                                  aria-label=\"Default select example\"\r\n                                                  required\r\n                                                  sm=\"9\"\r\n                                                  name=\"size\"\r\n                                                  value={variantarray.size}\r\n                                                  onChange={(e) =>\r\n                                                    onVariantChange(e)\r\n                                                  }\r\n                                                  disabled={\r\n                                                    variantarray.unit !==\r\n                                                      \"pcs\" &&\r\n                                                      variantarray.unit !== \"\"\r\n                                                      ? true\r\n                                                      : variantarray.unit === \"\"\r\n                                                        ? false\r\n                                                        : false\r\n                                                  }\r\n                                                >\r\n                                                  {\" \"}\r\n                                                  <option value={\"\"}>\r\n                                                    {\" \"}\r\n                                                    Select Size\r\n                                                  </option>\r\n                                                  {(varietyy.size || []).map(\r\n                                                    (vari, i) => {\r\n                                                      return (\r\n                                                        <option\r\n                                                          value={vari}\r\n                                                          key={i}\r\n                                                          selected={\r\n                                                            productdata.size\r\n                                                          }\r\n                                                        >\r\n                                                          {vari}\r\n                                                        </option>\r\n                                                      );\r\n                                                    }\r\n                                                  )}\r\n                                                </Form.Select>\r\n                                                {/* <Form.Select\r\n                                           aria-label=\"Default select example\"\r\n                                           required\r\n                                           sm=\"9\"\r\n                                           name=\"size\"\r\n                                           value={variantarray.size}\r\n                                           onChange={(e) =>\r\n                                             onVariantChange(e)\r\n                                           }\r\n                                           disabled={\r\n                                            variantarray.unit !== \"pcs\" &&\r\n                                            variantarray.unit !== \"\"\r\n                                              ? true\r\n                                              : variantarray.unit == \"\"\r\n                                              ? false\r\n                                              : false\r\n                                          }\r\n                        >\r\n                          {\" \"}\r\n                          <option value={\"\"}> Select Size</option>\r\n                          {(varietyy.size||[]).map((vari, i) => {\r\n                            return (\r\n                              <option\r\n                              value={vari}\r\n                              key={i}\r\n                                selected={\r\n                                  (productdata.size)\r\n                                  \r\n                                }\r\n                              >\r\n                                {vari}\r\n                                \r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Form.Select> */}\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\" d-flex align-items-center\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Control\r\n                                                  type=\"number\"\r\n                                                  sm=\"9\"\r\n                                                  maxLength={\"5\"}\r\n                                                  minLength={\"1\"}\r\n                                                  min=\"1\"\r\n                                                  max=\"50000\"\r\n                                                  // className={\r\n                                                  //   customvalidated === true\r\n                                                  //     ? \"border-danger\"\r\n                                                  //     : null\r\n                                                  // }\r\n                                                  name=\"mrp\"\r\n                                                  value={variantarray.mrp}\r\n                                                  onChange={(e) =>\r\n                                                    onVariantChange(e)\r\n                                                  }\r\n                                                  required\r\n                                                />\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\" d-flex align-items-center\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Control\r\n                                                  type=\"number\"\r\n                                                  sm=\"9\"\r\n                                                  min={\"1\"}\r\n                                                  max={\"100\"}\r\n                                                  onChange={(e) =>\r\n                                                    onVariantChange(e)\r\n                                                  }\r\n                                                  name={\"discount\"}\r\n                                                  value={variantarray.discount}\r\n                                                />\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\" d-flex align-items-center\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Control\r\n                                                  step={\"any\"}\r\n                                                  type=\"number\"\r\n                                                  sm=\"9\"\r\n                                                  // className={\r\n                                                  //   customvalidated === true\r\n                                                  //     ? \"border-danger\"\r\n                                                  //     : null\r\n                                                  // }\r\n                                                  // onChange={(e) =>\r\n                                                  //   onVariantChange(e)\r\n                                                  // }\r\n                                                  name={\"product_price\"}\r\n                                                  value={product_price}\r\n                                                  required\r\n                                                />\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\" d-flex align-items-center\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Control\r\n                                                  type=\"number\"\r\n                                                  step={\"any\"}\r\n                                                  sm=\"9\"\r\n                                                  // className={\r\n                                                  //   customvalidated === true\r\n                                                  //     ? \"border-danger\"\r\n                                                  //     : null\r\n                                                  // }\r\n                                                  // onChange={(e) =>\r\n                                                  //   onVariantChange(e)\r\n                                                  // }\r\n                                                  name={\"sale_price\"}\r\n                                                  value={(\r\n                                                    product_price +\r\n                                                    ((product_price *\r\n                                                      productdata.gst) /\r\n                                                      100 +\r\n                                                      (product_price *\r\n                                                        productdata.wholesale_sales_tax) /\r\n                                                      100 +\r\n                                                      (product_price *\r\n                                                        productdata.retails_sales_tax) /\r\n                                                      100 +\r\n                                                      (product_price *\r\n                                                        productdata.value_added_tax) /\r\n                                                      100 +\r\n                                                      (product_price *\r\n                                                        productdata.manufacturers_sales_tax) /\r\n                                                      100)\r\n                                                  ).toFixed(2)}\r\n                                                />\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n\r\n                                          {/* <td className=\"p-0 text-center\">\r\n                                          <div className=\"\">\r\n                                            <Form.Check\r\n                                              onChange={(e) =>\r\n                                                handleInputcheckboxChange(e)\r\n                                              }\r\n                                              name={\"special_offer\"}\r\n                                              checked={\r\n                                                variantarray.special_offer ===\r\n                                                  1 ||\r\n                                                variantarray.special_offer ===\r\n                                                  true\r\n                                                  ? true\r\n                                                  : false\r\n                                              }\r\n                                            />\r\n                                          </div>\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center\">\r\n                                          <div className=\"\">\r\n                                            <Form.Check\r\n                                              onChange={(e) =>\r\n                                                handleInputcheckboxChange(e)\r\n                                              }\r\n                                              name={\"featured_product\"}\r\n                                              checked={\r\n                                                variantarray.featured_product ===\r\n                                                  1 ||\r\n                                                variantarray.featured_product ===\r\n                                                  true\r\n                                                  ? true\r\n                                                  : false\r\n                                              }\r\n                                            />\r\n                                          </div>\r\n                                        </td> */}\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\"manufacture_date\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Control\r\n                                                  type=\"date\"\r\n                                                  sm=\"9\"\r\n                                                  required\r\n                                                  min={moment().format(\r\n                                                    \"YYYY-MM-DD\"\r\n                                                  )}\r\n                                                  // className={\r\n                                                  //   customvalidated === true\r\n                                                  //     ? \"border-danger\"\r\n                                                  //     : null\r\n                                                  // }\r\n                                                  onChange={(e) =>\r\n                                                    onVariantChange(e)\r\n                                                  }\r\n                                                  name={\"manufacturing_date\"}\r\n                                                  value={\r\n                                                    variantarray.manufacturing_date\r\n                                                  }\r\n                                                />\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n                                          <td className=\"p-0 text-center\">\r\n                                            <div className=\"manufacture_date\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Control\r\n                                                  type=\"date\"\r\n                                                  sm=\"9\"\r\n                                                  required\r\n                                                  disabled={\r\n                                                    variantarray.manufacturing_date\r\n                                                      ? false\r\n                                                      : true\r\n                                                  }\r\n                                                  min={moment(\r\n                                                    variantarray.manufacturing_date\r\n                                                  )\r\n                                                    .add(1, \"day\")\r\n                                                    .format(\"YYYY-MM-DD\")}\r\n                                                  onChange={(e) =>\r\n                                                    onVariantChange(e)\r\n                                                  }\r\n                                                  name={\"expire_date\"}\r\n                                                  value={\r\n                                                    variantarray.expire_date\r\n                                                  }\r\n                                                />\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n                                          <td className=\"p-0\">\r\n                                            <div className=\"\">\r\n                                              <InputGroup\r\n                                                className=\"\"\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                <Form.Control\r\n                                                  required\r\n                                                  type=\"number\"\r\n                                                  sm=\"9\"\r\n                                                  value={variantarray.quantity}\r\n                                                  onChange={(e) =>\r\n                                                    onVariantChange(e)\r\n                                                  }\r\n                                                  name={\"quantity\"}\r\n                                                  onKeyPress={(event) => {\r\n                                                    if (event.key === \"Enter\") {\r\n                                                      onVariantaddclick();\r\n                                                    }\r\n                                                  }}\r\n                                                />\r\n                                              </InputGroup>\r\n                                            </div>\r\n                                          </td>\r\n                                          <td className=\"p-0\">\r\n                                            <div className=\" d-flex align-items-center\">\r\n                                              <Button\r\n                                                variant=\"outline-success\"\r\n                                                className=\"addcategoryicon\"\r\n                                                onClick={() =>\r\n                                                  VariantAddProduct()\r\n                                                }\r\n                                                size=\"sm\"\r\n                                              >\r\n                                                +\r\n                                              </Button>\r\n                                            </div>\r\n                                          </td>\r\n                                        </tr>\r\n                                        {checkProductType === true ? (\r\n                                          <tr>\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Please the select the product type\r\n                                              first....!!!!\r\n                                            </p>\r\n                                          </tr>\r\n                                        ) : checkProductType ===\r\n                                          false ? null : null}\r\n\r\n                                        {varietyUnitvalidation ===\r\n                                          \"ExpireDateValidation\" ? (\r\n                                          <tr>\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Please Expire date should be\r\n                                              greater and equal  than Manufacturing date\r\n                                            </p>\r\n                                          </tr>\r\n                                        ) : null}\r\n\r\n                                        <tr>\r\n                                          {customvalidated === true ? (\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Please fill Required fields\r\n                                            </p>\r\n                                          ) : varietyValidation ===\r\n                                            \"varietyadd\" ? (\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Please Click On Plus Button To Add\r\n                                              Variety\r\n                                            </p>\r\n                                          ) : null}\r\n\r\n                                          {varietyUnitvalidation ===\r\n                                            \"fillUnit&size&color\" ? (\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Please fill size and colors\r\n                                            </p>\r\n                                          ) : varietyUnitvalidation ===\r\n                                            \"fillUnit&color\" ? (\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Please fill color\r\n                                            </p>\r\n                                          ) : varietyUnitvalidation ===\r\n                                            \"unitQwanity&size&color\" ? (\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Please fill weight/volume/piece\r\n                                            </p>\r\n                                          ) : varietyUnitvalidation ===\r\n                                            \"discountmore\" ? (\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Discount should be less then 100\r\n                                            </p>\r\n                                          ) : varietyUnitvalidation ===\r\n                                            \"QwanityValidation\" ? (\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Quantity must be greater than 0\r\n                                            </p>\r\n                                          ) : varietyUnitvalidation ===\r\n                                            \"mrpmore\" ? (\r\n                                            <p\r\n                                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                                              type=\"invalid\"\r\n                                            >\r\n                                              Mrp must be lesser than 50000 and\r\n                                              greater than 0\r\n                                            </p>\r\n                                          ) : varietyUnitvalidation ===\r\n                                            \"\" ? null : null}\r\n                                        </tr>\r\n\r\n                                        {(variantmainarray || []).map(\r\n                                          (variantdata, i) => {\r\n                                            return (\r\n                                              <tr key={i}>\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {variantdata.unit === \"pcs\"\r\n                                                    ? \"color\"\r\n                                                    : variantdata.unit === \"gms\"\r\n                                                      ? \"weight\"\r\n                                                      : variantdata.unit === \"ml\"\r\n                                                        ? \"volume\"\r\n                                                        : variantdata.unit ===\r\n                                                          \"piece\"\r\n                                                          ? \"piece\"\r\n                                                          : \"\"}\r\n                                                </td>\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {variantdata.colors}\r\n                                                </td>\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {variantdata.unit === \"gms\"\r\n                                                    ? variantdata.unit_quantity\r\n                                                    : variantdata.unit === \"ml\"\r\n                                                      ? variantdata.unit_quantity\r\n                                                      : variantdata.unit ===\r\n                                                        \"piece\"\r\n                                                        ? variantdata.unit_quantity\r\n                                                        : null}\r\n                                                </td>\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {variantdata.size}\r\n                                                </td>\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {variantdata.mrp}\r\n                                                </td>\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {variantdata.discount}\r\n                                                </td>\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {variantdata.product_price}\r\n                                                </td>\r\n\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {saleprice}\r\n                                                </td>\r\n                                                {/* <td className=\"p-0 text-center \">\r\n                                                {`${variantdata.special_offer}`}\r\n                                              </td>\r\n                                              <td className=\"p-0 text-center \">\r\n                                                {`${variantdata.featured_product}`}\r\n                                              </td> */}\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {\r\n                                                    variantdata.manufacturing_date\r\n                                                  }\r\n                                                </td>\r\n                                                <td className=\"p-0 text-center \">\r\n                                                  {variantdata.expire_date}\r\n                                                </td>\r\n                                                <td className=\"p-0 text-center\">\r\n                                                  {variantdata.quantity}\r\n                                                </td>\r\n                                                <td className=\"p-0 text-center\">\r\n                                                  <Button\r\n                                                    variant=\"text-danger\"\r\n                                                    className=\"addcategoryicon text-danger\"\r\n                                                    onClick={(id) =>\r\n                                                      MainVariantRemoveClick(\r\n                                                        variantdata\r\n                                                      )\r\n                                                    }\r\n                                                    size=\"sm\"\r\n                                                  >\r\n                                                    &times;\r\n                                                  </Button>\r\n                                                </td>\r\n                                              </tr>\r\n                                            );\r\n                                          }\r\n                                        )}\r\n                                      </tbody>\r\n                                    </Table>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            </Form.Group>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ) : null}\r\n                  </Form>\r\n                  {/* </Form> */}\r\n                  {/* Offer */}\r\n\r\n                  {/* seo tag */}\r\n                  <div className=\"my-3 inputsection_box\">\r\n                    <h5 className=\"m-0\">Seo Tag</h5>\r\n                    <div className=\"productvariety\">\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustomSeo\"\r\n                      >\r\n                        {/* <div className=\" d-flex align-items-center my-2\">\r\n                          <InputGroup className=\"\" size=\"sm\">\r\n                            <Form.Control\r\n                              sm=\"9\"\r\n                              onChange={ontagchange}\r\n                              value={addtag}\r\n                            // onKeyPress={(event) => {\r\n                            //   if (event.key === \"Enter\") {\r\n                            //     ontagaddclick();\r\n                            //   }\r\n                            // }}\r\n                            />\r\n                            <Button\r\n                              variant=\"outline-success\"\r\n                              className=\"addcategoryicon\"\r\n                              onClick={() => ontagaddclick()}\r\n                              size=\"sm\"\r\n                            >\r\n                              +\r\n                            </Button>\r\n                          </InputGroup>\r\n                        </div> */}\r\n                        {/* <div className=\"col-md-6\"> */}\r\n                        {/* <Form.Group className=\"mb-3 aos_input\"> */}\r\n\r\n                        <InputGroup className=\"\" size=\"sm\">\r\n                          <Form.Control\r\n                            sm=\"10\"\r\n                            onChange={(e) => onDocumentNamechange(e)}\r\n                            value={addtag}\r\n                            placeholder=\"seo tag\"\r\n\r\n                            onKeyPress={(event) => {\r\n                              if (event.key === \"Enter\") {\r\n                                onDocuAddclick();\r\n                              }\r\n                            }}\r\n                          />{\" \"}\r\n                          <Button\r\n\r\n                            variant=\"outline-success\"\r\n                            className=\"addcategoryicon\"\r\n                            onClick={() => onDocuAddclick()}\r\n                            size=\"sm\"\r\n                          >\r\n                            +\r\n                          </Button>\r\n                          {/* {AddtagError === \"addTagErorrr\" ? (\r\n                          <span className=\"text-danger\">\r\n                            Please Add Document first...!!!\r\n                          </span>\r\n                        ) : null} */}\r\n                        </InputGroup>\r\n\r\n                        {Docnamearray === undefined ||\r\n                          Docnamearray === null ||\r\n                          Docnamearray === \"\" ||\r\n                          Docnamearray.length === 0 ? null : (\r\n                          <div className=\"d-flex align-items-center tagselectbox mt-2\">\r\n                            {(Docnamearray || []).map((seotags, i) => {\r\n                              return (\r\n                                <>\r\n                                  {seotags === '\"\"' ? null : (\r\n                                    <Badge\r\n                                      className=\"tagselecttitle mb-0\"\r\n                                      bg=\"success\"\r\n                                    >\r\n                                      {seotags === null ||\r\n                                        seotags === undefined ||\r\n                                        seotags === '\"\"'\r\n                                        ? null\r\n                                        : seotags}\r\n\r\n                                      <GiCancel\r\n                                        className=\" mx-0 ms-1 btncancel\"\r\n                                        onClick={() => DocuRemoveClick(seotags)}\r\n                                      />\r\n                                    </Badge>\r\n                                  )}\r\n                                </>\r\n                              );\r\n                            })}\r\n                          </div>\r\n                        )}\r\n                        {/* </Form.Group>\r\n                  </div> */}\r\n                        {/* <div className=\"d-flex align-items-center tagselectbox mt-2\">\r\n                          {productdata.seo_tag === \"\" && addtag === \"\" ? (\r\n                            \"\"\r\n                          ) : productdata.seo_tag ? (\r\n                            <Badge className=\"tagselecttitle mb-0\" bg=\"success\">\r\n                              {productdata.seo_tag === null ||\r\n                                productdata.seo_tag === undefined\r\n                                ? \"\"\r\n                                : productdata.seo_tag}\r\n                              <span\r\n                                onClick={() => tagRemoveClick()}\r\n                                className={\r\n                                  \"addcategoryicon mx-2 text-light spanCurser \"\r\n                                }\r\n                              >\r\n                                {\"x\"}\r\n                              </span>\r\n                            </Badge>\r\n                          ) : null}\r\n\r\n                          {/* )\r\n\r\n                        })} \r\n                        </div> */}\r\n                      </Form.Group>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* other info */}\r\n                  <div className=\"col-md-8\">\r\n                    <Form.Group\r\n                      className=\"mx-3\"\r\n                      controlId=\"validationCustom04\"\r\n                    >\r\n                      {/* {console.log(\r\n                          \"product description-------\" +\r\n                            productdata.product_description\r\n                        )} */}\r\n                      <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                        Product Description\r\n                      </Form.Label>\r\n                      <Col sm=\"12\">\r\n                        <CKEditor\r\n                          editor={ClassicEditor}\r\n                          data={productdata.product_description}\r\n                          onChange={handledescription}\r\n                          name={\"product_description\"}\r\n                        />\r\n                      </Col>\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"my-3 inputsection_box\">\r\n                    <h5 className=\"m-0\">Other Instruction</h5>\r\n                    <Col sm=\"12\" className=\"mt-3\">\r\n                      <CKEditor\r\n                        editor={ClassicEditor}\r\n                        data={productdata.other_introduction}\r\n                        onChange={OtherDescription}\r\n                        name={\"other_introduction\"}\r\n                      />\r\n                    </Col>\r\n                  </div>\r\n                  {/* input */}\r\n                  <div className=\"my-3 inputsection_box\">\r\n                    <h5 className=\"m-0\">Add Custom Input</h5>\r\n                    <div className=\" mt-0 mb-3\">\r\n                      <Table className=\"align-middle\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th>Heading</th>\r\n                            <th>Description</th>\r\n                            <th></th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr>\r\n                            <td className=\"text-center col-4\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  value={headerval}\r\n                                  type=\"text\"\r\n                                  sm=\"9\"\r\n                                  min={\"1\"}\r\n                                  onChange={oncustomheadChange}\r\n                                  name={\"header\"}\r\n                                />\r\n                              </InputGroup>\r\n                            </td>\r\n                            <td className=\"col-4\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  value={descval}\r\n                                  name={\"description\"}\r\n                                  type=\"text\"\r\n                                  sm=\"9\"\r\n                                  min={\"1\"}\r\n                                  onChange={oncustomdescChange}\r\n                                  onKeyPress={(event) => {\r\n                                    if (event.key === \"Enter\") {\r\n                                      handleAddClick();\r\n                                    }\r\n                                  }}\r\n                                />\r\n                              </InputGroup>\r\n                            </td>\r\n                            <td className=\"\">\r\n                              <Button\r\n                                variant=\"outline-success\"\r\n                                className=\"addcategoryicon\"\r\n                                onClick={() => handleAddClick()}\r\n                                size=\"sm\"\r\n                              >\r\n                                +\r\n                              </Button>\r\n                            </td>\r\n                          </tr>\r\n                          {(customarray || []).map((variantdata, i) => {\r\n                            // const arr = variantdata.split(',')\r\n                            return (\r\n                              <tr className=\"\" key={i}>\r\n                                <td className=\" text-center\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Control\r\n                                      value={variantdata.header}\r\n                                      type=\"text\"\r\n                                      sm=\"9\"\r\n                                      min={\"1\"}\r\n                                      onChange={oncustomheadChange}\r\n                                      name={\"custom_input_header\"}\r\n                                      required\r\n                                    />\r\n                                  </InputGroup>\r\n                                </td>\r\n                                <td className=\"text-center\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Control\r\n                                      required\r\n                                      value={variantdata.description}\r\n                                      name={\"custom_input_desc\"}\r\n                                      type=\"text\"\r\n                                      sm=\"9\"\r\n                                      min={\"1\"}\r\n                                      onChange={oncustomdescChange}\r\n                                      onKeyPress={(event) => {\r\n                                        if (event.key === \"Enter\") {\r\n                                          handleAddClick();\r\n                                        }\r\n                                      }}\r\n                                    />\r\n                                  </InputGroup>\r\n                                </td>\r\n                                <td className=\"\">\r\n                                  <Button\r\n                                    variant=\"text-danger\"\r\n                                    className=\"addcategoryicon text-danger\"\r\n                                    onClick={() =>\r\n                                      handleRemoveClick(variantdata)\r\n                                    }\r\n                                    size=\"sm\"\r\n                                  >\r\n                                    &times;\r\n                                  </Button>\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                        </tbody>\r\n                      </Table>\r\n                    </div>\r\n                    {/* );\r\n                })} */}\r\n                    {/* --------------------------------------------- */}\r\n                  </div>\r\n                  {customvalidated === \"pleasefillall\" ? (\r\n                    <span className=\"text-danger\">\r\n                      Please Fill All Mandatary Fields\r\n                    </span>\r\n                  ) : null}\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer className=\"addproductfooter\">\r\n                <Iconbutton\r\n                  btntext={\" Cancel\"}\r\n                  onClick={() => handleClose()}\r\n                  btnclass={\"button main_outline_button px-2\"}\r\n                // Iconname={<GiCancel /> }\r\n                />\r\n                {/* <MainButton\r\n                btntext={\"Save as Draft\"}\r\n                onClick={() => handleSaveDraft()}\r\n              /> */}\r\n                <Iconbutton\r\n                  type={\"submit\"}\r\n                  btntext={\r\n                    modalshow === \"add\" ? \"Add Product\" : \"Update Product\"\r\n                  }\r\n                  btnclass={\"button main_button \"}\r\n                />\r\n                {/* {modalshow === \"add\" ? (\r\n                <Iconbutton\r\n                  // type={\"submit\"}\r\n                  onClick={() => AddMoreVariety()}\r\n                  btntext={\"Add and Add More Variety\"}\r\n                  btnclass={\"button main_button \"}\r\n                />\r\n              ) : null} */}\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n\r\n          {/* Variety CRUD Modal */}\r\n          <Modal\r\n            size=\"lg\"\r\n            show={varietyshow}\r\n            onHide={handlevarietyClose}\r\n            dialogClassName=\"addproductmainmodal\"\r\n          >\r\n            <Form ref={formRef}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Add Variety</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div className=\"row\">\r\n                  {/* <Form.Group\r\n                  className=\"\"\r\n                > */}\r\n                  <div className=\"variation_box my-2\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Variety\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Select\r\n                                  required\r\n                                  aria-label=\"Default select example\"\r\n                                  name=\"unit\"\r\n                                  onChange={(e) => onVariantChange(e)}\r\n                                  value={variantarray.unit}\r\n                                  disabled={\r\n                                    variantarray.unit &&\r\n                                      changeUnitproperty === false\r\n                                      ? true\r\n                                      : variantarray.unit ||\r\n                                        changeUnitproperty === true\r\n                                        ? false\r\n                                        : true\r\n                                  }\r\n                                >\r\n                                  <option >{variantarray.unit}</option>\r\n                                  {console.log(\"variantarray.unituuuuuuuuuuuuu\" + variantarray.unit)}\r\n                                  {(varietyy.variety || []).map((vari, i) => {\r\n                                    return vdata.length === 0 ? null : vdata[0]\r\n                                      .product_type === \"\" ? (\r\n                                      <option\r\n                                        value={\r\n                                          vari === \"color\"\r\n                                            ? \"pcs\"\r\n                                            : vari === \"weight\"\r\n                                              ? \"gms\"\r\n                                              : vari === \"volume\"\r\n                                                ? \"ml\"\r\n                                                : vari === \"piece\"\r\n                                                  ? \"piece\"\r\n                                                  : \"\"\r\n                                        }\r\n                                        key={i}\r\n                                      >\r\n                                        {vari}\r\n                                      </option>\r\n                                    ) : vdata.length === 0 ? null : vdata[0]\r\n                                      .product_type === \"Cloths\" ||\r\n                                      vdata.length === 0 ? null : vdata[0]\r\n                                        .product_type === \"Fashion\" ? (\r\n                                      vari === \"weight\" ||\r\n                                        vari === \"volume\" ? null : (\r\n                                        <option\r\n                                          value={\r\n                                            vari === \"piece\"\r\n                                              ? \"piece\"\r\n                                              : vari === \"color\"\r\n                                                ? \"pcs\"\r\n                                                : \"\"\r\n                                          }\r\n                                          key={i}\r\n                                        >\r\n                                          {vari}\r\n                                        </option>\r\n                                      )\r\n                                    ) : vari === \"color\" ? null : (\r\n                                      <option\r\n                                        value={\r\n                                          vari === \"weight\"\r\n                                            ? \"gms\"\r\n                                            : vari === \"volume\"\r\n                                              ? \"ml\"\r\n                                              : vari === \"piece\"\r\n                                                ? \"piece\"\r\n                                                : vari === \"color\"\r\n                                                  ? \"pcs\"\r\n                                                  : \"\"\r\n                                        }\r\n                                        key={i}\r\n                                      >\r\n                                        {vari}\r\n                                      </option>\r\n                                    );\r\n                                  })}\r\n                                </Form.Select>\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"addvariety_inputbox\">\r\n\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Color\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              {/* <InputGroup className=\"\">\r\n                                <Form.Select\r\n                                  aria-label=\"Default select example\"\r\n                                  name=\"colors\"\r\n                                  value={variantarray.colors}\r\n                                  onChange={(e) => onVariantChange(e)}\r\n                                  required\r\n                                >\r\n                                  \r\n                                  Color\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Select>\r\n                                </InputGroup> */}\r\n                            </Col>\r\n                            {/* </Form.Label> */}\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Select\r\n                                  aria-label=\"Default select example\"\r\n                                  name=\"colors\"\r\n                                  value={variantarray.colors}\r\n                                  onChange={(e) =>\r\n                                    onVariantChange(e)\r\n                                  }\r\n                                  disabled={\r\n                                    variantarray.unit !== \"pcs\" &&\r\n                                      variantarray.unit !== \"\"\r\n                                      ? true\r\n                                      : variantarray.unit === \"\"\r\n                                        ? false\r\n                                        : false\r\n                                  }\r\n                                  required\r\n                                >\r\n                                  {\" \"}\r\n                                  <option value={\"\"}>\r\n                                    {\" \"}\r\n                                    Select Color\r\n                                  </option>\r\n                                  {(varietyy.color || []).map(\r\n                                    (vari, i) => {\r\n                                      return (\r\n                                        <option\r\n                                          value={vari}\r\n                                          key={i}\r\n                                          selected={\r\n                                            productdata.color\r\n                                          }\r\n                                        >\r\n                                          {vari}\r\n                                        </option>\r\n                                      );\r\n                                    }\r\n                                  )}\r\n                                </Form.Select>\r\n\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n\r\n                      </div>\r\n\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Weight/Piece/Volume\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\" size=\"sm\">\r\n                                <Form.Control\r\n                                  type=\"number\"\r\n                                  sm=\"9\"\r\n                                  value={variantarray.unit_quantity}\r\n                                  disabled={\r\n                                    variantarray.unit === \"pcs\" ? true : false\r\n                                  }\r\n                                  onChange={(e) => onVariantChange(e)}\r\n                                  name={\"unit_quantity\"}\r\n                                  required\r\n                                />\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Size\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Select\r\n                                  aria-label=\"Default select example\"\r\n                                  required\r\n                                  sm=\"9\"\r\n                                  name=\"size\"\r\n                                  value={variantarray.size}\r\n                                  onChange={(e) => onVariantChange(e)}\r\n                                  disabled={\r\n                                    variantarray.unit !== \"pcs\" &&\r\n                                      variantarray.unit !== \"\"\r\n                                      ? true\r\n                                      : variantarray.unit === \"\"\r\n                                        ? false\r\n                                        : false\r\n                                  }\r\n                                >\r\n                                  <option value={\"\"}>Select</option>\r\n                                  {(varietyy.size || []).map((vari, i) => {\r\n                                    return (\r\n                                      <option value={vari} key={i}>\r\n                                        {vari}\r\n                                      </option>\r\n                                    );\r\n                                  })}\r\n                                </Form.Select>\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Mrp\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\" size=\"sm\">\r\n                                <Form.Control\r\n                                  type=\"number\"\r\n                                  sm=\"9\"\r\n                                  maxLength={\"5\"}\r\n                                  minLength={\"1\"}\r\n                                  min=\"1\"\r\n                                  max=\"50000\"\r\n                                  // className={\r\n                                  //   customvalidated === true\r\n                                  //     ? \"border-danger\"\r\n                                  //     : null\r\n                                  // }\r\n                                  name=\"mrp\"\r\n                                  value={variantarray.mrp}\r\n                                  onChange={(e) => onVariantChange(e)}\r\n                                  required\r\n                                />\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Discount\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  type=\"number\"\r\n                                  sm=\"9\"\r\n                                  min={\"1\"}\r\n                                  max={\"100\"}\r\n                                  onChange={(e) => onVariantChange(e)}\r\n                                  name={\"discount\"}\r\n                                  value={variantarray.discount}\r\n                                />\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Original Price\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  min={1}\r\n                                  step={0.01}\r\n                                  type=\"number\"\r\n                                  sm=\"9\"\r\n                                  name={\"product_price\"}\r\n                                  value={Number(\r\n                                    variantarray.product_price\r\n                                  ).toFixed(2)}\r\n                                />\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Tax\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  step={0.01}\r\n                                  type=\"number\"\r\n                                  sm=\"9\"\r\n                                  min={1}\r\n                                  name={\"totaltax\"}\r\n                                  value={Number(totaltax).toFixed(2)}\r\n                                />\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Sale Price\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  min={1}\r\n                                  step={0.01}\r\n                                  type=\"number\"\r\n                                  sm=\"9\"\r\n                                  name={\"sale_price\"}\r\n                                  value={Number(variantarray.sale_price)}\r\n                                />\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"manufacture_date addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Manufacturing Date\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\" size=\"sm\">\r\n                                <Form.Control\r\n                                  type=\"date\"\r\n                                  sm=\"9\"\r\n                                  required\r\n                                  min={moment().format(\"YYYY-MM-DD\")}\r\n                                  // className={\r\n                                  //   customvalidated === true\r\n                                  //     ? \"border-danger\"\r\n                                  //     : null\r\n                                  // }\r\n                                  onChange={(e) => onVariantChange(e)}\r\n                                  name={\"manufacturing_date\"}\r\n                                  value={variantarray.manufacturing_date}\r\n                                />\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"manufacture_date addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Expire Date\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  type=\"date\"\r\n                                  sm=\"9\"\r\n                                  min={moment(\r\n                                    variantarray.manufacturing_date\r\n                                  ).format(\"YYYY-MM-DD\")}\r\n                                  disabled={\r\n                                    variantarray.manufacturing_date\r\n                                      ? false\r\n                                      : true\r\n                                  }\r\n                                  onChange={(e) => onVariantChange(e)}\r\n                                  name={\"expire_date\"}\r\n                                  value={moment(\r\n                                    variantarray.expire_date\r\n                                  ).format(\"YYYY-MM-DD\")}\r\n                                />\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-md-3 col-sm-4 p-2\">\r\n                        <div className=\"manufacture_date addvariety_inputbox\">\r\n                          <Form.Group\r\n                            className=\"mx-3\"\r\n                            controlId=\"validationCustom01\"\r\n                          >\r\n                            <Form.Label\r\n                              className=\"text-start inputlabelheading\"\r\n                              sm=\"12\"\r\n                            >\r\n                              Quantity\r\n                              <span className=\"text-danger\">*</span>\r\n                            </Form.Label>\r\n                            <Col sm=\"12\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  name={\"quantity\"}\r\n                                  type=\"number\"\r\n                                  value={variantarray.quantity}\r\n                                  sm=\"9\"\r\n                                  min={\"1\"}\r\n                                  onChange={(e) => onVariantChange(e)}\r\n                                  onKeyUp={(event) => {\r\n                                    if (event.key === \"Enter\") {\r\n                                      onVariantaddclick();\r\n                                    }\r\n                                  }}\r\n                                />\r\n                              </InputGroup>\r\n                            </Col>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n\r\n\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        <div className=\"manufacture_date addvariety_inputbox\">\r\n                          <Button\r\n                            variant=\"outline-success\"\r\n                            className=\"addcategoryicon w-100\"\r\n                            // type=\"submit\"\r\n                            onClick={() =>\r\n                              onVariantaddclick(\r\n                                variantarray.id,\r\n                                variantarray.product_id\r\n                              )\r\n                            }\r\n                          >\r\n                            Save Variety\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                        {varietyUnitvalidation === \"ExpireDateValidation\" ? (\r\n                          <tr>\r\n                            <p className=\"mt-1 ms-2 text-danger\" type=\"invalid\">\r\n                              Please Expire date should be greater or equal than\r\n                              Manufacturing date\r\n                            </p>\r\n                          </tr>\r\n                        ) : null}\r\n                        <tr>\r\n                          {customvalidated === true ? (\r\n                            <p className=\"mt-1 ms-2 text-danger\" type=\"invalid\">\r\n                              Please fill Required fields\r\n                            </p>\r\n                          ) : null}\r\n\r\n                          {varietyUnitvalidation === \"fillUnit&size&color\" ? (\r\n                            <p className=\"mt-1 ms-2 text-danger\" type=\"invalid\">\r\n                              Please Fill size and colors\r\n                            </p>\r\n                          ) : varietyUnitvalidation === \"fillUnit&color\" ? (\r\n                            <p\r\n                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                              type=\"invalid\"\r\n                            >\r\n                              Please fill color\r\n                            </p>\r\n                          ) : varietyUnitvalidation ===\r\n                            \"unitQwanity&size&color\" ? (\r\n                            <p\r\n                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                              type=\"invalid\"\r\n                            >\r\n                              Please fill weight/volume/piece\r\n                            </p>\r\n                          ) : varietyUnitvalidation === \"discountmore\" ? (\r\n                            <p\r\n                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                              type=\"invalid\"\r\n                            >\r\n                              Discount should be less then 100\r\n                            </p>\r\n                          ) : varietyUnitvalidation === \"QwanityValidation\" ? (\r\n                            <p\r\n                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                              type=\"invalid\"\r\n                            >\r\n                              Quantity must be greater than 0\r\n                            </p>\r\n                          ) : varietyUnitvalidation === \"mrpmore\" ? (\r\n                            <p\r\n                              className=\"mt-1 ms-2 text-danger my-3\"\r\n                              type=\"invalid\"\r\n                            >\r\n                              Mrp must be lesser than 50000 and greater than 0\r\n                            </p>\r\n                          ) : varietyUnitvalidation === \"\" ? null : null}\r\n                        </tr>\r\n                      </div>\r\n\r\n                      <div className=\"col-12\">\r\n                        {/* <Accordion defaultActiveKey=\"variantimgbox149\"> */}\r\n\r\n\r\n                        <Table bordered className=\"align-middle my-2\">\r\n                          <thead className=\"align-middle\">\r\n                            <tr>\r\n                              <th>\r\n                                Variety <span className=\"text-danger\">*</span>\r\n                              </th>\r\n\r\n                              <th>Color</th>\r\n                              <th>Weight/piece/Volume </th>\r\n                              <th>Size </th>\r\n                              <th>\r\n                                Mrp <span className=\"text-danger\">*</span>\r\n                              </th>\r\n                              <th>Discount</th>\r\n                              <th>\r\n                                Price<span className=\"text-danger\">*</span>\r\n                              </th>\r\n                              <th>\r\n                                Total Tax\r\n                                <span className=\"text-danger\">*</span>\r\n                              </th>\r\n                              <th>\r\n                                Sale Price\r\n                                <span className=\"text-danger\">*</span>\r\n                              </th>\r\n                              <th className=\"manufacture_date\">\r\n                                Mdate <span className=\"text-danger\">*</span>\r\n                              </th>\r\n                              <th className=\"manufacture_date\">\r\n                                Edate <span className=\"text-danger\">*</span>\r\n                              </th>\r\n                              <th className=\"manufacture_date\">\r\n                                Quantity<span className=\"text-danger\">*</span>\r\n                              </th>\r\n                              <th className=\"manufacture_date\">Action</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {vdata === \"\" ||\r\n                              vdata === null ||\r\n                              vdata === undefined\r\n                              ? null\r\n                              : (vdata || []).map((variantdata, i) => {\r\n                                return variantdata.is_delete ===\r\n                                  \"0\" ? null : (\r\n                                  <>\r\n                                    {/* <Accordion.Item eventKey=\"0\"> */}\r\n                                    <tr\r\n                                      className=\"add_variety_list_box\"\r\n                                      key={i}\r\n                                    >\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {variantdata.unit === \"pcs\"\r\n                                          ? \"color\"\r\n                                          : variantdata.unit === \"piece\"\r\n                                            ? \"piece\"\r\n                                            : variantdata.unit === \"gms\"\r\n                                              ? \"weight\"\r\n                                              : variantdata.unit === \"ml\"\r\n                                                ? \"volume\"\r\n                                                : \"\"}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {variantdata.colors}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {variantdata.unit === \"gms\"\r\n                                          ? variantdata.unit_quantity\r\n                                          : variantdata.unit === \"ml\"\r\n                                            ? variantdata.unit_quantity\r\n                                            : variantdata.unit === \"piece\"\r\n                                              ? variantdata.unit_quantity\r\n                                              : \"\"}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {variantdata.size}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {Number(variantdata.mrp).toFixed(2)}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {Number(variantdata.discount).toFixed(\r\n                                          2\r\n                                        )}\r\n                                      </td>\r\n\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {Number(\r\n                                          variantdata.product_price\r\n                                        ).toFixed(2)}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {Number(\r\n                                          (variantdata.sale_price *\r\n                                            (Number(taxdata.gst) +\r\n                                              Number(\r\n                                                taxdata.wholesale_sales_tax\r\n                                              ) +\r\n                                              Number(\r\n                                                taxdata.retails_sales_tax\r\n                                              ) +\r\n                                              Number(\r\n                                                taxdata.manufacturers_sales_tax\r\n                                              ) +\r\n                                              Number(\r\n                                                taxdata.value_added_tax\r\n                                              ))) /\r\n                                          100\r\n                                        ).toFixed(2)}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {variantdata.sale_price.toFixed(2)}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {moment(\r\n                                          variantdata.manufacturing_date\r\n                                        ).format(\"YYYY-MM-DD\")}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center \">\r\n                                        {moment(\r\n                                          variantdata.expire_date\r\n                                        ).format(\"YYYY-MM-DD\")}\r\n                                      </td>\r\n                                      <td className=\"p-0 py-3 text-center manufacture_date\">\r\n                                        {variantdata.quantity}\r\n                                      </td>\r\n\r\n                                      <td className=\"p-0 py-3 text-center action_btn_box\">\r\n                                        <RiImageAddLine\r\n                                          type=\"button\"\r\n                                          className=\"variety_edit_action_btn  text-success\"\r\n                                          eventKey={i}\r\n                                          onClick={(_id) =>\r\n                                            onImgView(\r\n                                              variantdata.id,\r\n                                              variantdata.product_id,\r\n                                              console.log(\"variantdata.iddddddddddd\" + variantdata.id)\r\n\r\n\r\n                                            )\r\n                                          }\r\n\r\n                                          aria-controls={\r\n                                            \"variantimgbox\" + variantdata.id\r\n\r\n                                          }\r\n                                          aria-expanded={open}\r\n                                        />\r\n\r\n                                        <BiEdit\r\n                                          className=\"variety_edit_action_btn text-primary mx-2\"\r\n                                          onClick={(id) =>\r\n                                            VariantEditClick(\r\n                                              variantdata.id,\r\n                                              variantdata.product_id\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        <BsTrash\r\n                                          className=\"variety_edit_action_btn text-danger\"\r\n                                          onClick={(id) =>\r\n                                            VariantRemoveClick(\r\n                                              variantdata.id,\r\n                                              variantdata.product_id\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                      </td>\r\n                                    </tr>\r\n                                    {/* <Accordion.Body eventKey={i}> */}\r\n                                    {newImageUrls ? (\r\n                                      console.log(\"viewwwww-----==========-------\" + variantdata.id),\r\n                                      console.log(\"imageboxid-----++++++--------------------\" + imageboxid),\r\n\r\n                                      <tr\r\n\r\n                                        className={\r\n                                          variantdata.id === imageboxid\r\n\r\n                                            ? \"img_preview_boxx show\"\r\n                                            : \"img_preview_boxx hide\"\r\n                                        }\r\n\r\n                                        id={\"variantimgbox\" + variantdata.id}\r\n                                      >\r\n                                        <td colSpan=\"13\">\r\n                                          <div className=\"image_box\">\r\n                                            {(newImageUrls || []).map((imgg, i) => {\r\n                                              return `${variantdata.id}` ===\r\n                                                imgg.product_verient_id ? (\r\n                                                <div\r\n                                                  className=\"imgprivew_box\"\r\n                                                  key={i}\r\n                                                >\r\n                                                  {/* {console.log(\"imgg.image_position\"+imgg.image_position)} */}\r\n                                                  {imgg.image_position ===\r\n                                                    \"cover\" ? (\r\n                                                    <span className=\"cover_img\">\r\n                                                      Cover\r\n                                                    </span>\r\n                                                  ) : null}\r\n                                                  <img\r\n                                                    src={\r\n                                                      imgg.product_image_path\r\n                                                    }\r\n                                                    key={i}\r\n                                                    alt=\"apna_organic\"\r\n                                                    height={120}\r\n                                                  />\r\n                                                  <span\r\n                                                    className=\"cover_icon\"\r\n                                                    onClick={(id) =>\r\n                                                      onImgCoverEditClick(\r\n                                                        imgg.product_image_id,\r\n                                                        imgg.product_id,\r\n                                                        imgg.product_verient_id\r\n                                                      )\r\n                                                    }\r\n                                                  >\r\n                                                    Set Cover\r\n                                                  </span>\r\n                                                  <button\r\n                                                    className=\"cross_icon\"\r\n                                                    onClick={() =>\r\n                                                      onImgRemove(\r\n                                                        imgg.product_image_id,\r\n                                                        imgg.product_image_name,\r\n                                                        imgg.vendor_id,\r\n                                                        imgg.product_id,\r\n                                                        imgg.product_verient_id\r\n                                                      )\r\n                                                    }\r\n                                                  >\r\n                                                    &times;\r\n                                                  </button>\r\n                                                </div>\r\n                                              ) : null;\r\n                                            })}\r\n                                            <div className=\"imgprivew_box\">\r\n                                              {currentPage === \"choose-img\" ? (\r\n\r\n                                                <FileInput setImage={setImage} onImageSelected={onImageSelected} setimageName={setimageName} />\r\n                                              ) : currentPage === \"crop-img\" ? (\r\n                                                <ImageCropper\r\n                                                  handleClose={handleClose}\r\n                                                  // show={show}\r\n                                                  image={image}\r\n                                                  imageNamee={imageName}\r\n                                                  modalShow={true}\r\n                                                  onCropDone={(imgCroppedArea) => onCropDone(\r\n                                                    imgCroppedArea,\r\n                                                    variantdata.product_id,\r\n                                                    variantdata.id,\r\n                                                    variantdata.vendor_id,\r\n                                                    console.log(\"variantdata.id ----onmageupdaload\" + variantdata.id)\r\n\r\n\r\n\r\n                                                  )\r\n                                                  }\r\n                                                  onCropCancel={onCropCancel}\r\n                                                />\r\n                                              ) : (\r\n                                                <div>\r\n                                                  <div>\r\n                                                    <FileInput setImage={setImage} onImageSelected={onImageSelected} setimageName={setimageName} />\r\n                                                  </div>\r\n                                                  {/* {<FileInput/> === <ImageCropper /> ? (\r\n                                                      <>\r\n                                                        <button\r\n                                                          onClick={() => {\r\n                                                            setCurrentPage(\"crop-img\");\r\n                                                          }}\r\n                                                          className=\"btn\"\r\n                                                        >\r\n                                                          Crop\r\n                                                        </button>\r\n\r\n                                                        <button\r\n                                                          onClick={() => {\r\n                                                            setCurrentPage(\"choose-img\");\r\n                                                            setImage(\"\");\r\n                                                          }}\r\n                                                          className=\"btn\"\r\n                                                        >\r\n                                                          New Image\r\n                                                        </button>\r\n                                                      </>\r\n                                                    ) : \"\"} */}\r\n                                                </div>\r\n                                              )}\r\n\r\n\r\n\r\n\r\n\r\n                                            </div>\r\n                                          </div>\r\n                                        </td>\r\n                                      </tr>\r\n                                    ) : null}\r\n                                    {/* </Accordion.Body> */}\r\n                                    {/* </Accordion.Item> */}\r\n                                    <tr>\r\n                                      <td colSpan={\"12\"}>\r\n                                        {customvalidated === \"imgformat\" ? (\r\n                                          <span\r\n                                            className=\"mt-2   text-center fs-6 text-danger\"\r\n                                            type=\"invalid\"\r\n                                          >\r\n                                            Image Format should be in jpg,\r\n                                            jpeg or png\r\n                                          </span>\r\n                                        ) : null}\r\n                                      </td>\r\n                                    </tr>\r\n                                  </>\r\n                                );\r\n                              })}\r\n                            {changeUnitproperty === \"editvariety\" ? (\r\n                              <tr>\r\n                                <td\r\n                                  className=\"text-primary text-center mx-5\"\r\n                                  colSpan={12}\r\n                                >\r\n                                  Now You can edit vareity type\r\n                                </td>\r\n                              </tr>\r\n                            ) : null}\r\n                          </tbody>\r\n                        </Table>\r\n                        {/* </Accordion> */}\r\n                        {/* </Col>\r\n                      </Form.Group> */}\r\n\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {/* </Form.Group> */}\r\n                </div>\r\n\r\n\r\n\r\n              </Modal.Body>\r\n\r\n              <Modal.Footer>\r\n                <button\r\n                  className=\"button main_outline_button\"\r\n                  onClick={handlevarietyClose}\r\n                >\r\n                  Close\r\n                </button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n\r\n          <DataTable\r\n            columns={columns}\r\n            data={pdata.results}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n            className={\"table_body product_table\"}\r\n          />\r\n\r\n          <SAlert\r\n            show={VerityAlert}\r\n            title=\"Product Name\"\r\n            text=\"Are you Sure you want to delete\"\r\n            onConfirm={hideAlert}\r\n            showCancelButton={true}\r\n            onCancel={closeAlert}\r\n          />\r\n\r\n          <SAlert\r\n            show={Alert}\r\n            title=\"Product Name\"\r\n            text=\"Are you Sure you want to delete\"\r\n            onConfirm={deleteProductAlert}\r\n            showCancelButton={true}\r\n            onCancel={closeAlert}\r\n          />\r\n\r\n          <SAlert\r\n            show={ProductAlert}\r\n            title=\"Added Successfully\"\r\n            text={\"Product Added\"}\r\n            onConfirm={closeProductAlert}\r\n          />\r\n\r\n          <SAlert\r\n            show={ProductDraftAlert}\r\n            title=\"Added Successfully \"\r\n            text=\" Product Added To Draft\"\r\n            onConfirm={closeProductAlert}\r\n          />\r\n\r\n          <SAlert\r\n            show={UpdatetAlert}\r\n            title=\"Updated Successfully \"\r\n            text=\" Product Updated\"\r\n            onConfirm={closeProductAlert}\r\n          />\r\n\r\n          {/* feature product modal */}\r\n\r\n          <Modal show={featureshow} onHide={featureModalClose}>\r\n            <Form className=\"\" novalidate validated={validated} ref={formRef} onSubmit={OnOfferProductAdd}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Add Offer Product</Modal.Title>\r\n              </Modal.Header>\r\n              {error === false ? (\r\n                <p\r\n                  className=\"mt-2 ms-2 text-danger text-center fs-6\"\r\n                  type=\"invalid\"\r\n                >\r\n                  Already Added In Offred Product List!!!\r\n                </p>\r\n              ) : null}\r\n\r\n              <Modal.Body className=\"p-3\">\r\n                <div className=\"d-flex justify-content-center align-items-center p-0 m-0\">\r\n                  <div className=\"\">\r\n                    <div className=\"\">\r\n                      <div className=\"row px-3\">\r\n                        <div className=\"col-12\">\r\n                          <Form.Group\r\n                            className=\"mb-3\"\r\n                            controlId=\"formPlaintextName\"\r\n                          >\r\n                            <Form.Label className=\"\" column sm=\"12\">\r\n                              Product Name\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                              required\r\n                              type=\"text\"\r\n                              placeholder=\"Name\"\r\n                              value={productname}\r\n                              name={\"productname\"}\r\n\r\n                            />\r\n                          </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                          <Form.Group\r\n                            className=\"mb-3\"\r\n                            controlId=\"formPlaintextName\"\r\n                          >\r\n                            <Form.Label className=\"\" column sm=\"12\">\r\n                              Product Id\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              placeholder=\"Name\"\r\n                              value={featuredata.product_id}\r\n                              name={\"product_id\"}\r\n                              required\r\n                            />\r\n                          </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                          <Form.Group\r\n                            className=\"mb-3\"\r\n                            controlId=\"formPlaintextName\"\r\n                          >\r\n                            <Form.Label className=\"\" column sm=\"12\">\r\n                              Offer Type\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                              type=\"text\"\r\n                              placeholder=\"Name\"\r\n                              value={featuredata.fetured_type}\r\n                              name={\"fetured_type\"}\r\n                              required\r\n                            />\r\n                          </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                          <Form.Group\r\n                            className=\"mb-3\"\r\n                            controlId=\"formPlaintextName\"\r\n                          >\r\n                            <Form.Label className=\"\" column sm=\"12\">\r\n                              Start Date\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                              type=\"date\"\r\n                              placeholder=\"Name\"\r\n                              onChange={(e) => OnFeatureDateChaneg(e)}\r\n                              value={featuredata.start_date}\r\n                              name={\"start_date\"}\r\n                              required\r\n                              min={moment().format(\"YYYY-MM-DD\")}\r\n                            />\r\n                            <Form.Control.Feedback\r\n                              type=\"invalid\"\r\n                              className=\"h6\"\r\n                            >\r\n                              Please fill start date\r\n                            </Form.Control.Feedback>\r\n                          </Form.Group>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                          <Form.Group\r\n                            className=\"mb-3\"\r\n                            controlId=\"formPlaintextName\"\r\n                          >\r\n                            <Form.Label className=\"\" column sm=\"12\">\r\n                              End Date\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                              type=\"date\"\r\n                              placeholder=\"Name\"\r\n                              onChange={(e) => OnFeatureDateChaneg(e)}\r\n                              value={featuredata.end_date}\r\n                              disabled={featuredata.start_date ? false : true}\r\n                              name={\"end_date\"}\r\n                              required\r\n                              min={moment(featuredata.start_date).format(\r\n                                \"YYYY-MM-DD\"\r\n                              )}\r\n                            />\r\n                            <Form.Control.Feedback\r\n                              type=\"invalid\"\r\n                              className=\"h6\"\r\n                            >\r\n                              Please fill end date\r\n                            </Form.Control.Feedback>\r\n                          </Form.Group>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer className=\"\">\r\n                <Iconbutton\r\n                  type={\"button\"}\r\n                  btntext={\"Cancel\"}\r\n                  onClick={featureModalClose}\r\n                  btnclass={\"button main_outline_button \"}\r\n                />\r\n                <Iconbutton\r\n                  // onClick={OnOfferProductAdd}\r\n                  btntext={\"Added\"}\r\n                  btnclass={\"button main_button \"}\r\n                />\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n          <SAlert\r\n            show={RestoreAlert}\r\n            title={productname}\r\n            onConfirm={() => setRestoreAlert(false)}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Product;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\vendoremaillogin.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellersignupp.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\vendorupdate.js",["445","446","447","448","449"],[],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { useState, useEffect } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\nimport { Badge, Button, InputGroup, Table } from \"react-bootstrap\";\r\nimport { GiCancel } from \"react-icons/gi\";\r\n// import Spinner from \"react-bootstrap/Spinner\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport storetype from \"../json/storetype\";\r\n\r\nconst VendorUpdate = () => {\r\n  let vendorid = localStorage.getItem(\"vendorid\");\r\n  let vendortoken = localStorage.getItem(\"vendor_token\");\r\n  const [emailVal, setemailVal] = useState(\"\");\r\n\r\n  const [AddtagError, setAddTagError] = useState(\"\");\r\n  const [customValidation, setCustomValidation] = useState(false);\r\n  const [SocialLink, setSocialLink] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const [newImageUrls, setnewImageUrls] = useState([]);\r\n  const [scall, setsCall] = useState(false);\r\n  const [addvendordata, setaddvendordata] = useState({\r\n    owner_name: \"\",\r\n    shop_name: \"\",\r\n    mobile: \"\",\r\n    email: \"\",\r\n    shop_address: \"\",\r\n    gstn: \"\",\r\n    geolocation: \"\",\r\n    store_type: \"\",\r\n    image: \"\",\r\n    status: \"\",\r\n    document_name: [],\r\n    availability: \"\",\r\n    social_media_links: [],\r\n  });\r\n\r\n  let encoded;\r\n  let ImgObj = [];\r\n  var imgvalidate;\r\n  const [addtag, setaddtag] = useState();\r\n  const [Docnamearray, setDocnameArray] = useState([]);\r\n  const [headerval, setheaderval] = useState(\"\");\r\n  const [descval, setdescval] = useState(\"\");\r\n  const [customarray, setcustomarray] = useState([]);\r\n  const [AddCustom, setAddCustom] = useState([]);\r\n  // const [customvalidated, setcustomValidated] = useState(false);\r\n  const [file, setFile] = useState();\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const [apicall, setapicall] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setaddvendordata({\r\n      owner_name: \"\",\r\n      shop_name: \"\",\r\n      mobile: \"\",\r\n      email: \"\",\r\n      shop_address: \"\",\r\n      gstn: \"\",\r\n      geolocation: \"\",\r\n      store_type: \"\",\r\n      image: \"\",\r\n      status: \"\",\r\n      document_name: [],\r\n      availability: \"\",\r\n      social_media_links: [],\r\n    });\r\n    setnewImageUrls([]);\r\n    // navigate(\"/\");\r\n  };\r\n\r\n  // for close the reqest apporove model\r\n  const handleClose1 = () => {\r\n    setShow(false);\r\n    setemailVal(\"\")\r\n\r\n  };\r\n\r\n  const OnVendorDetail = () => {\r\n    if (\r\n      vendortoken === null ||\r\n      vendortoken === \"undefined\" ||\r\n      vendortoken === \"\"\r\n    ) {\r\n    } else {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL}/vendors`,\r\n          {\r\n            vendor_id: vendorid,\r\n          },\r\n          {\r\n            headers: {\r\n              vendor_token: vendortoken,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setaddvendordata(response.data[0]);\r\n          setFile(\"\");\r\n          setFileName(\"\");\r\n          setcustomarray(response.data[0].social_media_links);\r\n          let strCopy = response.data[0].document_name.split(\",\");\r\n          setDocnameArray(strCopy);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    OnVendorDetail();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setaddvendordata({\r\n      ...addvendordata,\r\n      document_name: Docnamearray,\r\n    });\r\n  }, [Docnamearray]);\r\n\r\n  // get the value of vendor input field\r\n  const handleFormChange = (e) => {\r\n    setCustomValidation(false);\r\n\r\n    setaddvendordata({\r\n      ...addvendordata,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // onchange of add tag\r\n  const onDocumentNamechange = (e) => {\r\n    setAddTagError(\"\");\r\n    setaddtag(e.target.value);\r\n  };\r\n\r\n  const onDocuAddclick = (e) => {\r\n    if (addtag === \"\") {\r\n      setAddTagError(\"addTagErorrr\");\r\n    } else {\r\n      setDocnameArray((Docnamearray) => [...Docnamearray, addtag]);\r\n      setaddtag(\"\");\r\n      setAddTagError(\"\");\r\n    }\r\n  };\r\n\r\n  const DocuRemoveClick = (e) => {\r\n    setDocnameArray(Docnamearray.filter((item) => item !== e));\r\n  };\r\n  const ImgFormChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n    setFileName(e.target.files[0].name);\r\n  };\r\n  imgvalidate = fileName.split(\".\").pop();\r\n  const convertToBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      const { name } = file;\r\n      fileReader.addEventListener(\"load\", () => {\r\n        resolve({ name: name, base64: fileReader.result });\r\n      });\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n  };\r\n\r\n  const imguploadchange = async (e) => {\r\n    // e.preventDefault()\r\n    for (let i = 0; i < e.target.files.length; i++) {\r\n      encoded = await convertToBase64(e.target.files[i]);\r\n      const [first, ...rest] = encoded.base64.split(\",\");\r\n      const [nameimg, ext] = encoded.name.split(\".\");\r\n      console.log(first, nameimg)\r\n      const vendorimg = rest.join(\"-\");\r\n      let imar = {\r\n        vendor_id: `${vendorid}`,\r\n        documents_name: `${encoded.name}${i}${vendorid}`,\r\n        documents_position: `position${i}`,\r\n        type_of_file: `${ext}`,\r\n        img_64: vendorimg,\r\n      };\r\n      ImgObj.push(imar);\r\n    }\r\n    // image\r\n    if (newImageUrls.length <= 5) {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL}/vendor_documents_upload`,\r\n          ImgObj\r\n        )\r\n        .then((response) => {\r\n          setapicall(true);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      alert(\"Cannot upload more than 6 image\");\r\n    }\r\n  };\r\n\r\n  const onImgRemove = (id, vendor_id) => {\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/vendor_document_delete`, {\r\n        vendor_doc_id: `${id}`,\r\n        vendor_id: `${vendor_id}`,\r\n      })\r\n      .then((response) => {\r\n        onImgView(vendor_id);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    onImgView();\r\n    // OnVendorDetail();\r\n  }, [apicall]);\r\n  const onImgView = () => {\r\n    if (\r\n      vendorid === null ||\r\n      vendorid === \"undefined\" ||\r\n      vendorid === \"null\" ||\r\n      vendorid === undefined\r\n    ) {\r\n    } else {\r\n      axios\r\n        .get(\r\n          `${process.env.REACT_APP_BASEURL}/vendor_documents_get?vendor_id=${vendorid}`\r\n        )\r\n        .then((response) => {\r\n          setnewImageUrls(response.data);\r\n          setapicall(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n  //img code end-------------------------------------------------------------------------------------------------\r\n  // social media link\r\n  const oncustomheadChange = (e) => {\r\n    setSocialLink(false);\r\n    setheaderval(e.target.value);\r\n  };\r\n\r\n  const oncustomdescChange = (e) => {\r\n    setSocialLink(false);\r\n    setdescval(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    if (headerval !== \"\" && descval !== \"\") {\r\n      setcustomarray((customarray) => [...customarray, AddCustom]);\r\n      setheaderval(\"\");\r\n      setdescval(\"\");\r\n      setAddCustom(\"\");\r\n      // setcustomValidated(false);\r\n      setsCall(false);\r\n    }\r\n  }, [scall]);\r\n\r\n  // validation on social media link\r\n  const handleAddClick = (e) => {\r\n    if (headerval === \"\") {\r\n      setSocialLink(\"HeaderBlank\");\r\n    } else if (descval === \"\") {\r\n      setSocialLink(\"DesBlank\");\r\n    } else {\r\n      let returnedTarget = Object.assign({}, { [headerval]: descval });\r\n      setAddCustom(...AddCustom, returnedTarget);\r\n      setsCall(true);\r\n    }\r\n  };\r\n\r\n  const handleRemoveClick = (e) => {\r\n    setcustomarray(customarray.filter((item) => item !== e));\r\n  };\r\n\r\n  useEffect(() => {\r\n    setaddvendordata({\r\n      ...addvendordata,\r\n      testjson: customarray,\r\n    });\r\n  }, [customarray]);\r\n\r\n  // end social media link\r\n\r\n  const UpdateVendorClick = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (addvendordata.owner_name === \"\" || addvendordata.owner_name === null) {\r\n      setCustomValidation(\"ownernameEmpty\");\r\n    } else if (\r\n      addvendordata.shop_name === \"\" ||\r\n      addvendordata.shop_name === null\r\n    ) {\r\n      setCustomValidation(\"shopnameEmpty\");\r\n    } else if (addvendordata.mobile === \"\" || addvendordata.mobile === null) {\r\n      setCustomValidation(\"MobileEmpty\");\r\n    } else if (\r\n      addvendordata.mobile.length > 10 ||\r\n      addvendordata.mobile.length < 10\r\n    ) {\r\n      setCustomValidation(\"10number\");\r\n    } else if (addvendordata.email === \"\" || addvendordata.email === null) {\r\n      // var regex = /^([a-zA-Z0-9_.+-])+\\@(([a-zA-Z0-9-])+\\.)+([a-zA-Z]{2,4})+$/;\r\n      var rst = /\\S+@\\S+\\.\\S+/.test(addvendordata.email);\r\n      if (rst !== true) {\r\n        setCustomValidation(\"EmailEmpty\");\r\n      }\r\n      setCustomValidation(\"EmailEmpty\");\r\n    } else if (\r\n      addvendordata.shop_address === \"\" ||\r\n      addvendordata.shop_address === null\r\n    ) {\r\n      setCustomValidation(\"ShopAddressEmpty\");\r\n    } else if (addvendordata.gstn === \"\" || addvendordata.gstn === null) {\r\n      setCustomValidation(\"GSTEmpty\");\r\n    } else if (\r\n      addvendordata.store_type === \"\" ||\r\n      addvendordata.store_type === null\r\n    ) {\r\n      setCustomValidation(\"storeTypeEmpty\");\r\n    } else if (\r\n      addvendordata.geolocation === \"\" ||\r\n      addvendordata.geolocation === null\r\n    ) {\r\n      setCustomValidation(\"GeolocationEmpty\");\r\n    } else if (\r\n      imgvalidate === \"jpg\" ||\r\n      imgvalidate === \"jpeg\" ||\r\n      imgvalidate === \"png\" ||\r\n      imgvalidate === \"\"\r\n    ) {\r\n      // e.stopPropagation();\r\n      let x = [addvendordata.document_name];\r\n      // e.preventDefault();\r\n      const formData = new FormData();\r\n\r\n      let socialname = addvendordata.testjson;\r\n      let socialname_new = JSON.stringify(socialname);\r\n\r\n      formData.append(\"id\", vendorid);\r\n      formData.append(\"image\", file);\r\n      formData.append(\"filename\", fileName);\r\n      formData.append(\"owner_name\", addvendordata.owner_name);\r\n      formData.append(\"shop_name\", addvendordata.shop_name);\r\n      formData.append(\"mobile\", addvendordata.mobile);\r\n      formData.append(\"email\", emailVal);\r\n      formData.append(\"shop_address\", addvendordata.shop_address);\r\n      formData.append(\"gstn\", addvendordata.gstn);\r\n      formData.append(\"geolocation\", addvendordata.geolocation);\r\n      formData.append(\"store_type\", addvendordata.store_type);\r\n      formData.append(\"availability\", addvendordata.availability);\r\n      formData.append(\"document_name\", x);\r\n      formData.append(\"status\", \"pending\");\r\n      formData.append(\"social_media_links\", socialname_new);\r\n\r\n      axios\r\n        .put(`${process.env.REACT_APP_BASEURL}/vendor_update`, formData, {\r\n          headers: {\r\n            vendor_token: vendortoken,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          let data = response.data;\r\n          if (data.message === \"Updated Vendor Profile\") {\r\n            setShow(true);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      setCustomValidation(\"imgformat\");\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"col-xxl-6 col-xl-5 col-lg-6 d-lg-block justify-content-center \">\r\n        <Form\r\n          className=\"\"\r\n          // validated={validated}\r\n          // ref={formRef}\r\n          onSubmit={(e) => UpdateVendorClick(e)}\r\n        >\r\n          <div className=\"row p-3 m-0\">\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              //  controlId=\"validationCustom01\"\r\n              >\r\n                <Form.Label>\r\n                  Owner Name <span className=\"text-danger\">* </span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Owner Name\"\r\n                  name={\"owner_name\"}\r\n                  onChange={(e) => handleFormChange(e)}\r\n                  value={addvendordata.owner_name}\r\n                // required\r\n                />\r\n                {customValidation === \"ownernameEmpty\" ? (\r\n                  <span className=\"text-danger\">Please fill the Owner </span>\r\n                ) : customValidation === false ? (\r\n                  \"\"\r\n                ) : null}\r\n              </Form.Group>\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              //  controlId=\"validationCustom02\"\r\n              >\r\n                <Form.Label>\r\n                  Shop Name <span className=\"text-danger\">* </span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Shop Name\"\r\n                  name={\"shop_name\"}\r\n                  onChange={(e) => handleFormChange(e)}\r\n                  value={addvendordata.shop_name}\r\n                //  required\r\n                />\r\n                {customValidation === \"shopnameEmpty\" ? (\r\n                  <span className=\"text-danger\">Please fill the Shop name</span>\r\n                ) : customValidation === false ? (\r\n                  \"\"\r\n                ) : null}\r\n              </Form.Group>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              //  controlId=\"validationCustom03\"\r\n              >\r\n                <Form.Label>\r\n                  Mobile <span className=\"text-danger\">* </span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  placeholder=\"Mobile\"\r\n                  name={\"mobile\"}\r\n                  onChange={(e) => handleFormChange(e)}\r\n                  value={addvendordata.mobile}\r\n                // required\r\n                />\r\n                {customValidation === \"MobileEmpty\" ? (\r\n                  <span className=\"text-danger\">Please fill the Mobile </span>\r\n                ) : customValidation === \"10number\" ? (\r\n                  <span className=\"text-danger\">\r\n                    Mobile Number should not be greater then 10 and less than 10{\" \"}\r\n                  </span>\r\n                ) : customValidation === false ? (\r\n                  \"\"\r\n                ) : null}\r\n              </Form.Group>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              //  controlId=\"validationCustom04\"\r\n              >\r\n                <Form.Label>\r\n                  Email <span className=\"text-danger\">* </span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"email\"\r\n                  placeholder=\"Email\"\r\n                  name={\"email\"}\r\n                  onChange={(e) => handleFormChange(e)}\r\n                  value={addvendordata.email}\r\n                // required\r\n                />\r\n                {customValidation === \"EmailEmpty\" ? (\r\n                  <span className=\"text-danger\">\r\n                    Please fill the Email and valid email\r\n                  </span>\r\n                ) : customValidation === false ? (\r\n                  \"\"\r\n                ) : null}\r\n              </Form.Group>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              //  controlId=\"validationCustom05\"\r\n              >\r\n                <Form.Label>\r\n                  Shop Address <span className=\"text-danger\">* </span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  className=\"vendor_address\"\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                  placeholder=\"Address\"\r\n                  name={\"shop_address\"}\r\n                  onChange={(e) => handleFormChange(e)}\r\n                  value={addvendordata.shop_address}\r\n                // required\r\n                />\r\n                {customValidation === \"ShopAddressEmpty\" ? (\r\n                  <span className=\"text-danger\">\r\n                    Please fill the Shop Address{\" \"}\r\n                  </span>\r\n                ) : customValidation === false ? (\r\n                  \"\"\r\n                ) : null}\r\n              </Form.Group>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              // controlId=\"validationCustom06\"\r\n              >\r\n                <Form.Label>\r\n                  GSTN <span className=\"text-danger\">* </span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"GSTN\"\r\n                  name={\"gstn\"}\r\n                  onChange={(e) => handleFormChange(e)}\r\n                  value={addvendordata.gstn}\r\n                // required\r\n                />\r\n                {customValidation === \"GSTEmpty\" ? (\r\n                  <span className=\"text-danger\">Please fill the GST NO. </span>\r\n                ) : customValidation === false ? (\r\n                  \"\"\r\n                ) : null}\r\n              </Form.Group>\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              // controlId=\"validationCustom06\"\r\n              >\r\n                <Form.Label>Avaliable</Form.Label>\r\n                <Form.Select\r\n                  size=\"sm\"\r\n                  aria-label=\"Default select example\"\r\n                  onChange={(e) => handleFormChange(e)}\r\n                  name=\"availability\"\r\n                >\r\n                  <option\r\n                    value=\"\"\r\n                    selected={addvendordata.availability === \"\" ? true : false}\r\n                  >\r\n                    Select\r\n                  </option>\r\n                  <option\r\n                    value=\"close\"\r\n                    selected={\r\n                      addvendordata.availability === \"close\" ? true : false\r\n                    }\r\n                  >\r\n                    close\r\n                  </option>\r\n                  <option\r\n                    value=\"update\"\r\n                    selected={\r\n                      addvendordata.availability === \"update\" ? true : false\r\n                    }\r\n                  >\r\n                    update\r\n                  </option>\r\n                  <option\r\n                    value=\"block\"\r\n                    selected={\r\n                      addvendordata.availability === \"block\" ? true : false\r\n                    }\r\n                  >\r\n                    Block\r\n                  </option>\r\n                  <option\r\n                    value=\"delete\"\r\n                    selected={\r\n                      addvendordata.availability === \"delete\" ? true : false\r\n                    }\r\n                  >\r\n                    Delete\r\n                  </option>\r\n                </Form.Select>\r\n                {/* <Form.Control.Feedback\r\n                              type=\"invalid\"\r\n                              className=\"h6\"\r\n                            >\r\n                              Please fill gstn\r\n                            </Form.Control.Feedback> */}\r\n              </Form.Group>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              // controlId=\"validationCustom06\"\r\n              >\r\n                <Form.Label>\r\n                  Store Type <span className=\"text-danger\">* </span>\r\n                </Form.Label>\r\n                <Form.Select\r\n                  size=\"sm\"\r\n                  aria-label=\"Default select example\"\r\n                  onChange={(e) => handleFormChange(e)}\r\n                  name=\"store_type\"\r\n                  value={addvendordata.store_type}\r\n                >\r\n                  <option\r\n                    value=\"\"\r\n                    selected={addvendordata.store_type === \"\" ? true : false}\r\n                  >\r\n                    Select\r\n                  </option>\r\n                  {(storetype.storetype || []).map((data, i) => {\r\n                    return (\r\n                      <option key={i} value={data}>\r\n                        {data}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Form.Select>\r\n                {customValidation === \"storeTypeEmpty\" ? (\r\n                  <span className=\"text-danger\">\r\n                    Please fill the Store type...\r\n                  </span>\r\n                ) : customValidation === false ? (\r\n                  \"\"\r\n                ) : null}\r\n              </Form.Group>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              // controlId=\"validationCustom07\"\r\n              >\r\n                <Form.Label>\r\n                  Geolocation <span className=\"text-danger\">* </span>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"location\"\r\n                  placeholder=\"Geolocation\"\r\n                  name={\"geolocation\"}\r\n                  onChange={(e) => handleFormChange(e)}\r\n                  value={addvendordata.geolocation}\r\n                // required\r\n                />\r\n                {customValidation === \"GeolocationEmpty\" ? (\r\n                  <span className=\"text-danger\">Please fill the Location </span>\r\n                ) : customValidation === false ? (\r\n                  \"\"\r\n                ) : null}\r\n              </Form.Group>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              // controlId=\"validationCustom10\"\r\n              >\r\n                <Form.Label>\r\n                  Document Name <span className=\"text-danger\">* </span>\r\n                </Form.Label>\r\n                <InputGroup className=\"\" size=\"sm\">\r\n                  <Form.Control\r\n                    onChange={(e) => onDocumentNamechange(e)}\r\n                    value={addtag}\r\n                    placeholder=\"document_name\"\r\n                    name={\"document_name\"}\r\n                    onClick={(event) => {\r\n                      if (event.key === \"Enter\") {\r\n                        onDocuAddclick();\r\n                      }\r\n                    }}\r\n                  />\r\n                  <Button\r\n                    variant=\"outline-success\"\r\n                    className=\"addcategoryicon\"\r\n                    onClick={() => onDocuAddclick()}\r\n                    size=\"sm\"\r\n                  >\r\n                    +\r\n                  </Button>\r\n                </InputGroup>\r\n                {AddtagError === \"addTagErorrr\" ? (\r\n                  <span className=\"text-danger\">\r\n                    Please Add Document first...!!!\r\n                  </span>\r\n                ) : null}\r\n\r\n                {Docnamearray === undefined ||\r\n                  Docnamearray === null ||\r\n                  Docnamearray === \"\" ? null : (\r\n                  <div className=\"d-flex align-items-center tagselectbox mt-2\">\r\n                    {Docnamearray.map((seotags, i) => {\r\n                      return (\r\n                        <>\r\n                          <Badge className=\"tagselecttitle mb-0\" bg=\"success\">\r\n                            {seotags === null || seotags === undefined\r\n                              ? \"\"\r\n                              : seotags}\r\n\r\n                            <GiCancel\r\n                              className=\" mx-0 ms-1 btncancel\"\r\n                              onClick={() => DocuRemoveClick(seotags)}\r\n                            />\r\n                          </Badge>\r\n                        </>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                )}\r\n              </Form.Group>\r\n            </div>\r\n\r\n            {/* social media links -------------------------------------------------------------------------*/}\r\n\r\n            <div className=\"my-3 inputsection_box\">\r\n              <h5 className=\"m-0\">Add Social Media Link</h5>\r\n              <div className=\" mt-0 mb-3\">\r\n                <Table className=\"align-middle\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Social Media</th>\r\n                      <th>Link</th>\r\n                      <th></th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td className=\"text-center col-4\">\r\n                        <InputGroup className=\"\">\r\n                          <Form.Control\r\n                            value={headerval}\r\n                            type=\"text\"\r\n                            sm=\"9\"\r\n                            min={\"1\"}\r\n                            onChange={oncustomheadChange}\r\n                            name={\"header\"}\r\n                          />\r\n                        </InputGroup>\r\n                      </td>\r\n                      <td className=\"col-4\">\r\n                        <InputGroup className=\"\">\r\n                          <Form.Control\r\n                            value={descval}\r\n                            name={\"description\"}\r\n                            type=\"text\"\r\n                            sm=\"9\"\r\n                            min={\"1\"}\r\n                            onChange={oncustomdescChange}\r\n                            onKeyPress={(event) => {\r\n                              if (event.key === \"Enter\") {\r\n                                handleAddClick();\r\n                              }\r\n                            }}\r\n                          />\r\n                        </InputGroup>\r\n                      </td>\r\n                      <td className=\"\">\r\n                        <Button\r\n                          variant=\"outline-success\"\r\n                          className=\"addcategoryicon\"\r\n                          onClick={() => handleAddClick()}\r\n                          size=\"sm\"\r\n                        >\r\n                          +\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        {SocialLink === \"HeaderBlank\" ? (\r\n                          <span className=\"text-danger\">\r\n                            {\" \"}\r\n                            Please Fill ..!!{\" \"}\r\n                          </span>\r\n                        ) : SocialLink === false ? (\r\n                          \"\"\r\n                        ) : null}\r\n                      </td>\r\n                      <td>\r\n                        {\" \"}\r\n                        {SocialLink === \"DesBlank\" ? (\r\n                          <span className=\"text-danger\"> Please Fill..!! </span>\r\n                        ) : SocialLink === false ? (\r\n                          \"\"\r\n                        ) : null}\r\n                      </td>\r\n                    </tr>\r\n                    {customarray\r\n                      ? (customarray || []).map((variantdata, i) => {\r\n                        let v = JSON.stringify(variantdata);\r\n                        let st = v.split(\":\");\r\n                        let pro = st[0].replace(/[{}]/g, \"\");\r\n                        let link = st[1].replace(/[{}]/g, \"\");\r\n\r\n                        return (\r\n                          <tr className=\"\">\r\n                            <td className=\" text-center\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  value={JSON.parse(pro)}\r\n                                  type=\"text\"\r\n                                  sm=\"9\"\r\n                                  min={\"1\"}\r\n                                  onChange={oncustomheadChange}\r\n                                  name={\"custom_input_header\"}\r\n                                  required\r\n                                />\r\n                              </InputGroup>\r\n                            </td>\r\n                            <td className=\"text-center\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  required\r\n                                  value={JSON.parse(link)}\r\n                                  name={\"custom_input_desc\"}\r\n                                  type=\"text\"\r\n                                  sm=\"9\"\r\n                                  min={\"1\"}\r\n                                  onChange={oncustomdescChange}\r\n                                  onKeyPress={(event) => {\r\n                                    if (event.key === \"Enter\") {\r\n                                      handleAddClick();\r\n                                    }\r\n                                  }}\r\n                                />\r\n                              </InputGroup>\r\n                            </td>\r\n                            <td className=\"\">\r\n                              <Button\r\n                                variant=\"text-danger\"\r\n                                className=\"addcategoryicon text-danger\"\r\n                                onClick={() => handleRemoveClick(variantdata)}\r\n                                size=\"sm\"\r\n                              >\r\n                                &times;\r\n                              </Button>\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })\r\n                      : null}\r\n                  </tbody>\r\n                </Table>\r\n              </div>\r\n              {/* );\r\n                })} */}\r\n              {/* --------------------------------------------- */}\r\n            </div>\r\n            {/* end social media link */}\r\n            <div classImg=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              // controlId=\"validationCustom08\"\r\n              >\r\n                <Form.Label>\r\n                  Shop Logo <b>(In .jpg, .jpeg, .png format)</b>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  onChange={(e) => ImgFormChange(e)}\r\n                  type=\"file\"\r\n                  placeholder=\"Shop_logo\"\r\n                  name={\"shop_logo\"}\r\n                  accept=\".png, .jpg, .jpeg\"\r\n                />\r\n                {customValidation === \"imgformat\" ? (\r\n                  <p className=\"text-danger mx-2\">\r\n                    {\"Please Select Correct Image Format\"}\r\n                  </p>\r\n                ) : null}\r\n                {addvendordata.shop_logo ? (\r\n                  <img src={addvendordata.shop_logo} alt=\"\" width={\"50px\"} />\r\n                ) : null}\r\n              </Form.Group>\r\n            </div>\r\n\r\n            <div className=\"col-md-6\">\r\n              <Form.Group\r\n                className=\"mb-3 aos_input\"\r\n              //  controlId=\"validationCustom09\"\r\n              >\r\n                <Form.Label>Documents Upload </Form.Label>\r\n                <Form.Control\r\n                  multiple\r\n                  type=\"file\"\r\n                  placeholder=\"multiple document upload\"\r\n                  name={\"img_64\"}\r\n                  onChange={(e) => imguploadchange(e)}\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n            <Table className=\"vendordoc_image_table\">\r\n              <tbody className=\"vendordoc_image_table_body\">\r\n                {newImageUrls ? (\r\n                  <tr className=\"d-flex flex-wrap\">\r\n                    {(newImageUrls || []).map((imgg, i) => {\r\n                      return (\r\n                        <td className=\"imgprivew_box\">\r\n                          <img\r\n                            src={imgg.documents_path}\r\n                            key={i}\r\n                            alt=\"apna_organic\"\r\n                            width={80}\r\n                            height={100}\r\n                          />\r\n                          <span\r\n                            className=\"cross_icon\"\r\n                            onClick={() =>\r\n                              onImgRemove(imgg.vendor_doc_id, imgg.vendor_id)\r\n                            }\r\n                          >\r\n                            X\r\n                          </span>\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                ) : null}\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n\r\n          <button className={\"mx-4 btn btn-success\"} type={\"submit\"}>\r\n            {\"Update Vendor\"}\r\n          </button>\r\n        </Form>\r\n      </div>\r\n\r\n      <Modal show={show} onHide={handleClose1}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Message for vendor</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body> Your Request now Pending wait for approval!</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            OK\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default VendorUpdate;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\vendors.js",["450","451","452","453"],[],"import React, { useState, useRef } from \"react\";\r\n// import Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport SAlert from \"../common/salert\";\r\n// import logo from \"../../../images/logo.png\";\r\n// import { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport { useEffect } from \"react\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\nimport axios from \"axios\";\r\nimport { Badge, Button, InputGroup, Table } from \"react-bootstrap\";\r\nimport { GiCancel } from \"react-icons/gi\";\r\nimport storetype from \"../json/storetype\";\r\nimport status from \"../json/Status\";\r\nimport Loader from \"../common/loader\";\r\n\r\nconst VendorsList = () => {\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const [AddtagError, setAddTagError] = useState(\"\");\r\n  const [SocialLink, setSocialLink] = useState(false);\r\n  const formRef = useRef();\r\n  const [newImageUrls, setnewImageUrls] = useState([]);\r\n  const [customValidation, setCustomValidation] = useState(false);\r\n  const [show, setShow] = useState(\"\");\r\n  const [docsshow, setDocsShow] = useState(false);\r\n  const [Alert, setAlert] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [vendordata, setvendordata] = useState([]);\r\n  const [file, setFile] = useState();\r\n  // const [fileDoc, setFileDoc] = useState();\r\n  // const [fileDocName, setFileDocName] = useState(\"\");\r\n  const [call, setCall] = useState(false);\r\n  console.log(call)\r\n  const [scall, setsCall] = useState(false);\r\n  const [AddAlert, setAddAlert] = useState(false);\r\n  const [ErrorAddAlert, setErrorAddAlert] = useState(false);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  const [ErrorUpdateAlert, setErrorUpdateAlert] = useState(false);\r\n  const [docerror, setDocerror] = useState(\"\");\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const vendorObject = {\r\n    owner_name: \"\",\r\n    shop_name: \"\",\r\n    mobile: \"\",\r\n    email: \"\",\r\n    shop_address: \"\",\r\n    gstn: \"\",\r\n    geolocation: \"\",\r\n    store_type: \"\",\r\n    image: \"\",\r\n    status: \"active\",\r\n    document_name: [],\r\n    availability: \"\",\r\n    social_media_links: [],\r\n  };\r\n  const [vendorID, setVendorId] = useState(\"\");\r\n  const [addvendordata, setaddvendordata] = useState(vendorObject);\r\n  const [changstatus, setchangstatus] = useState(\"\");\r\n  console.log(changstatus)\r\n  const [apicall, setapicall] = useState(false);\r\n  const [addtag, setaddtag] = useState();\r\n  const [Docnamearray, setDocnameArray] = useState([]);\r\n  const [headerval, setheaderval] = useState(\"\");\r\n  const [descval, setdescval] = useState(\"\");\r\n  const [customarray, setcustomarray] = useState([]);\r\n  const [AddCustom, setAddCustom] = useState([]);\r\n  // const [customvalidated, setcustomValidated] = useState(false);\r\n  const [searchdata, setsearchData] = useState({\r\n    status: \"\",\r\n    store_type: \"\",\r\n    owner_name: \"\",\r\n  });\r\n  let encoded;\r\n  let ImgObj = [];\r\n  // let docuarr;\r\n  var imgvalidate;\r\n\r\n  let admintoken = localStorage.getItem(\"token\");\r\n  const closeAddAlert = () => {\r\n    setLoading(false);\r\n    setAddAlert(false);\r\n  };\r\n  const closeUpdateAlert = () => {\r\n    setLoading(false);\r\n    setUpdateAlert(false);\r\n    setErrorUpdateAlert(false);\r\n    setErrorAddAlert(false);\r\n    setShow(false);\r\n  };\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n    if (searchdata.owner_name) {\r\n      setapicall(true);\r\n    }\r\n  };\r\n\r\n  const onSearchClick = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/vendor_list`,\r\n        {\r\n          owner_name: `${searchdata.owner_name}`,\r\n          store_type: `${searchdata.store_type}`,\r\n          status: `${searchdata.status}`,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setvendordata(response.data);\r\n        setLoading(false);\r\n        setapicall(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  //To reset the search feild blank :-\r\n\r\n  const OnReset = () => {\r\n    setsearchData({ owner_name: \"\", store_type: \"\", status: \"\" });\r\n    setapicall(true);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: \"ID\",\r\n      width: \"60px\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Shop Logo\",\r\n      width: \"120px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <>\r\n          <img\r\n            height=\"90px\"\r\n            width=\"75px\"\r\n            alt={row.owner_name}\r\n            src={\r\n              row.shop_logo === \"\" || row.shop_logo === \"no image\"\r\n                ? \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png\"\r\n                : row.shop_logo\r\n            }\r\n            style={{\r\n              borderRadius: 10,\r\n              paddingTop: 10,\r\n              paddingBottom: 10,\r\n              textAlign: \"right\",\r\n            }}\r\n            onClick={() => handleClick()}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Shop Name\",\r\n      width: \"120px\",\r\n      selector: (row) => (\r\n        <p className=\"m-0\">\r\n          {row.shop_name}\r\n          <br />\r\n          <b>Profile:</b>{\" \"}\r\n          {row.id == null ||\r\n            row.owner_name == null ||\r\n            row.shop_name == null ||\r\n            row.mobile == null ||\r\n            row.email == null ||\r\n            row.shop_address == null ||\r\n            row.gstn == null ||\r\n            row.geolocation == null ||\r\n            row.store_type == null ||\r\n            row.document_name == null ||\r\n            row.social_media_links == null ||\r\n            row.shop_logo == null ? (\r\n            <span className=\"text-danger\">\r\n              <b>Not Complete</b>\r\n            </span>\r\n          ) : (\r\n            <span className=\"text-success\">\r\n              <b>Complete</b>\r\n            </span>\r\n          )}\r\n        </p>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Owner Name\",\r\n      selector: (row) => row.owner_name,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Store Type\",\r\n      selector: (row) => row.store_type,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Address\",\r\n      selector: (row) => row.shop_address,\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Contact\",\r\n      selector: (row) => row.mobile,\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <span\r\n          className={\r\n            row.status === \"pending\"\r\n              ? \"badge bg-warning\"\r\n              : row.status === \"approved\"\r\n                ? \"badge bg-success\"\r\n                : row.status === \"blocked\"\r\n                  ? \"badge bg-danger\"\r\n                  : row.status === \"in progress\"\r\n                    ? \"badge bg-primary\"\r\n                    : row.status === \"incomplete\"\r\n                      ? \"badge bg-info\"\r\n                      : row.status === \"return\"\r\n                        ? \"badge bg-secondary\"\r\n                        : \"badge bg-dark\"\r\n          }\r\n        >\r\n          {row.status === \"pending\"\r\n            ? \"Pending\"\r\n            : row.status === \"approved\"\r\n              ? \"Approved\"\r\n              : row.status === \"blocked\"\r\n                ? \"Blocked\"\r\n                : row.status === \"in progress\"\r\n                  ? \"In Progress\"\r\n                  : row.status === \"incomplete\"\r\n                    ? \"In Complete\"\r\n                    : row.status === \"return\"\r\n                      ? \"Return\"\r\n                      : \"return\"}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Change Status\",\r\n      selector: (row) => (\r\n        <Form.Group className=\"\" controlId=\"formBasicEmail\">\r\n          <Form.Select\r\n            size=\"sm\"\r\n            aria-label=\"Search By status\"\r\n            onChange={(e) => handleStatusChnage(e, row.id)}\r\n            name=\"status\"\r\n            value={row.status}\r\n          >\r\n            <option value={\"\"}>Status</option>\r\n            {(status.vendorestatus || []).map((data, i) => {\r\n              return (\r\n                <option value={data} key={i}>\r\n                  {\" \"}\r\n                  {data}\r\n                </option>\r\n              );\r\n            })}\r\n          </Form.Select>\r\n        </Form.Group>\r\n      ),\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n\r\n    {\r\n      name: \"Add Docs\",\r\n      selector: (row) => (\r\n        <Button size=\"sm\" onClick={handleDocsShow.bind(this, row.id)}>\r\n          Add Docs\r\n        </Button>\r\n        // : null\r\n        /*: null*/\r\n        /*: null*/\r\n        /*: null*/\r\n        /*: null*/\r\n        /*: null*/\r\n        /*: null*/\r\n       /*: null*/),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"ACTION\",\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/vendors`,\r\n        {\r\n          vendor_id: \"all\",\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setvendordata(response.data);\r\n        setLoading(false);\r\n        setapicall(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }, [apicall]);\r\n\r\n  useEffect(() => {\r\n    setaddvendordata({\r\n      ...addvendordata,\r\n      document_name: Docnamearray,\r\n    });\r\n  }, [Docnamearray]);\r\n  console.log(\"SHOWWW+\" + Docnamearray)\r\n  const handleFormChange = (e) => {\r\n    setCustomValidation(false);\r\n    setaddvendordata({\r\n      ...addvendordata,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  const handleClose = (e) => {\r\n    // formRef.current.reset();\r\n    // e.preventDefault();\r\n\r\n    // setLoading(false);\r\n    setCustomValidation(false);\r\n    setSocialLink(false);\r\n    setcustomarray([]);\r\n    setAddTagError(\"\");\r\n    setaddtag(\"\");\r\n    setaddvendordata(vendorObject);\r\n    setDocnameArray(\"\");\r\n    setapicall(true);\r\n    setShow(false);\r\n  };\r\n\r\n  const handleShow = (e) => {\r\n    setLoading(false);\r\n    setCustomValidation(false);\r\n    setAddTagError(\"\");\r\n    setaddtag(\"\");\r\n    setDocnameArray(\"\");\r\n\r\n    if (e === \"add\") {\r\n      setShow(e);\r\n    }\r\n    if (e !== \"add\") {\r\n      setCall(true);\r\n\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL}/vendors`,\r\n          {\r\n            vendor_id: e,\r\n            addvendordata,\r\n          },\r\n          {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setaddvendordata(response.data[0]);\r\n\r\n          setFile(\"\");\r\n          setFileName(\"\");\r\n\r\n          setcustomarray(response.data[0].social_media_links);\r\n          let strCopy = response.data[0].document_name.split(\",\");\r\n          console.log(\"\" + strCopy)\r\n          setDocnameArray(strCopy);\r\n          setapicall(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      setShow(e);\r\n    }\r\n  };\r\n\r\n  const onDocumentNamechange = (e) => {\r\n    setaddtag(e.target.value);\r\n  };\r\n  const onDocuAddclick = (e) => {\r\n    if (addtag === \"\") {\r\n      setAddTagError(\"addTagErorrr\");\r\n    } else {\r\n      setDocnameArray((Docnamearray) => [...Docnamearray, addtag]);\r\n      setaddtag(\"\");\r\n      setAddTagError(\"\");\r\n    }\r\n  };\r\n  // const CreateTimeout = () => {\r\n  //   setCondition(false);\r\n  // };\r\n\r\n  const DocuRemoveClick = (e) => {\r\n    setDocnameArray(Docnamearray.filter((item) => item !== e));\r\n  };\r\n  // const handleAlert = () => setAlert(true);\r\n  const hideAlert = () => setAlert(false);\r\n\r\n  const handleStatusChnage = (e, id) => {\r\n    setchangstatus(e.target.value);\r\n    // setTimeout(CreateTimeout, 50000);\r\n    setLoading(true);\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL_0}/vendor_status_change`,\r\n        {\r\n          status_change: e.target.value,\r\n          id: `${id}`,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        // setLoading(false);\r\n        // setapicall(true);\r\n        if (\r\n          response.data.status_message === \"vendor status change succesfully \"\r\n        ) {\r\n          setLoading(false);\r\n          setapicall(true);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const ImgFormChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n    setFileName(e.target.files[0].name);\r\n  };\r\n  imgvalidate = fileName.split(\".\").pop();\r\n\r\n  //img code start-----------------------------------------------------------------------------------------------\r\n\r\n  const handleDocsShow = (id) => {\r\n    setVendorId(id);\r\n    setDocsShow(true);\r\n    onImgView(id);\r\n  };\r\n  const handleDocsClose = (e) => {\r\n    e.preventDefault();\r\n    setDocsShow(false);\r\n  };\r\n\r\n  const convertToBase64 = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      const { name } = file;\r\n      fileReader.addEventListener(\"load\", () => {\r\n        resolve({ name: name, base64: fileReader.result });\r\n      });\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    });\r\n  };\r\n\r\n  const imguploadchange = async (e) => {\r\n    if (e.target.files.length <= 5) {\r\n      // e.preventDefault()\r\n\r\n      for (let i = 0; i < e.target.files.length; i++) {\r\n        encoded = await convertToBase64(e.target.files[i]);\r\n\r\n        const [first, ...rest] = encoded.base64.split(\",\");\r\n        const [nameimg, ext] = encoded.name.split(\".\");\r\n        console.log(first, nameimg)\r\n        const vendorimg = rest.join(\"-\");\r\n        let imar = {\r\n          vendor_id: `${vendorID}`,\r\n          documents_name: `${encoded.name}${i}${vendorID}`,\r\n          documents_position: `position${i}`,\r\n          type_of_file: `${ext}`,\r\n          img_64: vendorimg,\r\n        };\r\n        if (\r\n          ext === \"jpeg\" ||\r\n          ext === \"jpg\" ||\r\n          ext === \"png\" ||\r\n          ext === \"pdf\" ||\r\n          ext === \"\"\r\n        ) {\r\n          ImgObj.push(imar);\r\n        } else {\r\n          setDocerror(\"This image / document is not accetable\");\r\n        }\r\n      }\r\n\r\n      if (newImageUrls.length <= 5) {\r\n        axios\r\n          .post(\r\n            `${process.env.REACT_APP_BASEURL_0}/vendor_documents_upload`,\r\n            ImgObj, {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n          )\r\n          .then((response) => {\r\n            onImgView(vendorID);\r\n            setDocerror(\"\");\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        alert(\"Cannot More than 6 picss\");\r\n      }\r\n    } else {\r\n      alert(\"Cannot More than 6 pics\");\r\n    }\r\n  };\r\n\r\n  const onImgRemove = (id, vendor_id) => {\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/vendor_document_delete`, {\r\n        vendor_doc_id: `${id}`,\r\n        vendor_id: `${vendor_id}`,\r\n      })\r\n      .then((response) => {\r\n        onImgView(vendor_id);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const onImgView = (vendorID) => {\r\n    axios\r\n      .get(\r\n        `${process.env.REACT_APP_BASEURL_0}/vendor_documents_get?vendor_id=${vendorID}`, {\r\n        headers: { admin_token: `${token}` },\r\n      }\r\n      )\r\n      .then((response) => {\r\n        setnewImageUrls(response.data);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  //img code end-------------------------------------------------------------------------------------------------\r\n\r\n  // let returnarr = [];\r\n  // social media link\r\n  const oncustomheadChange = (e) => {\r\n    setSocialLink(false);\r\n    setheaderval(e.target.value);\r\n  };\r\n\r\n  const oncustomdescChange = (e) => {\r\n    setSocialLink(false);\r\n    setdescval(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (headerval !== \"\" && descval !== \"\") {\r\n      setcustomarray((customarray) => [...customarray, AddCustom]);\r\n      setheaderval(\"\");\r\n      setdescval(\"\");\r\n      setAddCustom(\"\");\r\n      // setcustomValidated(false);\r\n      setsCall(false);\r\n    }\r\n  }, [scall]);\r\n\r\n  // }\r\n\r\n  const handleAddClick = (e) => {\r\n    if (headerval === \"\") {\r\n      setSocialLink(\"HeaderBlank\");\r\n    } else if (descval === \"\") {\r\n      setSocialLink(\"DesBlank\");\r\n    } else {\r\n      let returnedTarget = Object.assign({}, { [headerval]: descval });\r\n      setAddCustom(...AddCustom, returnedTarget);\r\n      setsCall(true);\r\n    }\r\n  };\r\n\r\n  const handleRemoveClick = (e) => {\r\n    setcustomarray(customarray.filter((item) => item !== e));\r\n  };\r\n  useEffect(() => {\r\n    setaddvendordata({\r\n      ...addvendordata,\r\n      testjson: customarray,\r\n    });\r\n  }, [customarray]);\r\n\r\n  // end social media link\r\n\r\n  // let shoplogo = `${process.env.REACT_APP_BASEURL}/${addvendordata.shop_logo}`;\r\n  const handleClick = () => { };\r\n\r\n  const AddVendorClick = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (addvendordata.owner_name === \"\") {\r\n      setCustomValidation(\"ownernameEmpty\");\r\n    } else if (addvendordata.shop_name === \"\") {\r\n      setCustomValidation(\"shopnameEmpty\");\r\n    } else if (addvendordata.mobile === \"\") {\r\n      setCustomValidation(\"MobileEmpty\");\r\n    } else if (\r\n      addvendordata.mobile.length > 10 ||\r\n      addvendordata.mobile.length < 10\r\n    ) {\r\n      setCustomValidation(\"10number\");\r\n    } else if (addvendordata.email === \"\") {\r\n      // var regex = /^([a-zA-Z0-9_.+-])+(([a-zA-Z0-9-])+\\.)+([a-zA-Z]{2,4})+$/;\r\n      var rst = /\\S+@\\S+\\.\\S+/.test(addvendordata.email);\r\n      if (rst !== true) {\r\n        setCustomValidation(\"EmailEmpty\");\r\n      }\r\n      setCustomValidation(\"EmailEmpty\");\r\n    } else if (addvendordata.shop_address === \"\") {\r\n      setCustomValidation(\"ShopAddressEmpty\");\r\n    } else if (addvendordata.gstn === \"\") {\r\n      setCustomValidation(\"GSTEmpty\");\r\n    } else if (addvendordata.store_type === \"\") {\r\n      setCustomValidation(\"storeTypeEmpty\");\r\n    } else if (addvendordata.geolocation === \"\") {\r\n      setCustomValidation(\"GeolocationEmpty\");\r\n    } else if (\r\n      imgvalidate === \"jpg\" ||\r\n      imgvalidate === \"jpeg\" ||\r\n      imgvalidate === \"png\" ||\r\n      imgvalidate === \"\"\r\n    ) {\r\n      e.preventDefault();\r\n      setLoading(true);\r\n      const formData = new FormData();\r\n      let x = [addvendordata.document_name];\r\n      let socialname = addvendordata.testjson;\r\n      let socialname_new = JSON.stringify(socialname);\r\n\r\n      formData.append(\"image\", file);\r\n      formData.append(\"filename\", fileName);\r\n      formData.append(\"owner_name\", addvendordata.owner_name);\r\n      formData.append(\"shop_name\", addvendordata.shop_name);\r\n      formData.append(\"mobile\", addvendordata.mobile);\r\n      formData.append(\"email\", addvendordata.email);\r\n      formData.append(\"shop_address\", addvendordata.shop_address);\r\n      formData.append(\"gstn\", addvendordata.gstn);\r\n      formData.append(\"geolocation\", addvendordata.geolocation);\r\n      formData.append(\"store_type\", addvendordata.store_type);\r\n      formData.append(\"availability\", addvendordata.availability);\r\n      formData.append(\"document_name\", x);\r\n      formData.append(\"status\", addvendordata.status);\r\n      formData.append(\"social_media_links\", socialname_new);\r\n\r\n      axios\r\n        .post(`${process.env.REACT_APP_BASEURL}/vendor_register`, formData, {\r\n          headers: {\r\n            admin_token: admintoken,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          if (response.data.message === \"vendor already exist\") {\r\n            setCustomValidation(\"alreadyexist\");\r\n            setLoading(false);\r\n          } else if (\r\n            response.data.message === \"Sent mail to super_admin Succesfully\"\r\n          ) {\r\n            setapicall(true);\r\n            setShow(false);\r\n            setAddAlert(true);\r\n            setLoading(false);\r\n            setaddvendordata(vendorObject);\r\n            setCustomValidation(false);\r\n            setcustomarray([]);\r\n            setAddTagError(\"\");\r\n            setaddtag(\"\");\r\n\r\n            setDocnameArray(\"\");\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          setLoading(false);\r\n          setErrorAddAlert(true);\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      setCustomValidation(\"imgformat\");\r\n\r\n      // formRef.current.reset();\r\n    }\r\n\r\n    // }\r\n  };\r\n\r\n  const UpdateVendorClick = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (addvendordata.owner_name === \"\" || addvendordata.owner_name === null) {\r\n      setCustomValidation(\"ownernameEmpty\");\r\n    } else if (\r\n      addvendordata.shop_name === \"\" ||\r\n      addvendordata.shop_name === null\r\n    ) {\r\n      setCustomValidation(\"shopnameEmpty\");\r\n    } else if (addvendordata.mobile === \"\" || addvendordata.mobile === null) {\r\n      setCustomValidation(\"MobileEmpty\");\r\n    } else if (\r\n      addvendordata.mobile.length > 10 ||\r\n      addvendordata.mobile.length < 10\r\n    ) {\r\n      setCustomValidation(\"10number\");\r\n    } else if (addvendordata.email === \"\" || addvendordata.email === null) {\r\n      // var regex = /^([a-zA-Z0-9_.+-])+(([a-zA-Z0-9-])+\\.)+([a-zA-Z]{2,4})+$/;\r\n      // /\\S+@\\S+\\.\\S+/.test(value)\r\n\r\n\r\n      var rst = /\\S+@\\S+\\.\\S+/.test(addvendordata.email);\r\n      if (rst !== true) {\r\n        setCustomValidation(\"EmailEmpty\");\r\n      }\r\n      setCustomValidation(\"EmailEmpty\");\r\n    } else if (\r\n      addvendordata.shop_address === \"\" ||\r\n      addvendordata.shop_address === null\r\n    ) {\r\n      setCustomValidation(\"ShopAddressEmpty\");\r\n    } else if (addvendordata.gstn === \"\" || addvendordata.gstn === null) {\r\n      setCustomValidation(\"GSTEmpty\");\r\n    } else if (\r\n      addvendordata.store_type === \"\" ||\r\n      addvendordata.store_type === null\r\n    ) {\r\n      setCustomValidation(\"storeTypeEmpty\");\r\n    } else if (\r\n      addvendordata.geolocation === \"\" ||\r\n      addvendordata.geolocation === null\r\n    ) {\r\n      setCustomValidation(\"GeolocationEmpty\");\r\n    } else if (\r\n      imgvalidate === \"jpg\" ||\r\n      imgvalidate === \"jpeg\" ||\r\n      imgvalidate === \"png\" ||\r\n      imgvalidate === \"\"\r\n    ) {\r\n      setLoading(true);\r\n      let x = [addvendordata.document_name];\r\n\r\n      const formData = new FormData();\r\n\r\n      let socialname = addvendordata.testjson;\r\n      let socialname_new = JSON.stringify(socialname);\r\n      formData.append(\"vendor_id\", addvendordata.id);\r\n      formData.append(\"image\", file);\r\n      formData.append(\"filename\", fileName);\r\n      formData.append(\"owner_name\", addvendordata.owner_name);\r\n      formData.append(\"shop_name\", addvendordata.shop_name);\r\n      formData.append(\"mobile\", addvendordata.mobile);\r\n      formData.append(\"email\", addvendordata.email);\r\n      formData.append(\"shop_address\", addvendordata.shop_address);\r\n      formData.append(\"gstn\", addvendordata.gstn);\r\n      formData.append(\"geolocation\", addvendordata.geolocation);\r\n      formData.append(\"store_type\", addvendordata.store_type);\r\n      formData.append(\"availability\", addvendordata.availability);\r\n      formData.append(\"document_name\", x);\r\n      formData.append(\"status\", \"active\");\r\n      formData.append(\"social_media_links\", socialname_new);\r\n\r\n      axios\r\n        .put(`${process.env.REACT_APP_BASEURL_0}/vendor_update`, formData, {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          let data = response.data;\r\n          if (data.response === \"header error\") {\r\n            setLoading(false);\r\n          } else if (response.data.message === \"Updated Vendor Profile\") {\r\n            setUpdateAlert(true);\r\n            setLoading(false);\r\n            setapicall(true);\r\n            setShow(false);\r\n            setaddvendordata(vendorObject);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          setErrorUpdateAlert(true);\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      setCustomValidation(\"imgformat\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n      <div>\r\n        <h2>Vendors List</h2>\r\n\r\n        {/* search bar */}\r\n        <div className=\"card p-3\">\r\n          <div className=\"row page_searchbox\">\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <input\r\n                type={\"text\"}\r\n                placeholder={\"Search by Owner Name\"}\r\n                onChange={OnSearchChange}\r\n                name=\"owner_name\"\r\n                value={searchdata.owner_name}\r\n                className={\"adminsideinput\"}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by Status\"\r\n                className=\"adminselectbox\"\r\n                onChange={OnSearchChange}\r\n                name=\"status\"\r\n                value={searchdata.status}\r\n              >\r\n                <option value={\"\"}>Status</option>\r\n                {(status.vendorestatus || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data} key={i}>\r\n                      {\" \"}\r\n                      {data}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by Store Type\"\r\n                className=\"adminselectbox\"\r\n                onChange={OnSearchChange}\r\n                name=\"store_type\"\r\n                value={searchdata.store_type}\r\n              >\r\n                <option value={\"\"}>Store Type</option>\r\n                {(storetype.storetype || []).map((data, i) => {\r\n                  return (\r\n                    <option key={i} value={data}>\r\n                      {data}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <button\r\n                className=\"button main_button w-100\"\r\n                onClick={() => onSearchClick()}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mt-2\">\r\n              <button\r\n                className=\"button main_button w-100\"\r\n                onClick={() => OnReset()}\r\n              >\r\n                Reset\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"product_page_uploadbox my-4\">\r\n            <button\r\n              className=\"button main_button ml-auto\"\r\n              onClick={() => handleShow(\"add\")}\r\n            >\r\n              Add New Shop\r\n            </button>\r\n          </div>\r\n          <DataTable\r\n            columns={columns}\r\n            className=\"main_data_table\"\r\n            data={vendordata}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n          />\r\n          <SAlert\r\n            show={Alert}\r\n            title=\"Vender\"\r\n            text=\"Are you Sure you want to delete\"\r\n            onConfirm={hideAlert}\r\n            showCancelButton={true}\r\n            onCancel={hideAlert}\r\n          />\r\n        </div>\r\n        <Modal size=\"lg\" show={show} onHide={() => handleClose()}>\r\n          {loading === true ? (\r\n            <Loader />\r\n          ) : (\r\n            <Form\r\n              className=\"\"\r\n              // noValidate\r\n              // validated={validated}\r\n              // ref={formRef}\r\n              onSubmit={\r\n                show === \"add\"\r\n                  ? (e) => AddVendorClick(e)\r\n                  : (e) => UpdateVendorClick(e)\r\n              }\r\n            >\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                  {show === \"add\" ? \"Add New Vendor \" : \" Update Vendor \"}\r\n                </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div className=\"row p-3 m-0\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>\r\n                        Owner Name <span className=\"text-danger\">* </span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        value={addvendordata.owner_name}\r\n                        // required\r\n                        type=\"text\"\r\n                        placeholder=\"Owner Name\"\r\n                        name={\"owner_name\"}\r\n                      />\r\n                      {customValidation === \"ownernameEmpty\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Please fill the Owner{\" \"}\r\n                        </span>\r\n                      ) : customValidation === false ? (\r\n                        \"\"\r\n                      ) : null}\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>\r\n                        Shop Name <span className=\"text-danger\">* </span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        value={addvendordata.shop_name}\r\n                        // required\r\n                        type=\"text\"\r\n                        placeholder=\"Shop Name\"\r\n                        name={\"shop_name\"}\r\n                      />\r\n                      {customValidation === \"shopnameEmpty\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Please fill the Shop name\r\n                        </span>\r\n                      ) : customValidation === false ? (\r\n                        \"\"\r\n                      ) : null}\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>\r\n                        Mobile <span className=\"text-danger\">* </span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        value={addvendordata.mobile}\r\n                        // required\r\n                        type=\"number\"\r\n                        // min={1}\r\n                        placeholder=\"Mobile\"\r\n                        name={\"mobile\"}\r\n                      // maxLength={10}\r\n                      // minLength={10}\r\n                      />\r\n                      {customValidation === \"MobileEmpty\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Please fill the Mobile{\" \"}\r\n                        </span>\r\n                      ) : customValidation === \"10number\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Mobile Number should not be greater then 10 and less\r\n                          than 10{\" \"}\r\n                        </span>\r\n                      ) : customValidation === false ? (\r\n                        \"\"\r\n                      ) : null}\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>\r\n                        Email <span className=\"text-danger\">* </span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        value={addvendordata.email}\r\n                        // required\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        disabled={show === \"add\" ? false : true}\r\n                        name={\"email\"}\r\n                      />\r\n                      {/* {customValidation === \"alreadyexist\" ? (\r\n                    <p className=\"text-danger mx-2\">\r\n                      {\"Vendore Already Exist\"}\r\n                    </p>\r\n                  ) : null} */}\r\n\r\n                      {customValidation === \"EmailEmpty\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Please fill the Email and valid email\r\n                        </span>\r\n                      ) : customValidation === \"alreadyexist\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Vendore Already Exist\r\n                        </span>\r\n                      ) : null}\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>\r\n                        Shop Address <span className=\"text-danger\">* </span>{\" \"}\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        className=\"vendor_address\"\r\n                        as=\"textarea\"\r\n                        rows={3}\r\n                        id={\"address\"}\r\n                        placeholder=\"Address\"\r\n                        name={\"shop_address\"}\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        value={addvendordata.shop_address}\r\n                        // required\r\n                        maxLength={100}\r\n                      />\r\n                      {customValidation === \"ShopAddressEmpty\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Please fill the Shop Address{\" \"}\r\n                        </span>\r\n                      ) : customValidation === false ? (\r\n                        \"\"\r\n                      ) : null}\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>\r\n                        GSTN <span className=\"text-danger\">* </span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        value={addvendordata.gstn}\r\n                        // required\r\n                        type=\"text\"\r\n                        placeholder=\"GSTN\"\r\n                        name={\"gstn\"}\r\n                      />\r\n                      {customValidation === \"GSTEmpty\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Please fill the GST NO.{\" \"}\r\n                        </span>\r\n                      ) : customValidation === false ? (\r\n                        \"\"\r\n                      ) : null}\r\n                    </Form.Group>\r\n                  </div>\r\n\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>Avaliable</Form.Label>\r\n                      <Form.Select\r\n                        size=\"sm\"\r\n                        aria-label=\"Default select example\"\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        name=\"availability\"\r\n                      >\r\n                        <option\r\n                          value=\"\"\r\n                          selected={\r\n                            addvendordata.availability === \"\" ? true : false\r\n                          }\r\n                        >\r\n                          Select\r\n                        </option>\r\n                        <option\r\n                          value=\"close\"\r\n                          selected={\r\n                            addvendordata.availability === \"close\"\r\n                              ? true\r\n                              : false\r\n                          }\r\n                        >\r\n                          close\r\n                        </option>\r\n                        <option\r\n                          value=\"update\"\r\n                          selected={\r\n                            addvendordata.availability === \"update\"\r\n                              ? true\r\n                              : false\r\n                          }\r\n                        >\r\n                          update\r\n                        </option>\r\n                        <option\r\n                          value=\"block\"\r\n                          selected={\r\n                            addvendordata.availability === \"block\"\r\n                              ? true\r\n                              : false\r\n                          }\r\n                        >\r\n                          Block\r\n                        </option>\r\n                        <option\r\n                          value=\"delete\"\r\n                          selected={\r\n                            addvendordata.availability === \"delete\"\r\n                              ? true\r\n                              : false\r\n                          }\r\n                        >\r\n                          Delete\r\n                        </option>\r\n                      </Form.Select>\r\n                      {/* <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill gstn\r\n                  </Form.Control.Feedback> */}\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>\r\n                        Store Type <span className=\"text-danger\">* </span>\r\n                      </Form.Label>\r\n                      <Form.Select\r\n                        // required\r\n                        size=\"sm\"\r\n                        aria-label=\"Default select example\"\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        name=\"store_type\"\r\n                        value={addvendordata.store_type}\r\n                      >\r\n                        <option\r\n                          value=\"\"\r\n                          selected={\r\n                            addvendordata.store_type === \"\" ? true : false\r\n                          }\r\n                        >\r\n                          Select\r\n                        </option>\r\n                        {(storetype.storetype || []).map((data, i) => {\r\n                          return (\r\n                            <option key={i} value={data}>\r\n                              {data}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </Form.Select>\r\n                      {customValidation === \"storeTypeEmpty\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Please fill the Store type...\r\n                        </span>\r\n                      ) : customValidation === false ? (\r\n                        \"\"\r\n                      ) : null}\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>\r\n                        Geolocation <span className=\"text-danger\">* </span>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        // required\r\n                        type=\"location\"\r\n                        placeholder=\"Geolocation\"\r\n                        name={\"geolocation\"}\r\n                        value={addvendordata.geolocation}\r\n                      />\r\n                      {customValidation === \"GeolocationEmpty\" ? (\r\n                        <span className=\"text-danger\">\r\n                          Please fill the Location{\" \"}\r\n                        </span>\r\n                      ) : customValidation === false ? (\r\n                        \"\"\r\n                      ) : null}\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group className=\"mb-3 aos_input\">\r\n                      <Form.Label>Document Name</Form.Label>\r\n                      <InputGroup className=\"\" size=\"sm\">\r\n                        <Form.Control\r\n                          onChange={(e) => onDocumentNamechange(e)}\r\n                          value={addtag}\r\n                          placeholder=\"document_name\"\r\n                          name={\"document_name\"}\r\n                          onClick={(event) => {\r\n                            if (event.key === \"Enter\") {\r\n                              onDocuAddclick();\r\n                            }\r\n                          }}\r\n                        />{\" \"}\r\n                        <Button\r\n                          variant=\"outline-success\"\r\n                          className=\"addcategoryicon\"\r\n                          onClick={() => onDocuAddclick()}\r\n                          size=\"sm\"\r\n                        >\r\n                          +\r\n                        </Button>\r\n                        {AddtagError === \"addTagErorrr\" ? (\r\n                          <span className=\"text-danger\">\r\n                            Please Add Document first...!!!\r\n                          </span>\r\n                        ) : null}\r\n                      </InputGroup>\r\n\r\n                      {Docnamearray === undefined ||\r\n                        Docnamearray === null ||\r\n                        Docnamearray === \"\" ||\r\n                        Docnamearray.length === 0 ? null : (\r\n                        <div className=\"d-flex align-items-center tagselectbox mt-2\">\r\n                          {(Docnamearray || []).map((seotags, i) => {\r\n                            return (\r\n                              <>\r\n                                {seotags === '\"\"' ? null : (\r\n                                  <Badge\r\n                                    className=\"tagselecttitle mb-0\"\r\n                                    bg=\"success\"\r\n                                  >\r\n                                    {seotags === null ||\r\n                                      seotags === undefined ||\r\n                                      seotags === '\"\"'\r\n                                      ? null\r\n                                      : seotags}\r\n\r\n                                    <GiCancel\r\n                                      className=\" mx-0 ms-1 btncancel\"\r\n                                      onClick={() => DocuRemoveClick(seotags)}\r\n                                    />\r\n                                  </Badge>\r\n                                )}\r\n                              </>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      )}\r\n                    </Form.Group>\r\n                  </div>\r\n\r\n                  {/* social media links -------------------------------------------------------------------------*/}\r\n\r\n                  <div className=\"my-3 inputsection_box\">\r\n                    <h5 className=\"m-0\">Add Social Media Link</h5>\r\n                    <div className=\" mt-0 mb-3\">\r\n                      <Table className=\"align-middle\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th>Social Media</th>\r\n                            <th>Link</th>\r\n                            <th></th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr>\r\n                            <td className=\"text-center col-4\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  value={headerval}\r\n                                  type=\"text\"\r\n                                  sm=\"9\"\r\n                                  min={\"1\"}\r\n                                  onChange={oncustomheadChange}\r\n                                  name={\"header\"}\r\n                                />\r\n                              </InputGroup>\r\n                            </td>\r\n                            <td className=\"col-4\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  value={descval}\r\n                                  name={\"description\"}\r\n                                  type=\"text\"\r\n                                  sm=\"9\"\r\n                                  min={\"1\"}\r\n                                  onChange={oncustomdescChange}\r\n                                  onKeyPress={(event) => {\r\n                                    if (event.key === \"Enter\") {\r\n                                      handleAddClick();\r\n                                    }\r\n                                  }}\r\n                                />\r\n                              </InputGroup>\r\n                            </td>\r\n                            <td className=\"\">\r\n                              <Button\r\n                                variant=\"outline-success\"\r\n                                className=\"addcategoryicon\"\r\n                                onClick={() => handleAddClick()}\r\n                                size=\"sm\"\r\n                              >\r\n                                +\r\n                              </Button>\r\n                            </td>\r\n                          </tr>\r\n                          <tr>\r\n                            <td>\r\n                              {SocialLink === \"HeaderBlank\" ? (\r\n                                <span className=\"text-danger\">\r\n                                  {\" \"}\r\n                                  Please Fill ..!!{\" \"}\r\n                                </span>\r\n                              ) : SocialLink === false ? (\r\n                                \"\"\r\n                              ) : null}\r\n                            </td>\r\n                            <td>\r\n                              {\" \"}\r\n                              {SocialLink === \"DesBlank\" ? (\r\n                                <span className=\"text-danger\">\r\n                                  {\" \"}\r\n                                  Please Fill..!!{\" \"}\r\n                                </span>\r\n                              ) : SocialLink === false ? (\r\n                                \"\"\r\n                              ) : null}\r\n                            </td>\r\n                          </tr>\r\n                          {customarray\r\n                            ? (customarray || []).map((variantdata, i) => {\r\n                              let v = JSON.stringify(variantdata);\r\n\r\n                              let st = v.split(\":\");\r\n                              let pro = st[0].replace(/[{}]/g, \"\");\r\n                              let link = st[1].replace(/[{}]/g, \"\");\r\n\r\n                              return (\r\n                                <tr className=\"\">\r\n                                  <td className=\" text-center\">\r\n                                    <InputGroup className=\"\">\r\n                                      <Form.Control\r\n                                        value={JSON.parse(pro)}\r\n                                        type=\"text\"\r\n                                        sm=\"9\"\r\n                                        min={\"1\"}\r\n                                        onChange={oncustomheadChange}\r\n                                        name={\"custom_input_header\"}\r\n                                        required\r\n                                      />\r\n                                    </InputGroup>\r\n                                  </td>\r\n                                  <td className=\"text-center\">\r\n                                    <InputGroup className=\"\">\r\n                                      <Form.Control\r\n                                        required\r\n                                        value={JSON.parse(link)}\r\n                                        name={\"custom_input_desc\"}\r\n                                        type=\"text\"\r\n                                        sm=\"9\"\r\n                                        min={\"1\"}\r\n                                        onChange={oncustomdescChange}\r\n                                        onKeyPress={(event) => {\r\n                                          if (event.key === \"Enter\") {\r\n                                            handleAddClick();\r\n                                          }\r\n                                        }}\r\n                                      />\r\n                                    </InputGroup>\r\n                                  </td>\r\n                                  <td className=\"\">\r\n                                    <Button\r\n                                      variant=\"text-danger\"\r\n                                      className=\"addcategoryicon text-danger\"\r\n                                      onClick={() =>\r\n                                        handleRemoveClick(variantdata)\r\n                                      }\r\n                                      size=\"sm\"\r\n                                    >\r\n                                      &times;\r\n                                    </Button>\r\n                                  </td>\r\n                                </tr>\r\n                              );\r\n                            })\r\n                            : null}\r\n                        </tbody>\r\n                      </Table>\r\n                    </div>\r\n                    {/* );\r\n                })} */}\r\n                    {/* --------------------------------------------- */}\r\n                  </div>\r\n                  {/* end social media link */}\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group\r\n                      className=\"mb-3 aos_input\"\r\n                      controlId=\"validationCustom08\"\r\n                    >\r\n                      <Form.Label>\r\n                        Shop Logo <b>(In .jpg, .jpeg, .png format)</b>\r\n                      </Form.Label>\r\n                      <Form.Control\r\n                        onChange={(e) => ImgFormChange(e)}\r\n                        type=\"file\"\r\n                        placeholder=\"Shop_logo\"\r\n                        name={\"shop_logo\"}\r\n                        accept=\".png, .jpg, .jpeg\"\r\n                      />\r\n                      {customValidation === \"imgformat\" ? (\r\n                        <p className=\"text-danger mx-2\">\r\n                          {\"Please Select Correct Image Format\"}\r\n                        </p>\r\n                      ) : null}\r\n\r\n                      {addvendordata.shop_logo ? (\r\n                        <img\r\n                          src={addvendordata.shop_logo}\r\n                          alt=\"newimg\"\r\n                          width={\"50px\"}\r\n                        />\r\n                      ) : null}\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please upload document\r\n                      </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button\r\n                  className=\"button main_outline_button\"\r\n                  onClick={() => handleClose()}\r\n                >\r\n                  Cancel\r\n                </button>\r\n\r\n                <Iconbutton\r\n                  type={\"submit\"}\r\n                  btntext={show === \"add\" ? \"Add Vendor\" : \"Update Vendor\"}\r\n                  // onClick={(show === 'add' ? AddVendorClick : UpdateVendorClick(show))}\r\n                  btnclass={\"button main_button \"}\r\n                />\r\n              </Modal.Footer>\r\n            </Form>\r\n          )}\r\n        </Modal>\r\n\r\n        {/*   Add Docs model */}\r\n\r\n        <Modal\r\n          size=\"lg\"\r\n          show={docsshow}\r\n          onHide={(e) => {\r\n            handleDocsClose(e);\r\n          }}\r\n        >\r\n          <Form ref={formRef}>\r\n            <Modal.Header>\r\n              <Modal.Title>Add Images and Documents</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div className=\"row \">\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"validationCustom09\"\r\n                  >\r\n                    <Form.Label>\r\n                      Documents Upload (In .jpg, .jpeg, .png , .pdf format){\" \"}\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                      multiple\r\n                      type=\"file\"\r\n                      placeholder=\"multiple document upload\"\r\n                      name={\"img_64\"}\r\n                      accept=\"image/png,image/jpeg,image/jpg,document/pdf\"\r\n                      onChange={(e) => imguploadchange(e)}\r\n                    />\r\n                  </Form.Group>\r\n                  <small className=\"text-danger\">{docerror}</small>\r\n                </div>\r\n              </div>\r\n              <Table>\r\n                <tbody>\r\n                  {newImageUrls ? (\r\n                    <tr className=\"d-flex flex-wrap\">\r\n                      {newImageUrls.map((imgg, i) => {\r\n                        return (\r\n                          <td className=\"imgprivew_box\">\r\n                            <img\r\n                              src={imgg.documents_path}\r\n                              key={i}\r\n                              alt=\"apna_organic\"\r\n                              width={80}\r\n                              height={100}\r\n                            />\r\n                            <span\r\n                              className=\"cross_icon\"\r\n                              onClick={() =>\r\n                                onImgRemove(imgg.vendor_doc_id, imgg.vendor_id)\r\n                              }\r\n                            >\r\n                              X\r\n                            </span>\r\n                          </td>\r\n                        );\r\n                      })}\r\n                    </tr>\r\n                  ) : null}\r\n                </tbody>\r\n              </Table>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <button\r\n                className=\"button main_outline_button\"\r\n                onClick={(e) => handleDocsClose(e)}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal>\r\n\r\n        <SAlert\r\n          show={AddAlert}\r\n          title=\" Vender Added Successfully \"\r\n          onConfirm={closeAddAlert}\r\n        />\r\n        <SAlert\r\n          show={UpdateAlert}\r\n          title=\" Vender Updated Successfully \"\r\n          onConfirm={closeUpdateAlert}\r\n        />\r\n        <SAlert\r\n          show={ErrorUpdateAlert}\r\n          title=\" Vender Not Updated  \"\r\n          onConfirm={closeUpdateAlert}\r\n        />\r\n        <SAlert\r\n          show={ErrorAddAlert}\r\n          title=\" Vender Not Added...!!!  \"\r\n          onConfirm={closeUpdateAlert}\r\n        />\r\n\r\n        {/* /End add docs model/ */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VendorsList;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\invoice\\invoices.js",["454"],[],"import React, { useState, useMemo, useEffect } from \"react\";\r\n// import Input from \"../common/input\";\r\n// import { BsTrash } from \"react-icons/bs\";\r\n// import { BiEdit } from \"react-icons/bi\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\n// import SweetAlert from \"sweetalert-react\";\r\nimport \"sweetalert/dist/sweetalert.css\";\r\nimport FilterComponent from \"../common/FilterComponent\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst InvoiceList = () => {\r\n  const navigate = useNavigate();\r\n  // const handleAlert = () => setAlert(true);\r\n  // const hideAlert = () => setAlert(false);\r\n  // const [Alert, setAlert] = useState(false);\r\n  const [invoice, setInvoice] = useState([]);\r\n  let [searcherror, setsearcherror] = useState(false);\r\n  let [apicall, setapicall] = useState(false);\r\n  const [SearchInvo, setSearchInvo] = useState({\r\n    search: \"\",\r\n    from_date: \"\",\r\n    to_date: \"\",\r\n  });\r\n  let token = localStorage.getItem(\"token\");\r\n\r\n  const InvoiceCheck = (id) => {\r\n    localStorage.setItem(\"invoiceid\", id[1]);\r\n    localStorage.setItem(\"invoice_no\", id[0]);\r\n    if (id[0] === undefined || id[0] === \"\" || id[0] === null) {\r\n    } else {\r\n      navigate(\"/invoice_detail\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    function getInvoiceList() {\r\n      try {\r\n        axios\r\n          .get(`${process.env.REACT_APP_BASEURL}/invoice_list`, {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            let data = response.data;\r\n\r\n            setInvoice(data);\r\n            setapicall(false);\r\n          });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n\r\n    getInvoiceList();\r\n  }, [apicall]);\r\n\r\n  const onValueChange = (e) => {\r\n    setSearchInvo({ ...SearchInvo, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n  const onDateChange = (e) => {\r\n    let mdate = moment(e.target.value).format(\"YYYY-MM-DD\");\r\n    setSearchInvo({\r\n      ...SearchInvo,\r\n      [e.target.name]: mdate,\r\n    });\r\n    setsearcherror(false);\r\n  };\r\n  const SearchInvoices = () => {\r\n    if (\r\n      SearchInvo.search === \"\" &&\r\n      SearchInvo.from_date === \"\" &&\r\n      SearchInvo.to_date === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/invoice_search`,\r\n          {\r\n            search: \"\",\r\n            from_date: `${SearchInvo.from_date}`,\r\n            to_date: `${SearchInvo.to_date}`,\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setInvoice(response.data);\r\n          setSearchInvo({\r\n            search: \"\",\r\n            from_date: \"\",\r\n            to_date: \"\",\r\n          });\r\n          setsearcherror(false);\r\n        });\r\n    }\r\n  };\r\n  const columns = [\r\n    {\r\n      name: \"Order No.\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n      width: \"75px\",\r\n    },\r\n    {\r\n      name: \"Invoice Number\",\r\n      selector: (row) => (\r\n        <p onClick={InvoiceCheck.bind(this, [row.invoice_no, row.id])}>\r\n          {row.invoice_no}\r\n        </p>\r\n      ),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Vendor Id\",\r\n      selector: (row) => <p>{row.vendor_id}</p>,\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Invoice Date\",\r\n      selector: (row) => moment(row._date).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Order Date\",\r\n      selector: (row) => moment(row.order_date).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n      width: \"140px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Stock\",\r\n      selector: (row) => row.payment_mode,\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Quantity\",\r\n      selector: (row) => row.total_quantity,\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Tax\",\r\n      selector: (row) => Number(row.total_gst).toFixed(2),\r\n      sortable: true,\r\n      width: \"90px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Taxable Value\",\r\n      selector: (row) => Number(row.taxable_value).toFixed(2),\r\n      sortable: true,\r\n      width: \"90px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Discount/Coupon\",\r\n      selector: (row) => Number(row.discount_coupon_value).toFixed(2),\r\n      sortable: true,\r\n      width: \"120px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Total\",\r\n      selector: (row) => Number(row.total_amount).toFixed(2),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n  ];\r\n  const [filterText, setFilterText] = React.useState(\"\");\r\n  const [resetPaginationToggle, setResetPaginationToggle] = React.useState(\r\n    false\r\n  );\r\n  const subHeaderComponent = useMemo(() => {\r\n    const handleClear = () => {\r\n      if (filterText) {\r\n        setResetPaginationToggle(!resetPaginationToggle);\r\n        setFilterText(\"\");\r\n      }\r\n    };\r\n    return (\r\n      <FilterComponent\r\n        onFilter={(e) => setFilterText(e.target.value)}\r\n        onClear={handleClear}\r\n        filterText={filterText}\r\n      />\r\n    );\r\n  }, [filterText, resetPaginationToggle]);\r\n  //\r\n\r\n  /*<---Function to reset Search--->*/\r\n  const OnReset = () => {\r\n    setSearchInvo({ search: \"\", from_date: \"\", to_date: \"\" });\r\n\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n  let date = moment();\r\n  let currentDate = date.format(\"YYYY-MM-DD\");\r\n  return (\r\n    <div className=\"App productlist_maindiv\">\r\n      <h2>Invoice</h2>\r\n\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\"row pb-3\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input mb-2 \">\r\n            <input\r\n              className=\"adminsideinput\"\r\n              type={\"text\"}\r\n              placeholder=\"Search by order no.and vendor id\"\r\n              value={SearchInvo.search}\r\n              name={\"search\"}\r\n              onChange={(e) => onValueChange(e)}\r\n            />\r\n            {searcherror === true ? (\r\n              <small className=\"text-danger\">please fill the feild</small>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n            <input\r\n              type={\"date\"}\r\n              placeholder={\"Search by Order Date\"}\r\n              onChange={(e) => onDateChange(e)}\r\n              value={SearchInvo.from_date}\r\n              name={\"from_date\"}\r\n              className={\"adminsideinput\"}\r\n              max={currentDate}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n            <input\r\n              type={\"date\"}\r\n              min={SearchInvo.from_date}\r\n              placeholder={\"Search by Order End_Date\"}\r\n              onChange={(e) => onDateChange(e)}\r\n              value={SearchInvo.to_date}\r\n              name={\"to_date\"}\r\n              className={\"adminsideinput\"}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button w-100\"}\r\n              type=\"search\"\r\n              onClick={() => SearchInvoices()}\r\n            >\r\n              Search\r\n            </MainButton>\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input mb-2 mb-2 \">\r\n            <MainButton\r\n              btntext={\"Reset\"}\r\n              btnclass={\"button main_button w-100\"}\r\n              type=\"reset\"\r\n              onClick={OnReset}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* upload */}\r\n\r\n        {/* datatable */}\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={invoice}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body invoic_table\"}\r\n          subHeader\r\n          subHeaderComponent={subHeaderComponent}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default InvoiceList;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\invoice\\detail.js",["455"],[],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport jsPDF from \"jspdf\";\r\nimport html2canvas from \"html2canvas\";\r\nimport moment from \"moment\";\r\n\r\nconst Invoice = () => {\r\n  let invoice_no = localStorage.getItem(\"invoice_no\");\r\n  let order_number = localStorage.getItem(\"invoiceid\");\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [userdetails, setUserdetails] = useState([]);\r\n\r\n  const [invoicedetails, setInvoiceDetails] = useState([]);\r\n\r\n  const [productorder, setproductOrder] = useState([]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `${process.env.REACT_APP_BASEURL}/invoice_details?invoice_no=${invoice_no}`,\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setInvoiceDetails(response.data);\r\n      });\r\n\r\n    oreder_details();\r\n  }, []);\r\n\r\n  const oreder_details = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL_0}/order_deteils`,\r\n        {\r\n          id: order_number,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        const UserId = Number(response.data.user_id);\r\n        setproductOrder(response.data.product_types);\r\n\r\n        axios\r\n          .post(\r\n            `http://192.168.29.108:5000/user_details`,\r\n            {\r\n              user_id: UserId,\r\n            },\r\n            {\r\n              headers: {\r\n                admin_token: token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            let data = response.data;\r\n            setUserdetails(data[0]);\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  function printDocument() {\r\n    const input = document.getElementById(\"container1\");\r\n    html2canvas(input).then((canvas) => {\r\n      const imgData = canvas.toDataURL(\"image/png\");\r\n      const unit = \"pt\";\r\n      const size = \"A2\"; // Use A1, A2, A3 or A4\r\n      const orientation = \"portrait\"; // portrait or landscape\r\n      const pdf = new jsPDF(orientation, unit, size);\r\n\r\n      pdf.addImage(imgData, \"JPEG\", 0, 0);\r\n      pdf.save(\"Invoice.pdf\");\r\n    });\r\n  }\r\n  var totalMrp = 0;\r\n  var total_shipping = 0;\r\n  var total_Product_price = 0;\r\n  var total_sale_price = 0;\r\n  var total = 0;\r\n  var grand_total = 0;\r\n  var total_tax = 0;\r\n  let qty = 0;\r\n\r\n  //  let total_tax_with_qty = 0;\r\n  let total_priceWithout_tax = 0;\r\n  return (\r\n    <>\r\n      {/* <Document >\r\n            <Page size=\"A4\" style={''}> */}\r\n      <div className=\"container\" id=\"container1\">\r\n        <div className=\"invoice\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"table-responsive-sm p-3\">\r\n                <table className=\"invoice_header w-100\">\r\n                  <thead>\r\n                    <tr className=\"border-bottom\">\r\n                      <td className=\"align-bottom\" width={\"50%\"}>\r\n                        <h2 className=\"m-0 mt-2\">\r\n                          <b>INVOICE</b>\r\n                        </h2>\r\n                      </td>\r\n                      <td className=\"text-end\">\r\n                        <h5 className=\"text-uppercase m-0\">\r\n                          <b>Apna Organic Store</b>\r\n                        </h5>\r\n                        <p className=\"m-0\">\r\n                          Plot No. 45 Universal Tower ,2nd Floor,\r\n                        </p>\r\n                        <p className=\"m-0\">Scheme 54 PU4, Indore, MP 452001</p>\r\n                        <p className=\"m-0\">contact@apnaorganicstore.com</p>\r\n                        <p className=\"m-0\">1234567890</p>\r\n                      </td>\r\n                    </tr>\r\n                  </thead>\r\n                </table>\r\n                <div className=\"pb-4 pt-4\">\r\n                  <table className=\"invoice_header w-100\">\r\n                    <tbody>\r\n                      <tr className=\"\">\r\n                        <td className=\"\">\r\n                          <h5 className=\"text-uppercase m-0\">\r\n                            <b>Order Detail:</b>\r\n                          </h5>\r\n                          <p className=\"m-0\">\r\n                            <b>Invoice No : </b>\r\n                            {invoicedetails.invoice_no}\r\n                          </p>\r\n\r\n                          <p className=\"m-0\">\r\n                            <b>Order Id : </b> {invoicedetails.id}\r\n                          </p>\r\n\r\n                          <p className=\"m-0\">\r\n                            <b>Order Date : </b>\r\n                            {moment(invoicedetails.order_date).format(\r\n                              \"YYYY-MM-DD\"\r\n                            )}\r\n                          </p>\r\n                          <p className=\"m-0\">\r\n                            <b>Invoice Date : </b>{\" \"}\r\n                            {moment(invoicedetails.invoice_date).format(\r\n                              \"YYYY-MM-DD\"\r\n                            )}\r\n                          </p>\r\n                        </td>\r\n                        <td className=\"\">\r\n                          <h5 className=\"text-uppercase m-0\">\r\n                            <b>Bill to: </b>\r\n                          </h5>\r\n                          <p className=\"m-0\">\r\n                            <b>Name : </b>\r\n                            {userdetails.first_name} &nbsp;\r\n                            {userdetails.last_name} ,\r\n                          </p>\r\n                          <p className=\"m-0\">\r\n                            <b> Home Address : </b>\r\n                            {userdetails.address}\r\n                          </p>\r\n                          <p className=\"m-0\">\r\n                            <b> Office Address : </b>\r\n                            {userdetails.address2}\r\n                          </p>\r\n                          <p className=\"m-0\">\r\n                            <b> Email : </b>\r\n                            {userdetails.email}\r\n                          </p>\r\n\r\n                          <p className=\"m-0\">\r\n                            <b> Mobile : </b>\r\n                            {userdetails.phone_no}\r\n                          </p>\r\n                        </td>\r\n                        <td className=\"\">\r\n                          <h5 className=\"text-uppercase m-0\">\r\n                            <b>Ship to: </b>\r\n                          </h5>\r\n                          <p className=\"m-0\">\r\n                            <b>Name : </b>\r\n                            {userdetails.first_name} &nbsp;\r\n                            {userdetails.last_name}\r\n                          </p>\r\n                          <p className=\"m-0\">\r\n                            <b> Home Address : </b>\r\n                            {userdetails.address}\r\n                          </p>\r\n                          <p className=\"m-0\">\r\n                            <b> Office Address : </b>\r\n                            {userdetails.address2}\r\n                          </p>\r\n                          <p className=\"m-0\">\r\n                            <b> Email : </b>\r\n                            {userdetails.email}\r\n                          </p>\r\n\r\n                          <p className=\"m-0\">\r\n                            <b> Mobile : </b>\r\n                            {userdetails.phone_no}\r\n                          </p>\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <table className=\"table table-striped border\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th className=\"center\">\r\n                        Total Product({invoicedetails.total_quantity})\r\n                      </th>\r\n                      <th> ₹ MRP </th>\r\n                      <th> ₹ Shipping charges </th>\r\n                      <th> ₹ Product Price</th>\r\n                      <th className=\"center\">₹ Taxable Price </th>\r\n                      <th className=\"center\"> ₹ Tax </th>\r\n                      <th className=\"right\">₹ Sale Price </th>\r\n                      <th>Qty</th>\r\n\r\n                      <th className=\"right\">₹ Total amount </th>\r\n                    </tr>\r\n                  </thead>\r\n\r\n                  <tbody>\r\n                    {(productorder || []).map((orderdata) => {\r\n                      orderdata.gst === \"null\" ||\r\n                        orderdata.gst === \"undefined\" ||\r\n                        orderdata.gst === \"\"\r\n                        ? (orderdata.gst = \"0\")\r\n                        : Number(orderdata.gst);\r\n                      orderdata.sgst === \"null\" ||\r\n                        orderdata.sgst === \"undefined\" ||\r\n                        orderdata.sgst === \"\"\r\n                        ? (orderdata.sgst = \"0\")\r\n                        : Number(orderdata.sgst);\r\n                      orderdata.cgst === \"null\" ||\r\n                        orderdata.cgst === \"undefined\" ||\r\n                        orderdata.cgst === \"\"\r\n                        ? (orderdata.cgst = \"0\")\r\n                        : Number(orderdata.cgst);\r\n                      orderdata.mrp === \"undefined\" ||\r\n                        orderdata.mrp === \"null\" ||\r\n                        orderdata.mrp === \"\"\r\n                        ? (orderdata.mrp = \"0\")\r\n                        : Number(orderdata.mrp);\r\n                      let countAllText =\r\n                        Number(orderdata.gst) +\r\n                        Number(orderdata.wholesale_sales_tax) +\r\n                        Number(orderdata.manufacturers_sales_tax) +\r\n                        Number(orderdata.retails_sales_tax) +\r\n                        Number(orderdata.value_added_tax);\r\n                      let discont = (orderdata.mrp * orderdata.discount) / 100;\r\n                      let tax =\r\n                        (Number(orderdata.sale_price) * countAllText) / 100;\r\n\r\n                      totalMrp += Number(orderdata.mrp);\r\n                      total_shipping += Number(invoicedetails.shipping_charges);\r\n                      qty = orderdata.order_quantity;\r\n\r\n                      let total_price = orderdata.sale_price * qty;\r\n\r\n                      // let Total_taxMultiply_qty = tax * qty;\r\n                      total_Product_price += Number(orderdata.product_price);\r\n                      total_sale_price += Number(orderdata.sale_price);\r\n                      let price_without_tax =\r\n                        Number(orderdata.product_price).toFixed(2) - tax;\r\n\r\n\r\n                      total_priceWithout_tax += Number(price_without_tax);\r\n\r\n                      total += Number(total_price);\r\n                      grand_total += Number(total_price + total_shipping);\r\n                      total_tax += Number(tax);\r\n\r\n                      return (\r\n                        <tr key={orderdata.id}>\r\n                          <td className=\"center\">\r\n                            <b> {orderdata.product_title_name}</b>\r\n                            <br />\r\n                            {orderdata.unit === \"gms\" ? (\r\n                              <small>\r\n                                <b>weight:</b> {orderdata.unit_quantity} grm\r\n                              </small>\r\n                            ) : orderdata.unit === \"ml\" ? (\r\n                              <small>\r\n                                {\" \"}\r\n                                <b>volume:</b>\r\n                                {orderdata.unit_quantity} ml\r\n                              </small>\r\n                            ) : orderdata.unit === \"pcs\" ? (\r\n                              <>\r\n                                <small>\r\n                                  <b>color:</b>:{orderdata.colors}\r\n                                </small>\r\n                                <br />\r\n                                <small>\r\n                                  <b>size:</b>\r\n                                  {orderdata.size}\r\n                                </small>\r\n                              </>\r\n                            ) : null}\r\n                          </td>\r\n\r\n                          <td className=\"left\">\r\n                            ₹{Number(orderdata.mrp)}\r\n                            <br />\r\n                            <small>\r\n                              {\" \"}\r\n                              <b>Discount:</b>₹{discont} (\r\n                              {Number(orderdata.discount)}% )\r\n                            </small>\r\n                          </td>\r\n                          <td className=\"left\">\r\n                            ₹ {Number(invoicedetails.shipping_charges)}\r\n                          </td>\r\n                          <td className=\"left\">\r\n                            ₹ {Number(orderdata.product_price).toFixed(2)}{\" \"}\r\n                          </td>\r\n                          <td className=\"left\">\r\n                            ₹ {price_without_tax.toFixed(2)} <br />\r\n                          </td>\r\n                          <td className=\"left\">\r\n                            ₹ {tax.toFixed(2)} ({countAllText}%)\r\n                            <br />\r\n                          </td>\r\n                          <td className=\"left\">\r\n                            ₹{Number(orderdata.sale_price).toFixed(2)}\r\n                          </td>\r\n                          <td className=\"\">{orderdata.order_quantity}</td>\r\n\r\n                          <td className=\"left\">\r\n                            {Number(total_price).toFixed(2)}\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                    <tr>\r\n                      <th className=\"font-weight-bold\">\r\n                        <b>Total</b>\r\n                      </th>\r\n                      <th className=\"\">\r\n                        <b> ₹ {totalMrp.toFixed(2)} </b>\r\n                      </th>\r\n                      <th className=\"\">\r\n                        <b>₹ {total_shipping.toFixed(2)}</b>\r\n                      </th>\r\n                      <th className=\"\">\r\n                        <b> ₹ {total_Product_price.toFixed(2)} </b>\r\n                      </th>\r\n                      <th className=\"\">\r\n                        <b> ₹ {total_priceWithout_tax.toFixed(2)} </b>\r\n                      </th>\r\n                      <th className=\"\">\r\n                        <b> ₹ {total_tax.toFixed(2)}</b>\r\n                      </th>\r\n                      <th className=\"\">\r\n                        <b> ₹{total_sale_price.toFixed(2)}</b>\r\n                      </th>\r\n                      <th className=\"\">\r\n                        <b> </b>\r\n                      </th>\r\n                      <th className=\"\">\r\n                        <b> ₹{total.toFixed(2)} </b>\r\n                      </th>\r\n                    </tr>\r\n                    <tr>\r\n                      <th\r\n                        colSpan={\"8\"}\r\n                        className=\"font-weight-bold text-end p-4\"\r\n                      >\r\n                        <h5>\r\n                          <b>Grand Total</b>\r\n                        </h5>\r\n                      </th>\r\n                      <th className=\"pt-4 pb-4\">\r\n                        <h5>\r\n                          <b>{grand_total.toFixed(2)} </b>\r\n                        </h5>\r\n                      </th>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <div className=\"col-md-12 text-end\">\r\n                  <h5>Apna Organic Store</h5>\r\n                  <h5>Authorised Signatury</h5>\r\n                </div>\r\n                <div className=\"col-md-12 border-top p-2\">\r\n                  <p>\r\n                    <b>Returns Policy:</b> At Apna Organic we try to deliver\r\n                    perfectly each and every time. But in the off-chance that\r\n                    you need to return the item, please do so with the{\" \"}\r\n                    <b>\r\n                      original Brand box/price tag, original packing and invoice\r\n                    </b>{\" \"}\r\n                    without which it will be really difficult for us to act on\r\n                    your request. Please help us in helping you. Terms and\r\n                    conditions apply.\r\n                  </p>\r\n                  <p>\r\n                    The goods sold as are intended for end user consumption and\r\n                    not for re-sale.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mb-5 m-auto\">\r\n              <button\r\n                onClick={() => printDocument()}\r\n                className=\"btn btn-outline-success m-auto\"\r\n              >\r\n                Print\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n// const MyDoc = () => (\r\n//     <Document >\r\n//         <Page size=\"A4\" style={''}>\r\n//             <div className=\"container\">\r\n//                 <div className=\"invoice\">\r\n//                     <div className=\"card\">\r\n//                         <div className=\"card-body\">\r\n//                             <div className=\"table-responsive-sm p-3\">\r\n//                                 <table className=\"invoice_header\">\r\n//                                     <tr className=\"border-bottom\">\r\n//                                         <td className=\"align-bottom\" width={'50%'}>\r\n//                                             <img src={logo} className=\"w-25\" />\r\n//                                             <h2 className=\"m-0 mt-2\"><b>INVOICE</b></h2>\r\n//                                         </td>\r\n//                                         <td className=\"text-end\">\r\n//                                             <h5 className=\"text-uppercase m-0\"><b>Apna Organic Store</b></h5>\r\n//                                             <p className=\"m-0\">Plot No. 45 Universal Tower ,2nd Floor,</p>\r\n//                                             <p className=\"m-0\">Scheme 54 PU4, Indore, MP 452001</p>\r\n//                                             <p className=\"m-0\">contact@apnaorganicstore.com</p>\r\n//                                             <p className=\"m-0\">1234567890</p>\r\n//                                         </td>\r\n//                                     </tr>\r\n//                                 </table>\r\n//                                 <div className=\"pb-4 pt-4\">\r\n//                                     <table className=\"invoice_header w-100\">\r\n//                                         <tr className=\"\">\r\n//                                             <td className=\"\">\r\n//                                                 <h5 className=\"text-uppercase m-0\"><b>Order Detail:</b></h5>\r\n//                                                 <p className=\"m-0\"><b>Invoice No:</b> #FAJ6EI2300006199</p>\r\n//                                                 <p className=\"m-0\"><b>Order Id:</b> #1212131</p>\r\n//                                                 <p className=\"m-0\"><b>Order Date:</b> 24-09-2022</p>\r\n//                                                 <p className=\"m-0\"><b>Invoice Date:</b> 24-09-2022</p>\r\n//                                                 <p className=\"m-0\"><b>GSTIN:</b> 23AAACX2827R1ZX</p>\r\n//                                             </td>\r\n//                                             <td className=\"\">\r\n//                                                 <h5 className=\"text-uppercase m-0\"><b>Bill to:</b></h5>\r\n//                                                 <p className=\"m-0\">Plot No. 45 Universal Tower ,2nd Floor,</p>\r\n//                                                 <p className=\"m-0\">Scheme 54 PU4, Indore, MP 452001</p>\r\n//                                                 <p className=\"m-0\">contact@apnaorganicstore.com</p>\r\n//                                                 <p className=\"m-0\">1234567890</p>\r\n//                                             </td>\r\n//                                             <td className=\"\">\r\n//                                                 <h5 className=\"text-uppercase m-0\"><b>Ship to:</b></h5>\r\n//                                                 <p className=\"m-0\">Plot No. 45 Universal Tower ,2nd Floor,</p>\r\n//                                                 <p className=\"m-0\">Scheme 54 PU4, Indore, MP 452001</p>\r\n//                                                 <p className=\"m-0\">contact@apnaorganicstore.com</p>\r\n//                                                 <p className=\"m-0\">1234567890</p>\r\n//                                             </td>\r\n//                                         </tr>\r\n//                                     </table>\r\n//                                 </div>\r\n//                                 <table className=\"table table-striped border\">\r\n//                                     <thead>\r\n//                                         <tr>\r\n//                                             <th className=\"center\">Product</th>\r\n//                                             <th>Qty</th>\r\n//                                             <th>Gross Amount ₹</th>\r\n\r\n//                                             <th className=\"right\">Discounts/Coupons ₹</th>\r\n//                                             <th className=\"center\">Taxable Value ₹</th>\r\n//                                             <th className=\"center\">CGST ₹</th>\r\n//                                             <th className=\"center\">SGST/UTGST ₹</th>\r\n//                                             <th className=\"right\">Total ₹</th>\r\n//                                         </tr>\r\n//                                     </thead>\r\n//                                     <tbody>\r\n//                                         <tr>\r\n//                                             <td className=\"center\"><b>OPPO K10 5G (Ocean Blue, 128 GB)</b><br />\r\n//                                                 <small>CGST: 9.0 %</small><br />\r\n//                                                 <small>SGST/UTGST: 9.0 %</small>\r\n//                                             </td>\r\n//                                             <td className=\"\">1</td>\r\n//                                             <td className=\"left\">15999.00</td>\r\n//                                             <td className=\"left\">-1283.00</td>\r\n//                                             <td className=\"left\">12471.18</td>\r\n//                                             <td className=\"left\">1122.40</td>\r\n//                                             <td className=\"left\">1122.40</td>\r\n//                                             <td className=\"left\">14716.00</td>\r\n//                                         </tr>\r\n//                                         <tr>\r\n//                                             <td className=\"center\"><b>OPPO K10 5G (Ocean Blue, 128 GB)</b><br />\r\n//                                                 <small>CGST: 9.0 %</small><br />\r\n//                                                 <small>SGST/UTGST: 9.0 %</small>\r\n//                                             </td>\r\n//                                             <td className=\"\">1</td>\r\n//                                             <td className=\"left\">15999.00</td>\r\n//                                             <td className=\"left\">-1283.00</td>\r\n//                                             <td className=\"left\">12471.18</td>\r\n//                                             <td className=\"left\">1122.40</td>\r\n//                                             <td className=\"left\">1122.40</td>\r\n//                                             <td className=\"left\">14716.00</td>\r\n//                                         </tr>\r\n//                                         <tr>\r\n//                                             <td className=\"center\"><b>Shipping And Packaging Charges</b>\r\n//                                             </td>\r\n//                                             <td className=\"\">2</td>\r\n//                                             <td className=\"left\">99.00</td>\r\n//                                             <td className=\"left\">-70.00</td>\r\n//                                             <td className=\"left\">24.58</td>\r\n//                                             <td className=\"left\">2.21</td>\r\n//                                             <td className=\"left\">2.21</td>\r\n//                                             <td className=\"left\">29.00</td>\r\n//                                         </tr>\r\n//                                         <tr>\r\n//                                             <th className=\"font-weight-bold\"><b>Total</b></th>\r\n//                                             <th className=\"\"><b>2</b></th>\r\n//                                             <th className=\"\"><b>16098.00</b></th>\r\n//                                             <th className=\"\"><b>-1353.00</b></th>\r\n//                                             <th className=\"\"><b>12495.76</b></th>\r\n//                                             <th className=\"\"><b>1124.61</b></th>\r\n//                                             <th className=\"\"><b>1124.61</b></th>\r\n//                                             <th className=\"\"><b>14745.00</b></th>\r\n//                                         </tr>\r\n//                                         <tr>\r\n//                                             <th colSpan={'7'} className=\"font-weight-bold text-end p-4\"><h5><b>Grand Total</b></h5></th>\r\n//                                             <th className=\"pt-4 pb-4\"><h5><b>14745.00</b></h5></th>\r\n//                                         </tr>\r\n//                                     </tbody>\r\n//                                 </table>\r\n//                                 <div className=\"col-md-12 text-end\">\r\n//                                     <h5>Apna Organic Store</h5>\r\n//                                     <img src={logo} className='w-25 p-4 pt-1 pb-1 px-1' />\r\n//                                     <h5>Authorised Signatury</h5>\r\n//                                 </div>\r\n//                                 <div className=\"col-md-12 border-top p-2\">\r\n//                                     <p><b>Returns Policy:</b> At Apna Organic we try to deliver perfectly each and every time. But in the off-chance that you need to return the item, please do so with the <b>original Brand box/price\r\n//                                         tag, original packing and invoice</b> without which it will be really difficult for us to act on your request. Please help us in helping you. Terms and conditions apply.</p>\r\n//                                     <p>The goods sold as are intended for end user consumption and not for re-sale.</p>\r\n\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </Page>\r\n//     </Document>\r\n// );\r\n// const Invoice = () => (\r\n//     <div>\r\n//         {/* <div className=\"container p-0\">\r\n//                 <div className=\"invoice\">\r\n//                     <div className=\"card\">\r\n//                         <div className=\"card-body\">\r\n//                             <div className=\"table-responsive-sm p-3\">\r\n//                                 <table className=\"invoice_header\">\r\n//                                     <tr className=\"border-bottom\">\r\n//                                         <td className=\"align-bottom\" width={'50%'}>\r\n//                                             <img src={logo} className=\"w-25\" />\r\n//                                             <h2 className=\"m-0 mt-2\"><b>INVOICE</b></h2>\r\n//                                         </td>\r\n//                                         <td className=\"text-end\">\r\n//                                             <h5 className=\"text-uppercase m-0\"><b>Apna Organic Store</b></h5>\r\n//                                             <p className=\"m-0\">Plot No. 45 Universal Tower ,2nd Floor,</p>\r\n//                                             <p className=\"m-0\">Scheme 54 PU4, Indore, MP 452001</p>\r\n//                                             <p className=\"m-0\">contact@apnaorganicstore.com</p>\r\n//                                             <p className=\"m-0\">1234567890</p>\r\n//                                         </td>\r\n//                                     </tr>\r\n//                                 </table>\r\n//                                 <div className=\"pb-4 pt-4\">\r\n//                                     <table className=\"invoice_header w-100\">\r\n//                                         <tr className=\"\">\r\n//                                             <td className=\"\">\r\n//                                                 <h5 className=\"text-uppercase m-0\"><b>Order Detail:</b></h5>\r\n//                                                 <p className=\"m-0\"><b>Invoice No:</b> #FAJ6EI2300006199</p>\r\n//                                                 <p className=\"m-0\"><b>Order Id:</b> #1212131</p>\r\n//                                                 <p className=\"m-0\"><b>Order Date:</b> 24-09-2022</p>\r\n//                                                 <p className=\"m-0\"><b>Invoice Date:</b> 24-09-2022</p>\r\n//                                                 <p className=\"m-0\"><b>GSTIN:</b> 23AAACX2827R1ZX</p>\r\n//                                             </td>\r\n//                                             <td className=\"\">\r\n//                                                 <h5 className=\"text-uppercase m-0\"><b>Bill to:</b></h5>\r\n//                                                 <p className=\"m-0\">Plot No. 45 Universal Tower ,2nd Floor,</p>\r\n//                                                 <p className=\"m-0\">Scheme 54 PU4, Indore, MP 452001</p>\r\n//                                                 <p className=\"m-0\">contact@apnaorganicstore.com</p>\r\n//                                                 <p className=\"m-0\">1234567890</p>\r\n//                                             </td>\r\n//                                             <td className=\"\">\r\n//                                                 <h5 className=\"text-uppercase m-0\"><b>Ship to:</b></h5>\r\n//                                                 <p className=\"m-0\">Plot No. 45 Universal Tower ,2nd Floor,</p>\r\n//                                                 <p className=\"m-0\">Scheme 54 PU4, Indore, MP 452001</p>\r\n//                                                 <p className=\"m-0\">contact@apnaorganicstore.com</p>\r\n//                                                 <p className=\"m-0\">1234567890</p>\r\n//                                             </td>\r\n//                                         </tr>\r\n//                                     </table>\r\n//                                 </div>\r\n//                                 <table className=\"table table-striped border\">\r\n//                                     <thead>\r\n//                                         <tr>\r\n//                                             <th className=\"center\">Product</th>\r\n//                                             <th>Qty</th>\r\n//                                             <th>Gross Amount ₹</th>\r\n\r\n//                                             <th className=\"right\">Discounts/Coupons ₹</th>\r\n//                                             <th className=\"center\">Taxable Value ₹</th>\r\n//                                             <th className=\"center\">CGST ₹</th>\r\n//                                             <th className=\"center\">SGST/UTGST ₹</th>\r\n//                                             <th className=\"right\">Total ₹</th>\r\n//                                         </tr>\r\n//                                     </thead>\r\n//                                     <tbody>\r\n//                                         <tr>\r\n//                                             <td className=\"center\"><b>OPPO K10 5G (Ocean Blue, 128 GB)</b><br />\r\n//                                                 <small>CGST: 9.0 %</small><br />\r\n//                                                 <small>SGST/UTGST: 9.0 %</small>\r\n//                                             </td>\r\n//                                             <td className=\"\">1</td>\r\n//                                             <td className=\"left\">15999.00</td>\r\n//                                             <td className=\"left\">-1283.00</td>\r\n//                                             <td className=\"left\">12471.18</td>\r\n//                                             <td className=\"left\">1122.40</td>\r\n//                                             <td className=\"left\">1122.40</td>\r\n//                                             <td className=\"left\">14716.00</td>\r\n//                                         </tr>\r\n//                                         <tr>\r\n//                                             <td className=\"center\"><b>OPPO K10 5G (Ocean Blue, 128 GB)</b><br />\r\n//                                                 <small>CGST: 9.0 %</small><br />\r\n//                                                 <small>SGST/UTGST: 9.0 %</small>\r\n//                                             </td>\r\n//                                             <td className=\"\">1</td>\r\n//                                             <td className=\"left\">15999.00</td>\r\n//                                             <td className=\"left\">-1283.00</td>\r\n//                                             <td className=\"left\">12471.18</td>\r\n//                                             <td className=\"left\">1122.40</td>\r\n//                                             <td className=\"left\">1122.40</td>\r\n//                                             <td className=\"left\">14716.00</td>\r\n//                                         </tr>\r\n//                                         <tr>\r\n//                                             <td className=\"center\"><b>Shipping And Packaging Charges</b>\r\n//                                             </td>\r\n//                                             <td className=\"\">2</td>\r\n//                                             <td className=\"left\">99.00</td>\r\n//                                             <td className=\"left\">-70.00</td>\r\n//                                             <td className=\"left\">24.58</td>\r\n//                                             <td className=\"left\">2.21</td>\r\n//                                             <td className=\"left\">2.21</td>\r\n//                                             <td className=\"left\">29.00</td>\r\n//                                         </tr>\r\n//                                         <tr>\r\n//                                             <th className=\"font-weight-bold\"><b>Total</b></th>\r\n//                                             <th className=\"\"><b>2</b></th>\r\n//                                             <th className=\"\"><b>16098.00</b></th>\r\n//                                             <th className=\"\"><b>-1353.00</b></th>\r\n//                                             <th className=\"\"><b>12495.76</b></th>\r\n//                                             <th className=\"\"><b>1124.61</b></th>\r\n//                                             <th className=\"\"><b>1124.61</b></th>\r\n//                                             <th className=\"\"><b>14745.00</b></th>\r\n//                                         </tr>\r\n//                                         <tr>\r\n//                                             <th colSpan={'7'} className=\"font-weight-bold text-end p-4\"><h5><b>Grand Total</b></h5></th>\r\n//                                             <th className=\"pt-4 pb-4\"><h5><b>14745.00</b></h5></th>\r\n//                                         </tr>\r\n//                                     </tbody>\r\n//                                 </table>\r\n//                                 <div className=\"col-md-12 text-end\">\r\n//                                     <h5>Apna Organic Store</h5>\r\n//                                     <img src={logo} className='w-25 p-4 pt-1 pb-1 px-1' />\r\n//                                     <h5>Authorised Signatury</h5>\r\n//                                 </div>\r\n//                                 <div className=\"col-md-12 border-top p-2\">\r\n//                                     <p><b>Returns Policy:</b> At Apna Organic we try to deliver perfectly each and every time. But in the off-chance that you need to return the item, please do so with the <b>original Brand box/price\r\n//                                         tag, original packing and invoice</b> without which it will be really difficult for us to act on your request. Please help us in helping you. Terms and conditions apply.</p>\r\n//                                     <p>The goods sold as are intended for end user consumption and not for re-sale.</p>\r\n\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         <PDFDownloadLink document={<MyDoc />} fileName=\"somename.pdf\">\r\n//             {({blob, url, loading, error }) =>\r\n//                 loading ? 'Loading document...' : 'Download now!'\r\n//             }\r\n//         </PDFDownloadLink> */}\r\n//     </div>\r\n// );\r\n// const blob = pdf(MyDoc).toBlob();\r\nexport default Invoice;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\deletedproduct.js",["456"],[],"import React, { useEffect, useState } from \"react\";\r\nimport { MdOutlineRestore } from \"react-icons/md\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\nimport SweetAlert from \"sweetalert-react\";\r\nimport \"sweetalert/dist/sweetalert.css\";\r\nimport axios from \"axios\";\r\nimport BrandJson from \"./../json/BrandJson\";\r\nimport Loader from \"../common/loader\";\r\n\r\nconst Deletedproduct = () => {\r\n  const [id, setId] = useState();\r\n  const [productid, setProductId] = useState();\r\n  let [searcherror, setsearcherror] = useState(false);\r\n  const [RestoreAlert, setRestoreAlert] = useState(false);\r\n  const [filtervategory, setfiltercategory] = useState([]);\r\n  const [vendorid, setVendorId] = useState([]);\r\n  const [loading, setloading] = useState(false);\r\n  const [apicall, setapicall] = useState(false);\r\n\r\n  const [deletedata, setdeletedata] = useState([]);\r\n  const [searchdata, setsearchData] = useState({\r\n    product_title_name: \"\",\r\n    manufacturing_date: \"\",\r\n    category: \"\",\r\n    vendor: \"\",\r\n    brand: \"\",\r\n  });\r\n\r\n  const hideAlert = () => setRestoreAlert(false);\r\n  let token = localStorage.getItem(\"token\");\r\n  const closeRestoreAlert = () => {\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL_0}/products_delete_remove`,\r\n        {\r\n          varient_id: id,\r\n          product_id: productid,\r\n          is_delete: \"1\",\r\n        },\r\n        {\r\n          headers: { admin_token: `${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        // let data = response.data;\r\n        setapicall(true);\r\n        setRestoreAlert(false);\r\n      });\r\n  };\r\n\r\n  /*<---Category list api---> */\r\n  const getCategorydatafilter = () => {\r\n    try {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL_0}/category?category=all`)\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n          setfiltercategory(cgory);\r\n        });\r\n    } catch (err) { }\r\n  };\r\n  /*<---vendor list api---> */\r\n  const getVendorData = () => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/vendors`,\r\n          { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n\r\n          const result = cgory.filter(\r\n            (thing, index, self) =>\r\n              index === self.findIndex((t) => t.shop_name === thing.shop_name)\r\n          );\r\n          const result1 = result.filter(\r\n            (item) => item.status === \"approved\" || item.status === \"active\"\r\n          );\r\n          setVendorId(result1);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n  const onSearchClick = () => {\r\n    if (\r\n      searchdata.product_title_name === \"\" &&\r\n      searchdata.manufacturing_date === \"\" &&\r\n      searchdata.brand === \"\" &&\r\n      searchdata.category === \"\" &&\r\n      searchdata.vendor === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      setsearcherror(false);\r\n      setapicall(true);\r\n    }\r\n  };\r\n  const OnReset = () => {\r\n    setsearchData({\r\n      product_title_name: \"\",\r\n      manufacturing_date: \"\",\r\n      brand: \"\",\r\n      category: \"\",\r\n      vendor: \"\",\r\n    });\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n  useEffect(() => {\r\n    let productArry = [];\r\n\r\n    setloading(true);\r\n    axios\r\n      .post(`${process.env.REACT_APP_BASEURL_0}/home?page=0&per_page=400`, {\r\n        product_search: {\r\n          search: [`${searchdata.product_title_name}`],\r\n          price_from: \"\",\r\n          price_to: \"\",\r\n          id: \"\",\r\n          product_title_name_asc_desc: \"\",\r\n          sale_price: \"\",\r\n          short_by_updated_on: \"\",\r\n          // product_title_name: ,\r\n          category: [`${searchdata.category}`],\r\n          brand: [`${searchdata.brand}`],\r\n          shop: [`${searchdata.vendor}`],\r\n          is_delete: [\"0\"],\r\n          manufacturing_date: [`${searchdata.manufacturing_date}`],\r\n        },\r\n      })\r\n      .then((response) => {\r\n        let v = response.data.results;\r\n        v.forEach(function (item, index) {\r\n          let catname = response.data.category_name[item.category]\r\n          item.category = catname;\r\n          productArry.push(item)\r\n\r\n        })\r\n        let response_data = {};\r\n        response_data[\"results\"] = productArry;\r\n        setdeletedata(response_data);\r\n        setapicall(false);\r\n        setsearcherror(false);\r\n        setloading(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    getVendorData();\r\n    getCategorydatafilter();\r\n  }, [apicall]);\r\n  const columns = [\r\n    {\r\n      name: \"#\",\r\n      width: \"150px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <img\r\n          height=\"90px\"\r\n          width=\"70px\"\r\n          alt={row.product_title_name}\r\n          src={\r\n            row.all_images\r\n              ? row.all_images\r\n              : \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png\"\r\n          }\r\n          style={{\r\n            borderRadius: 10,\r\n            paddingTop: 10,\r\n            paddingBottom: 10,\r\n            textAlign: \"right\",\r\n          }}\r\n          onClick={handleClick}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => row.product_title_name,\r\n      sortable: true,\r\n      width: \"200px\",\r\n    },\r\n    {\r\n      name: \"Category\",\r\n      //     selector: (row) =>{\r\n      //       // console.log(row.cat_catname)\r\n      //       // console.log(row.category)\r\n      //       console.log(cat_catname[row.category])\r\n      //  return(\r\n      //   <>\r\n      //   {row.cat_catname === undefined ? \"null\":  cat_catname[row.category]}\r\n      //   </>\r\n      //  )\r\n\r\n      //     },\r\n      selector: (row) => row.category,\r\n      sortable: true,\r\n      width: \"150px\",\r\n    },\r\n    {\r\n      name: \"Category Id\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n      width: \"150px\",\r\n    },\r\n    {\r\n      name: \"Vendor\",\r\n      selector: (row) => row.shop,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Seo_Tag\",\r\n      selector: (row) => row.seo_tag,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Product Type\",\r\n      selector: (row) => row.product_type,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Brand\",\r\n      selector: (row) => row.brand,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    {\r\n      name: \"Mrp\",\r\n      selector: (row) => (\r\n        <p className=\"m-0\">\r\n          <b>MRP :</b>₹ {Number(row.mrp).toFixed(2)} <br />\r\n          <b>Discount : </b>\r\n          {Number(row.discount).toFixed(2)}%\r\n          {/* {row.discount === \"0\" ? null : row.discount + \"%\"}{\" \"} */}\r\n          <br />\r\n          <b>Product Price:</b>₹ {Number(row.product_price).toFixed(2)} <br />\r\n          <b>Sale Price:</b>₹ {Number(row.sale_price).toFixed(2)} <br />\r\n        </p>\r\n      ),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Tax\",\r\n      selector: (row) => (\r\n        <div className=\"d-flex flex-column\">\r\n          <b>\r\n            Total:\r\n            {Number(row.gst) +\r\n              Number(row.wholesale_sales_tax) +\r\n              Number(row.retails_sales_tax) +\r\n              Number(row.manufacturers_sales_tax) +\r\n              Number(row.value_added_tax) +\r\n              \"%\"}{\" \"}\r\n          </b>{\" \"}\r\n          <div className=\"d-flex\">\r\n            {row.gst === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>Gst :</b>\r\n                {Number(row.gst).toFixed(1)}%\r\n              </p>\r\n            )}\r\n            {row.cgst === \"0\" ? null : (\r\n              <p className=\"mb-0 mx-1\">\r\n                <b>Cgst : </b> {Number(row.cgst).toFixed(1)}%{\" \"}\r\n              </p>\r\n            )}\r\n            {row.sgst === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>Sgst:</b> {Number(row.sgst).toFixed(1)}%\r\n              </p>\r\n            )}\r\n          </div>\r\n          <div className=\"d-flex flex-column\">\r\n            {row.wholesale_sales_tax === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>\r\n                  wholesale_sales_tax:\r\n                  {Number(row.wholesale_sales_tax).toFixed(1)}%\r\n                </b>{\" \"}\r\n              </p>\r\n            )}\r\n            {row.retails_sales_tax === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>\r\n                  retails_sales_tax:{Number(row.retails_sales_tax).toFixed(1)}%\r\n                </b>{\" \"}\r\n              </p>\r\n            )}\r\n            {row.value_added_tax === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>\r\n                  value_added_tax:{Number(row.value_added_tax).toFixed(1)}%{\" \"}\r\n                </b>\r\n              </p>\r\n            )}\r\n            {row.manufacturers_sales_tax === \"0\" ? null : (\r\n              <p className=\"mb-0\">\r\n                <b>\r\n                  manufacturers_sales_tax:{\" \"}\r\n                  {Number(row.manufacturers_sales_tax).toFixed(1)}%\r\n                </b>{\" \"}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ),\r\n\r\n      sortable: true,\r\n      width: \"250px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"SP\",\r\n      selector: (row) => row.sale_price.toFixed(2),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Qty\",\r\n      selector: (row) =>\r\n        row.quantity === \"0\" || row.quantity === 0 ? (\r\n          <span className=\"text-danger\">Out Of Stock</span>\r\n        ) : (\r\n          row.quantity\r\n        ),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <span\r\n          className={\r\n            row.product_status === \"pending\" || row.product_status === \"1\"\r\n              ? \"badge bg-warning\"\r\n              : row.product_status === \"approved\"\r\n                ? \"badge bg-success\"\r\n                : // ? \"badge bg-info\"\r\n                row.product_status === \"draft\"\r\n                  ? \"badge bg-secondary\"\r\n                  : \"badge bg-secondary\"\r\n          }\r\n        >\r\n          {row.product_status === \"pending\" || row.product_status === \"1\"\r\n            ? \"Pending\"\r\n            : row.product_status === \"approved\"\r\n              ? \"Approved\"\r\n              : // : row.product_status === \"\"\r\n              // ? \"Status\"\r\n              row.product_status === \"draft\"\r\n                ? \"Draft\"\r\n                : \"Draft\"}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n      width: \"115px\",\r\n      // center: true,\r\n    },\r\n    // {\r\n    //   name: \"Change Status\",\r\n    //   selector: (row) => (\r\n    //     <Form.Select\r\n    //       aria-label=\"Search by delivery\"\r\n    //       size=\"sm\"\r\n    //       className=\"w-100\"\r\n    //       onChange={(e) => onProductStatusChange(e, row.id, row.product_id)}\r\n    //       value={row.product_status}\r\n    //     >\r\n    //       {/* <option value={\"\"}>Status</option> */}\r\n    //       {(productstatus.productstatus || []).map((data, i) => {\r\n\r\n    //         return (\r\n    //           <option value={data} key={i}>\r\n    //             {\" \"}\r\n    //             {data}\r\n    //           </option>\r\n    //         );\r\n    //       })}\r\n    //     </Form.Select>\r\n    //   ),\r\n    //   sortable: true,\r\n    // },\r\n\r\n    {\r\n      name: \"Action\",\r\n      width: \"120px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      selector: (row) => (\r\n        <Iconbutton\r\n          onClick={(e) => OnProductRestore(e, row.id, row.product_id)}\r\n          btntext={\"Restore\"}\r\n          btnclass={\"button bg-warning\"}\r\n          Iconname={<MdOutlineRestore className=\"mx-1\" />}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n  // const columns = [\r\n  //   {\r\n  //     name: \"#\",\r\n  //     width: \"150px\",\r\n  //     center: true,\r\n  //     cell: (row) => (\r\n  //       <img\r\n  //         height=\"90px\"\r\n  //         width=\"70px\"\r\n  //         alt={row.product_title_name}\r\n  //         src={\r\n  //           row.all_images\r\n  //             ? row.all_images\r\n  //             : \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png\"\r\n  //         }\r\n  //         style={{\r\n  //           borderRadius: 10,\r\n  //           paddingTop: 10,\r\n  //           paddingBottom: 10,\r\n  //           textAlign: \"right\",\r\n  //         }}\r\n  //         onClick={handleClick}\r\n  //       />\r\n  //     ),\r\n  //   },\r\n  //   {\r\n  //     name: \"Product Name\",\r\n  //     selector: (row) => row.product_title_name,\r\n  //     sortable: true,\r\n  //     width: \"200px\",\r\n  //   },\r\n  //   {\r\n  //     name: \"Category\",\r\n  //     selector: (row) => row.category,\r\n  //     sortable: true,\r\n  //     width: \"100px\",\r\n  //   },\r\n  //   {\r\n  //     name: \"Vendor\",\r\n  //     selector: (row) => row.shop,\r\n  //     sortable: true,\r\n  //     width: \"90px\",\r\n  //   },\r\n  //   {\r\n  //     name: \"Brand\",\r\n  //     selector: (row) => row.brand,\r\n  //     sortable: true,\r\n  //     width: \"100px\",\r\n  //   },\r\n  //   {\r\n  //     name: \"Mrp\",\r\n  //     selector: (row) => row.mrp.toFixed(2),\r\n  //     sortable: true,\r\n  //     width: \"90px\",\r\n  //     center: true,\r\n  //     style: {\r\n  //       paddingRight: \"32px\",\r\n  //       paddingLeft: \"0px\",\r\n  //     },\r\n  //   },\r\n  //   {\r\n  //     name: \"Dis(%)\",\r\n  //     selector: (row) => row.discount + \"%\",\r\n  //     sortable: true,\r\n  //     width: \"90px\",\r\n  //     center: true,\r\n  //     style: {\r\n  //       paddingRight: \"32px\",\r\n  //       paddingLeft: \"0px\",\r\n  //     },\r\n  //   },\r\n  //   {\r\n  //     name: \"Price\",\r\n  //     selector: (row) => row.product_price.toFixed(2),\r\n  //     sortable: true,\r\n  //     width: \"100px\",\r\n  //     center: true,\r\n  //     style: {\r\n  //       paddingRight: \"32px\",\r\n  //       paddingLeft: \"0px\",\r\n  //     },\r\n  //   },\r\n\r\n  //   {\r\n  //     name: \"Tax\",\r\n  //     selector: (row) =>\r\n  //       Number(row.gst) +\r\n  //       Number(row.cgst) +\r\n  //       Number(row.sgst) +\r\n  //       Number(row.wholesale_sales_tax) +\r\n  //       Number(row.retails_sales_tax) +\r\n  //       Number(row.manufacturers_sales_tax) +\r\n  //       Number(row.value_added_tax) +\r\n  //       \"%\",\r\n  //     sortable: true,\r\n  //     width: \"90px\",\r\n  //     center: true,\r\n  //     style: {\r\n  //       paddingLeft: \"0px\",\r\n  //     },\r\n  //   },\r\n  //   {\r\n  //     name: \"SP\",\r\n  //     selector: (row) => row.sale_price.toFixed(2),\r\n  //     sortable: true,\r\n  //     width: \"100px\",\r\n  //     center: true,\r\n  //     style: {\r\n  //       paddingRight: \"32px\",\r\n  //       paddingLeft: \"0px\",\r\n  //     },\r\n  //   },\r\n\r\n  //   {\r\n  //     name: \"MDate\",\r\n  //     selector: (row) => moment(row.manufacturing_date).format(\"yyyy-MM-DD\"),\r\n  //     sortable: true,\r\n  //     width: \"150px\",\r\n  //     center: true,\r\n  //     style: {\r\n  //       paddingRight: \"32px\",\r\n  //       paddingLeft: \"0px\",\r\n  //     },\r\n  //   },\r\n  //   {\r\n  //     name: \"EDate\",\r\n  //     selector: (row) => moment(row.expire_date).format(\"yyyy-MM-DD\"),\r\n  //     sortable: true,\r\n  //     width: \"150px\",\r\n  //     center: true,\r\n  //     style: {\r\n  //       paddingRight: \"32px\",\r\n  //       paddingLeft: \"0px\",\r\n  //     },\r\n  //   },\r\n  //   {\r\n  //     name: \"Action\",\r\n  //     width: \"120px\",\r\n  //     style: {\r\n  //       paddingRight: \"12px\",\r\n  //       paddingLeft: \"0px\",\r\n  //     },\r\n  //     selector: (row) => (\r\n  //       <Iconbutton\r\n  //         onClick={(e) => OnProductRestore(e, row.id, row.product_id)}\r\n  //         btntext={\"Restore\"}\r\n  //         btnclass={\"button bg-warning\"}\r\n  //         Iconname={<MdOutlineRestore className=\"mx-1\" />}\r\n  //       />\r\n  //     ),\r\n  //   },\r\n  // ];\r\n  const OnProductRestore = (e, id, productid) => {\r\n    setRestoreAlert(true);\r\n    setId(id);\r\n    setProductId(productid);\r\n  };\r\n\r\n  const handleClick = () => { };\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n      <div>\r\n        <h2>Deleted Products</h2>\r\n\r\n        {/* search bar */}\r\n        <div className=\"card mt-3 p-3 \">\r\n          <div className=\"row pb-3\">\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <input\r\n                type={\"text\"}\r\n                placeholder={\"Search by product name\"}\r\n                onChange={OnSearchChange}\r\n                name=\"product_title_name\"\r\n                value={searchdata.product_title_name}\r\n                className={\"form-control\"}\r\n              />{\" \"}\r\n              {searcherror === true ? (\r\n                <small className=\"text-danger\">please fill the feild</small>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by category\"\r\n                onChange={OnSearchChange}\r\n                name=\"category\"\r\n                value={String(searchdata.category)}\r\n              >\r\n                <option value={\"\"}>Select Category</option>\r\n                {(filtervategory || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.id} key={i}>\r\n                      {\" \"}\r\n                      {data.category_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by vendor\"\r\n                onChange={OnSearchChange}\r\n                name=\"vendor\"\r\n                value={String(searchdata.vendor)}\r\n              >\r\n                <option value={\"\"}>Select Vendor</option>\r\n                {(vendorid || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.shop_name} key={i}>\r\n                      {\" \"}\r\n                      {data.shop_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by brand\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by brand\"\r\n                onChange={OnSearchChange}\r\n                name=\"brand\"\r\n                value={String(searchdata.brand)}\r\n              >\r\n                <option value={\"\"}>Select Brand</option>\r\n                {(BrandJson.BrandJson || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data} key={i}>\r\n                      {\" \"}\r\n                      {data}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <input\r\n                type={\"date\"}\r\n                value={searchdata.manufacturing_date}\r\n                placeholder={\"Search by date\"}\r\n                className={\"adminsideinput\"}\r\n                onChange={OnSearchChange}\r\n                name=\"manufacturing_date\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mt-2\">\r\n              <MainButton\r\n                btntext={\"Search\"}\r\n                onClick={onSearchClick}\r\n                btnclass={\"button main_button w-100\"}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input mt-2\">\r\n              <MainButton\r\n                btntext={\"Reset\"}\r\n                btnclass={\"button main_button w-100\"}\r\n                type=\"reset\"\r\n                onClick={OnReset}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* upload */}\r\n\r\n          {/* datatable */}\r\n\r\n          <DataTable\r\n            columns={columns}\r\n            data={deletedata.results}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n            className={\"table_body deletedproduct_tabel\"}\r\n          />\r\n          <SweetAlert\r\n            show={RestoreAlert}\r\n            title=\"Restor Successfully \"\r\n            onConfirm={closeRestoreAlert}\r\n            onCancel={hideAlert}\r\n            showCancelButton={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Deletedproduct;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\offerproduct.js",["457","458"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport \"sweetalert/dist/sweetalert.css\";\r\nimport axios from \"axios\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport moment from \"moment\";\r\nimport SAlert from \"../common/salert\";\r\nimport BrandJson from \"./../json/BrandJson\";\r\nimport MainButton from \"../common/button\";\r\nimport Loader from \"../common/loader\";\r\nimport { Badge } from \"react-bootstrap\";\r\n\r\nconst Offerproduct = () => {\r\n  const formRef = useRef();\r\n  // let productid = localStorage.getItem(\"productid\");\r\n\r\n  // let userid = localStorage.getItem(\"userid\");\r\n  const [offerProductData, setOfferProductData] = useState([]);\r\n  const [validated, setValidated] = useState(false);\r\n\r\n  const [featuredData, setFeaturetData] = useState([]);\r\n  const [id, setId] = useState(\"\");\r\n  console.log(id)\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  // const currentdate = moment().format(\"\");\r\n  const [searchdata, setsearchData] = useState({\r\n    end_date: \"\",\r\n    start_date: \"\",\r\n    category: \"\",\r\n    brand: \"\",\r\n    vendor: \"\",\r\n    product_title_name: \"\",\r\n    status: \"\",\r\n  });\r\n  const [filtervategory, setfiltercategory] = useState([]);\r\n  const [vendorid, setVendorId] = useState([]);\r\n  const [searcherror, setsearcherror] = useState(\"\");\r\n  console.log(searcherror)\r\n  const [Alert, setAlert] = useState(false);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n\r\n  let token = localStorage.getItem(\"token\");\r\n  let cat_name_data = \"\";\r\n  const getCategoryNameData = () => {\r\n    try {\r\n      axios\r\n        .get(\r\n          `${process.env.REACT_APP_BASEURL_0}/category_name`,\r\n          // { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n\r\n          cat_name_data = response.data[0];\r\n          // setVid(\"\")\r\n        });\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n\r\n\r\n  };\r\n  useEffect(() => {\r\n    getCategoryNameData();\r\n\r\n  }, [apicall])\r\n  /*<---Category list api---> */\r\n  const getCategorydatafilter = () => {\r\n    try {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL_0}/category?category=all`)\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n          setfiltercategory(cgory);\r\n        });\r\n    } catch (err) { }\r\n  };\r\n  /*<---Category list api---> */\r\n  const getVendorData = () => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/vendors`,\r\n          { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n\r\n          const result = cgory.filter(\r\n            (thing, index, self) =>\r\n              index === self.findIndex((t) => t.shop_name === thing.shop_name)\r\n          );\r\n          const result1 = result.filter(\r\n            (item) => item.status === \"approved\" || item.status === \"active\"\r\n          );\r\n          setVendorId(result1);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  let closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n\r\n  /*<---Onchange function of search --->*/\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n  /*<---Function to reset Search--->*/\r\n  const OnReset = () => {\r\n    setsearchData({\r\n      product_title_name: \"\",\r\n      status: \"\",\r\n      category: \"\",\r\n      brand: \"\",\r\n      vendor: \"\",\r\n    });\r\n    setsearcherror(false);\r\n    setapicall(true);\r\n  };\r\n  /*<---Onlick Function to Search--->*/\r\n  const Search = () => {\r\n    if (\r\n      searchdata.status === \"\" &&\r\n      searchdata.product_title_name === \"\" &&\r\n      searchdata.vendor === \"\" &&\r\n      searchdata.brand === \"\" &&\r\n      searchdata.category === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      setsearcherror(false);\r\n      setapicall(true);\r\n    }\r\n  };\r\n\r\n  // const OnDateChange = (e) => {\r\n  //   let mdate = moment(e.target.value).format(\"YYYY-MM-DD\");\r\n  //   setsearchData({ ...searchdata, [e.target.name]: mdate });\r\n  // };\r\n  const hideAlert = () => setAlert(false);\r\n\r\n  const handleClose = (e) => {\r\n    e.preventDefault();\r\n    setShow(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let productArry = [];\r\n\r\n    setloading(true);\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/fetured_product_search`,\r\n          {\r\n            product_id: \"\",\r\n            fetured_type: \"special_offer\",\r\n            start_date: /*`${searchdata.start_date}`*/ \"\",\r\n            end_date: /*`${searchdata.end_date}`*/ \"\",\r\n            category: [`${searchdata.category}`],\r\n            brand: [`${searchdata.brand}`],\r\n            shop: [`${searchdata.vendor}`],\r\n            product_title_name: [`${searchdata.product_title_name}`],\r\n            status: `${searchdata.status}`,\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let v = response.data;\r\n          // console.log(\"daytaaa--\"+JSON.stringify(response.data[0].fetured_product_table_id))\r\n\r\n          v.forEach(function (item, index) {\r\n            let catname = cat_name_data[item.category];\r\n            if (catname !== undefined || catname !== null || catname !== \"\") {\r\n              item.category = catname;\r\n            }\r\n            productArry.push(item)\r\n          }\r\n          )\r\n\r\n\r\n          setOfferProductData(productArry);\r\n          setapicall(false);\r\n          setloading(false);\r\n        });\r\n    } catch (err) { }\r\n    getCategorydatafilter();\r\n    getVendorData();\r\n  }, [apicall]);\r\n\r\n  const columns = [\r\n    {\r\n      name: \"#\",\r\n      width: \"100px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <img\r\n          alt={\"apna_organic\"}\r\n          src={\r\n            row.all_images\r\n              ? row.all_images\r\n              : \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n          }\r\n          style={{\r\n            padding: 10,\r\n            textAlign: \"right\",\r\n            maxHeight: \"100px\",\r\n            maxWidth: \"100px\",\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => (\r\n        <div>\r\n          <p className=\"mb-1\">\r\n            <b>\r\n              {row.product_title_name}\r\n              <br />\r\n            </b>\r\n            {/* Product ID: {row.product_id} <br /> */}\r\n            <span className=\"d-flex flex-column \">\r\n              {row.is_featured === 1 ? (\r\n                <span className={\"badge bg-warning mt-1\"}>\r\n                  {\"featured product\"}\r\n                </span>\r\n              ) : null}\r\n              {row.is_special_offer === 1 ? (\r\n                <span className={\"badge bg-info mt-1\"}>{\"special offer\"}</span>\r\n              ) : null}\r\n            </span>\r\n          </p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n      width: \"200px\",\r\n    },\r\n    {\r\n      name: \"Category\",\r\n      selector: (row) => row.category,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Vendor\",\r\n      selector: (row) => row.shop,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Product Type\",\r\n      selector: (row) => row.product_type,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Brand\",\r\n      selector: (row) => row.brand,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    // {\r\n    //   name: \"Product ID\",\r\n    //   selector: (row) => row.product_id,\r\n    //   sortable: true,\r\n    //   width: \"250px\",\r\n    //   center: true,\r\n    //   style: {\r\n    //     paddingRight: \"32px\",\r\n    //     paddingLeft: \"0px\",\r\n    //   },\r\n    // },\r\n    {\r\n      name: \"Fetured_type\",\r\n      selector: (row) => row.fetured_type,\r\n      sortable: true,\r\n      width: \"250px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    // {\r\n    //   name: \"Status\",\r\n    //   selector: (row) => (\r\n    //     <span\r\n    //       className={\r\n    //         (currentdate > row.start_date || currentdate === row.start_date) &&\r\n    //           currentdate < row.end_date\r\n    //           ? \"badge bg-success\"\r\n    //           : currentdate > row.end_date || currentdate === row.end_date\r\n    //             ? \"badge bg-danger\"\r\n    //             : currentdate < row.start_date\r\n    //               ? \"badge bg-info\"\r\n    //               : null\r\n    //       }\r\n    //     >\r\n    //       {(currentdate > row.start_date || currentdate === row.start_date) &&\r\n    //         currentdate < row.end_date\r\n    //         ? \"Active\"\r\n    //         : currentdate > row.end_date || currentdate === row.end_date\r\n    //           ? \"Expired\"\r\n    //           : currentdate < row.start_date\r\n    //             ? \"In Active\"\r\n    //             : null}\r\n    //     </span>\r\n    //   ),\r\n    //   sortable: true,\r\n    //   width: \"200px\",\r\n    // },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <Badge\r\n          bg={\r\n            row.status === \"pending\"\r\n              ? \"badge bg-info\"\r\n              : row.status === \"expired\"\r\n                ? \"badge bg-danger\"\r\n                : row.status === \"publish\"\r\n                  ? \"badge bg-success\"\r\n                  : null\r\n          }\r\n        >\r\n          {row.status}\r\n        </Badge>\r\n      ),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      // center: true,\r\n    },\r\n    {\r\n      name: \"Start Date\",\r\n      selector: (row) => moment(row.start_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"End Date\",\r\n      selector: (row) => moment(row.end_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"100px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.product_id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const handleFormChange = (e) => {\r\n    setFeaturetData({ ...featuredData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleShow = (product_id) => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/fetured_product_search`,\r\n          {\r\n            product_id: product_id,\r\n            fetured_type: \"special_offer\",\r\n            start_date: \"\",\r\n            end_date: \"\",\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setId(response.data[0].id);\r\n          setFeaturetData({\r\n            ...featuredData,\r\n            start_date: response.data[0].start_date,\r\n\r\n            end_date: response.data[0].end_date,\r\n          });\r\n          setapicall(false);\r\n        });\r\n    } catch (err) { }\r\n    setShow(true);\r\n  };\r\n\r\n\r\n  const UpdateOfferProduct = (e) => {\r\n    const form = e.currentTarget;\r\n\r\n    if (form.checkValidity() === false || featuredData.start_date === \"\" || featuredData.end_date === \"\"\r\n      || featuredData.start_date > featuredData.end_date) {\r\n      e.preventDefault();\r\n      setValidated(true);\r\n    }\r\n\r\n    else {\r\n      axios\r\n        .put(\r\n          `${process.env.REACT_APP_BASEURL_0}/update_fetured_product`,\r\n          {\r\n            id: offerProductData[0].fetured_product_table_id,\r\n            start_date: featuredData.start_date,\r\n            end_date: featuredData.end_date,\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setValidated(true)\r\n          setapicall(true);\r\n          setShow(false);\r\n          setUpdateAlert(true);\r\n\r\n        });\r\n      e.preventDefault();\r\n      setValidated(false);\r\n      formRef.current.reset();\r\n      // setValidated(false);\r\n    }\r\n\r\n\r\n  };\r\n  // const UpdateOfferProduct = (e) => {\r\n  //   // let v=offerProductData;\r\n  //   e.preventDefault();\r\n  //   axios\r\n  //     .put(\r\n  //       `${process.env.REACT_APP_BASEURL_0}/update_fetured_product`,\r\n  //       {\r\n  //         id: offerProductData[0].fetured_product_table_id,\r\n  //         start_date: featuredData.start_date,\r\n  //         end_date: featuredData.end_date,\r\n  //       },\r\n  //       {\r\n  //         headers: { admin_token: `${token}` },\r\n  //       }\r\n  //     )\r\n  //     .then((response) => {\r\n  //       let data = response.data;\r\n  //       setapicall(true);\r\n  //       setShow(false);\r\n  //       setUpdateAlert(true);\r\n  //     });\r\n  //   formRef.current.reset();\r\n  // };\r\n  // const submitHandler = () => {\r\n  //   setapicall(true);\r\n  // };\r\n  /*Calculation for today's date */\r\n  // let date = moment();\r\n  // let currentDate = date.format(\"YYYY-MM-DD\");\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n      <div>\r\n        <h2> Special Offer Products</h2>\r\n\r\n        {/* search bar */}\r\n        <div className=\"card mt-3 p-3 \">\r\n          {/* <div className=\"row pb-3\"> */}\r\n          {/* <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <input onChange={OnSearchChange} name='product_title_name'\r\n              value={searchdata.product_title_name}\r\n              className={'adminsideinput'} type={\"text\"} placeholder={\"Search by product name\"} />\r\n          </div> */}\r\n\r\n          {/* <div className=\"col-md-3 col-sm-6 aos_input value={}\">\r\n            <input type={\"date\"} onChange={OnDateChange} name='start_date'\r\n              value={searchdata.start_date}\r\n              className={'adminsideinput'} placeholder={\"Search by date\"} />\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input value={}\">\r\n            <input type={\"date\"} onChange={OnDateChange} name='end_date'\r\n              value={searchdata.end_date}\r\n              className={'adminsideinput'} placeholder={\"Search by date\"} />\r\n          </div> */}\r\n          {/* <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button w-100\"}\r\n            />\r\n          </div> */}\r\n\r\n          {/* <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <MainButton\r\n              onClick={submitHandler}\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button w-100\"}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Reset\"}\r\n              btnclass={\"button main_button w-100\"}\r\n              type=\"reset\"\r\n              onClick={OnReset}\r\n            />\r\n          </div> */}\r\n          {/* </div> */}\r\n          <div className=\"card mt-3 p-3\">\r\n            <div className=\"row pb-3\">\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <input\r\n                  type={\"text\"}\r\n                  placeholder={\"Search by product name\"}\r\n                  onChange={OnSearchChange}\r\n                  name=\"product_title_name\"\r\n                  value={searchdata.product_title_name}\r\n                  className={\"form-control\"}\r\n                />{\" \"}\r\n                {/* {searcherror === true ? (\r\n                  <small className=\"text-danger\">please fill the feild</small>\r\n                ) : null} */}\r\n              </div>\r\n\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <Form.Select\r\n                  aria-label=\"Search by status\"\r\n                  className=\"adminselectbox\"\r\n                  placeholder=\"Search by category\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"category\"\r\n                  value={String(searchdata.category)}\r\n                >\r\n                  <option value={\"\"}>Select Category</option>\r\n                  {(filtervategory || []).map((data, i) => {\r\n                    return (\r\n                      <option value={data.id} key={i}>\r\n                        {\" \"}\r\n                        {data.category_name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <Form.Select\r\n                  aria-label=\"Search by status\"\r\n                  className=\"adminselectbox\"\r\n                  placeholder=\"Search by vendor\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"vendor\"\r\n                  value={String(searchdata.vendor)}\r\n                >\r\n                  <option value={\"\"}>Select Vendor</option>\r\n                  {(vendorid || []).map((data, i) => {\r\n                    return (\r\n                      <option value={data.shop_name} key={i}>\r\n                        {\" \"}\r\n                        {data.shop_name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <Form.Select\r\n                  aria-label=\"Search by brand\"\r\n                  className=\"adminselectbox\"\r\n                  placeholder=\"Search by brand\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"brand\"\r\n                  value={String(searchdata.brand)}\r\n                >\r\n                  <option value={\"\"}>Select Brand</option>\r\n                  {(BrandJson.BrandJson || []).map((data, i) => {\r\n                    return (\r\n                      <option value={data} key={i}>\r\n                        {\" \"}\r\n                        {data}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <Form.Select\r\n                  aria-label=\"Search by delivery\"\r\n                  className=\"adminselectbox\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"status\"\r\n                  value={String(searchdata.status)}\r\n                >\r\n                  <option value=\"\">status</option>\r\n                  <option value=\"publish\">Publish</option>\r\n                  <option value=\"expired\">Expired</option>\r\n                  <option value=\"pending\">Pending</option>\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <MainButton\r\n                  btntext={\"Search\"}\r\n                  btnclass={\"button main_button w-100\"}\r\n                  onClick={Search}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <MainButton\r\n                  btntext={\"Reset\"}\r\n                  btnclass={\"button main_button w-100\"}\r\n                  type=\"reset\"\r\n                  onClick={OnReset}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* upload */}\r\n\r\n          <Modal size=\"lg\" show={show} onHide={() => setShow(false)}>\r\n            <Form className=\"\" noValidate\r\n              validated={validated} ref={formRef}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title></Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div className=\"row p-3 m-0\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group\r\n                      className=\"mb-3 aos_input\"\r\n                      controlId=\"formBasicStartDate\"\r\n                    >\r\n                      <Form.Label>Start Date</Form.Label>\r\n                      <Form.Control\r\n                        type=\"date\"\r\n                        sm=\"9\"\r\n                        required\r\n                        placeholder=\"Coupon Start Date\"\r\n                        min={moment().format(\r\n                          \"YYYY-MM-DD\"\r\n                        )}\r\n\r\n                        onChange={(e) =>\r\n                          handleFormChange(e)\r\n                        }\r\n                        name={\"start_date\"}\r\n                        value={\r\n                          featuredData.start_date\r\n                        }\r\n                      />\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group\r\n                      className=\"mb-3 aos_input\"\r\n                      controlId=\"formBasicStartDate\"\r\n                    >\r\n                      <Form.Label>End Date</Form.Label>\r\n                      <Form.Control\r\n                        type=\"date\"\r\n                        sm=\"9\"\r\n                        required\r\n                        disabled={\r\n                          featuredData.start_date\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        min={moment(\r\n                          featuredData.start_date\r\n                        )\r\n                          .add(1, \"day\")\r\n                          .format(\"YYYY-MM-DD\")}\r\n                        onChange={(e) =>\r\n                          handleFormChange(e)\r\n                        }\r\n                        name={\"end_date\"}\r\n                        value={\r\n                          featuredData.end_date\r\n                        }\r\n                      />\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button\r\n                  className=\"button main_outline_button\"\r\n                  onClick={handleClose}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  className=\"button main_outline_button\"\r\n                  onClick={UpdateOfferProduct}\r\n                >\r\n                  Update\r\n                </button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n\r\n          {/* datatable */}\r\n\r\n          <DataTable\r\n            columns={columns}\r\n            data={offerProductData}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n            className={\"table_body featuredproduct_table\"}\r\n          />\r\n          <SAlert\r\n            show={Alert}\r\n            title=\"Product Name\"\r\n            text=\"Are you Sure you want to remove\"\r\n            onConfirm={hideAlert}\r\n            showCancelButton={true}\r\n            onCancel={hideAlert}\r\n          />\r\n          <SAlert\r\n            show={UpdateAlert}\r\n            title=\"Offer Products Updated Successfully \"\r\n            onConfirm={closeUpdateAlert}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Offerproduct;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\promotionproduct.js",["459","460","461"],[],"import React, { useState, useRef, useEffect } from \"react\";\r\n// import Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n// import SweetAlert from \"sweetalert-react\";\r\nimport \"sweetalert/dist/sweetalert.css\";\r\n// import { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport SAlert from \"../common/salert\";\r\nimport Loader from \"../common/loader\";\r\nimport BrandJson from \"./../json/BrandJson\";\r\nimport { Badge } from \"react-bootstrap\";\r\n\r\nconst Promotionproduct = () => {\r\n  const formRef = useRef();\r\n  // let userid = localStorage.getItem(\"userid\");\r\n  const [promotionProductData, setpromotionProductData] = useState([]);\r\n  // console.log(\"--\")\r\n  // console.log(promotionProductData)\r\n\r\n  const [Alert, setAlert] = useState(false);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const [featuredData, setFeaturetData] = useState([]);\r\n  const [validated, setValidated] = useState(false);\r\n  console.log(validated)\r\n  // const [id, setId] = useState(\"\");\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n  // const currentdate = moment().format(\"\");\r\n  const [searchdata, setsearchData] = useState({\r\n    start_date: \"\",\r\n    end_date: \"\",\r\n    status: \"\",\r\n    category: \"\",\r\n    brand: \"\",\r\n    product_title_name: \"\",\r\n    vendor: \"\",\r\n  });\r\n  const [filtervategory, setfiltercategory] = useState([]);\r\n  const [vendorid, setVendorId] = useState([]);\r\n  const [searcherror, setsearcherror] = useState(\"\");\r\n  console.log(searcherror)\r\n\r\n  let token = localStorage.getItem(\"token\");\r\n\r\n  // const handleAlert = () => setAlert(true);\r\n  const hideAlert = () => setAlert(false);\r\n  /*<---Category list api---> */\r\n  const getCategorydatafilter = () => {\r\n    try {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL_0}/category?category=all`)\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n          setfiltercategory(cgory);\r\n        });\r\n    } catch (err) { }\r\n  };\r\n  /*<---Category list api---> */\r\n  const getVendorData = () => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/vendors`,\r\n          { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n\r\n          const result = cgory.filter(\r\n            (thing, index, self) =>\r\n              index === self.findIndex((t) => t.shop_name === thing.shop_name)\r\n          );\r\n          const result1 = result.filter(\r\n            (item) => item.status === \"approved\" || item.status === \"active\"\r\n          );\r\n          setVendorId(result1);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  /*<---Function to close sweet alter of update--->*/\r\n  const hideUpdateAlert = () => setUpdateAlert(false);\r\n\r\n  // const OnDateChange = (e) => {\r\n  //   let mdate = moment(e.target.value).format(\"YYYY-MM-DD\");\r\n  //   setsearchData({ ...searchdata, [e.target.name]: mdate });\r\n  // };\r\n  /*<---Function to close the modal--->*/\r\n  const handleClose = (e) => {\r\n    e.preventDefault();\r\n    setShow(false);\r\n  };\r\n\r\n  // const handleClick = () => { };\r\n\r\n  /*<----Table data---->*/\r\n  const columns = [\r\n    {\r\n      name: \"#\",\r\n      width: \"100px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <img\r\n          alt={\"apna_organic\"}\r\n          src={\r\n            row.all_images\r\n              ? row.all_images\r\n              : \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n          }\r\n          style={{\r\n            padding: 10,\r\n            textAlign: \"right\",\r\n            maxHeight: \"100px\",\r\n            maxWidth: \"100px\",\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => (\r\n        <div>\r\n          <p className=\"mb-1\">\r\n            <b>\r\n              {row.product_title_name}\r\n              <br />\r\n            </b>\r\n            {/* Product ID: {row.product_id} <br /> */}\r\n            <span className=\"d-flex flex-column \">\r\n              {row.is_featured === 1 ? (\r\n                <span className={\"badge bg-warning mt-1\"}>\r\n                  {\"featured product\"}\r\n                </span>\r\n              ) : null}\r\n              {row.is_special_offer === 1 ? (\r\n                <span className={\"badge bg-info mt-1\"}>{\"special offer\"}</span>\r\n              ) : null}\r\n            </span>\r\n          </p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n      width: \"200px\",\r\n    },\r\n    {\r\n      name: \"Category\",\r\n      selector: (row) => row.category,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Vendor\",\r\n      selector: (row) => row.shop,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Product Type\",\r\n      selector: (row) => row.product_type,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Brand\",\r\n      selector: (row) => row.brand,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    // {\r\n    //   name: \"Product ID\",\r\n    //   selector: (row) => row.product_id,\r\n    //   sortable: true,\r\n    //   width: \"150px\",\r\n    //   center: true,\r\n    //   style: {\r\n    //     paddingLeft: 0,\r\n    //   },\r\n    // },\r\n\r\n    {\r\n      name: \"Fetured_type\",\r\n      selector: (row) => row.fetured_type,\r\n      sortable: true,\r\n      width: \"250px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <Badge\r\n          bg={\r\n            row.status === \"pending\"\r\n              ? \"badge bg-info\"\r\n              : row.status === \"expired\"\r\n                ? \"badge bg-danger\"\r\n                : row.status === \"publish\"\r\n                  ? \"badge bg-success\"\r\n                  : null\r\n          }\r\n        >\r\n          {row.status}\r\n        </Badge>\r\n      ),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      // center: true,\r\n    },\r\n    // {\r\n    //   name: \"Status\",\r\n    //   selector: (row) => (\r\n    //     <span\r\n    //       className={\r\n    //         (currentdate > row.start_date || currentdate === row.start_date) &&\r\n    //           currentdate < row.end_date\r\n    //           ? \"badge bg-success\"\r\n    //           : currentdate > row.end_date || currentdate === row.end_date\r\n    //             ? \"badge bg-danger\"\r\n    //             : currentdate < row.start_date\r\n    //               ? \"badge bg-info\"\r\n    //               : null\r\n    //       }\r\n    //     >\r\n    //       {(currentdate > row.start_date || currentdate === row.start_date) &&\r\n    //         currentdate < row.end_date\r\n    //         ? \"Active\"\r\n    //         : currentdate > row.end_date || currentdate === row.end_date\r\n    //           ? \"Expired\"\r\n    //           : currentdate < row.start_date\r\n    //             ? \"In Active\"\r\n    //             : null}\r\n    //     </span>\r\n    //   ),\r\n    //   sortable: true,\r\n    //   width: \"200px\",\r\n    // },\r\n    {\r\n      name: \"Start Date\",\r\n      selector: (row) => moment(row.start_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"End Date\",\r\n      selector: (row) => moment(row.end_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"100px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.vendor_id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  const handleFormChange = (e) => {\r\n    setFeaturetData({ ...featuredData, [e.target.name]: e.target.value });\r\n  };\r\n  /*<---Function to get data--->*/\r\n  const handleShow = (vendor_id) => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/fetured_product_search`,\r\n          {\r\n            vendor_id: vendor_id,\r\n            fetured_type: \"promotional\",\r\n            start_date: \"\",\r\n            end_date: \"\",\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // setId(response.data[0].id);\r\n          setFeaturetData({\r\n            ...featuredData,\r\n            start_date: response.data[0].start_date,\r\n\r\n            end_date: response.data[0].end_date,\r\n          });\r\n\r\n          setapicall(false);\r\n        });\r\n    } catch (err) { }\r\n    setShow(true);\r\n  };\r\n  let cat_name_data = \"\";\r\n  const getCategoryNameData = () => {\r\n    try {\r\n      axios\r\n        .get(\r\n          `${process.env.REACT_APP_BASEURL_0}/category_name`,\r\n          // { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n\r\n          cat_name_data = response.data[0];\r\n          // setVid(\"\")\r\n        });\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n\r\n\r\n  };\r\n  useEffect(() => {\r\n    getCategoryNameData();\r\n\r\n  }, [apicall])\r\n  useEffect(() => {\r\n    let productArry = [];\r\n\r\n    setloading(true);\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/fetured_product_search`,\r\n          {\r\n            vendor_id: \"\",\r\n            fetured_type: \"promotional\",\r\n            start_date: /*`${searchdata.start_date}`*/ \"\",\r\n            end_date: /*`${searchdata.end_date}`*/ \"\",\r\n            category: [`${searchdata.category}`],\r\n            brand: [`${searchdata.brand}`],\r\n            shop: [`${searchdata.vendor}`],\r\n            product_title_name: [`${searchdata.product_title_name}`],\r\n            status: `${searchdata.status}`,\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setpromotionProductData(response.data);\r\n          console.log(\"promotional\")\r\n          console.log(response.data)\r\n\r\n          let v = response.data;\r\n\r\n          v.forEach(function (item, index) {\r\n\r\n            let catname = cat_name_data[item.category];\r\n            if (catname !== undefined || catname !== null || catname !== \"\") {\r\n              item.category = catname;\r\n            }\r\n            productArry.push(item)\r\n          }\r\n          )\r\n\r\n\r\n          setpromotionProductData(productArry);\r\n\r\n          setapicall(false);\r\n          setloading(false);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    getCategorydatafilter();\r\n    getVendorData();\r\n  }, [apicall]);\r\n  // useEffect(()=>{\r\n  //   getCategoryNameData();\r\n\r\n  //  },[apicall])\r\n  /*<---Function to Search--->*/\r\n  useEffect(() => {\r\n    let productArry = [];\r\n\r\n    setloading(true);\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/fetured_product_search`,\r\n          {\r\n            vendor_id: \"\",\r\n            fetured_type: \"promotional\",\r\n            start_date: /*`${searchdata.start_date}`*/ \"\",\r\n            end_date: /*`${searchdata.end_date}`*/ \"\",\r\n            category: [`${searchdata.category}`],\r\n            brand: [`${searchdata.brand}`],\r\n            shop: [`${searchdata.vendor}`],\r\n            product_title_name: [`${searchdata.product_title_name}`],\r\n            status: `${searchdata.status}`,\r\n\r\n\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let v = response.data;\r\n\r\n          v.forEach(function (item, index) {\r\n            console.log(\"item\")\r\n            console.log(item.category)\r\n            let catname = cat_name_data[item.category];\r\n            if (catname !== undefined || catname !== null || catname !== \"\") {\r\n              item.category = catname;\r\n            }\r\n            productArry.push(item)\r\n          }\r\n          )\r\n\r\n\r\n          setpromotionProductData(productArry);\r\n          setapicall(false);\r\n          setloading(false);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    getCategorydatafilter();\r\n    getVendorData();\r\n  }, [apicall]);\r\n\r\n  /*<---Function to Update promotion product--->*/\r\n  const UpdatePromotionProduct = (e) => {\r\n    const form = e.currentTarget;\r\n\r\n    if (form.checkValidity() === false || featuredData.start_date === \"\" || featuredData.end_date === \"\"\r\n      || featuredData.start_date > featuredData.end_date) {\r\n      e.preventDefault();\r\n      setValidated(true);\r\n    }\r\n\r\n    else {\r\n      axios\r\n        .put(\r\n          `${process.env.REACT_APP_BASEURL_0}/update_fetured_product`,\r\n          {\r\n            id: promotionProductData[0].fetured_product_table_id,\r\n            start_date: featuredData.start_date,\r\n            end_date: featuredData.end_date,\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // let data = response.data;\r\n          setValidated(true);\r\n\r\n          setapicall(true);\r\n          setShow(false);\r\n          setUpdateAlert(true);\r\n        });\r\n      e.preventDefault();\r\n      setValidated(false);\r\n      formRef.current.reset();\r\n      // setValidated(false);\r\n    }\r\n\r\n\r\n  };\r\n\r\n  // const UpdatePromotionProduct = (e) => {\r\n  //   e.preventDefault();\r\n  //   axios\r\n  //     .put(`${process.env.REACT_APP_BASEURL}/update_fetured_product`, {\r\n  //       id: id,\r\n  //       start_date: featuredData.start_date,\r\n  //       end_date: featuredData.end_date,\r\n  //     })\r\n  //     .then((response) => {\r\n  //       let data = response.data;\r\n  //       setapicall(true);\r\n  //       setShow(false);\r\n  //       setUpdateAlert(true);\r\n  //     });\r\n  //   formRef.current.reset();\r\n  // };\r\n\r\n  // const submitHandler = () => {\r\n  //   setapicall(true);\r\n  // };\r\n\r\n  // const OnReset = () => {\r\n  //   setsearchData({ start_date: \"\", end_date: \"\" });\r\n  //   setapicall(true);\r\n  // };\r\n\r\n  /*<---Onchange function of search --->*/\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n  };\r\n  /*<---Function to reset Search--->*/\r\n  const OnReset = () => {\r\n    setsearchData({\r\n      product_title_name: \"\",\r\n      status: \"\",\r\n      category: \"\",\r\n      brand: \"\",\r\n      vendor: \"\",\r\n    });\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n\r\n  /*<---Onlick Function to Search--->*/\r\n  const Search = () => {\r\n    if (\r\n      searchdata.status === \"\" &&\r\n      searchdata.product_title_name === \"\" &&\r\n      searchdata.vendor === \"\" &&\r\n      searchdata.brand === \"\" &&\r\n      searchdata.category === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      setsearcherror(false);\r\n      setapicall(true);\r\n    }\r\n  };\r\n  /*Calculation for today's date */\r\n  let date = moment();\r\n  let currentDate = date.format(\"YYYY-MM-DD\");\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n      <div>\r\n        <h2>Promotional Products</h2>\r\n\r\n        {/* search bar */}\r\n        <div className=\"card mt-3 p-3 \">\r\n          {/* <div className=\"row pb-3\"> */}\r\n          {/* <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <input onChange={OnSearchChange} name='product_title_name'\r\n              value={searchdata.product_title_name}\r\n              className={'adminsideinput'} type={\"text\"} placeholder={\"Search by product name\"} />\r\n          </div> */}\r\n          {/*           \r\n          <div className=\"col-md-3 col-sm-6 aos_input value={}\">\r\n            <input type={\"date\"} onChange={OnDateChange} name='start_date'\r\n              value={searchdata.start_date}\r\n              className={'adminsideinput'} placeholder={\"Search by product name\"} />\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input value={}\">\r\n            <input type={\"date\"} onChange={OnDateChange} name='end_date'\r\n              value={searchdata.end_date}\r\n              className={'adminsideinput'} placeholder={\"Search by product name\"} />\r\n          </div> */}\r\n          {/* <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button w-100\"}\r\n            />\r\n          </div> */}\r\n          {/* <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <MainButton\r\n              onClick={submitHandler}\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button w-100\"}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Reset\"}\r\n              btnclass={\"button main_button w-100\"}\r\n              type=\"reset\"\r\n              onClick={OnReset}\r\n            />\r\n          </div> */}\r\n          {/* </div> */}\r\n          <div className=\"card mt-3 p-3\">\r\n            <div className=\"row pb-3\">\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <input\r\n                  type={\"text\"}\r\n                  placeholder={\"Search by product name\"}\r\n                  onChange={OnSearchChange}\r\n                  name=\"product_title_name\"\r\n                  value={searchdata.product_title_name}\r\n                  className={\"form-control\"}\r\n                />{\" \"}\r\n                {/* {searcherror === true ? (\r\n                  <small className=\"text-danger\">please fill the feild</small>\r\n                ) : null} */}\r\n              </div>\r\n\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <Form.Select\r\n                  aria-label=\"Search by category\"\r\n                  className=\"adminselectbox\"\r\n                  placeholder=\"Search by category\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"category\"\r\n                  value={String(searchdata.category)}\r\n                >\r\n                  <option value={\"\"}>Select Category</option>\r\n                  {(filtervategory || []).map((data, i) => {\r\n                    return (\r\n                      <option value={data.id} key={i}>\r\n                        {\" \"}\r\n                        {data.category_name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <Form.Select\r\n                  aria-label=\"Search by status\"\r\n                  className=\"adminselectbox\"\r\n                  placeholder=\"Search by vendor\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"vendor\"\r\n                  value={String(searchdata.vendor)}\r\n                >\r\n                  <option value={\"\"}>Select Vendor</option>\r\n                  {(vendorid || []).map((data, i) => {\r\n                    return (\r\n                      <option value={data.shop_name} key={i}>\r\n                        {\" \"}\r\n                        {data.shop_name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <Form.Select\r\n                  aria-label=\"Search by brand\"\r\n                  className=\"adminselectbox\"\r\n                  placeholder=\"Search by brand\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"brand\"\r\n                  value={String(searchdata.brand)}\r\n                >\r\n                  <option value={\"\"}>Select Brand</option>\r\n                  {(BrandJson.BrandJson || []).map((data, i) => {\r\n                    return (\r\n                      <option value={data} key={i}>\r\n                        {\" \"}\r\n                        {data}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                <Form.Select\r\n                  aria-label=\"Search by delivery\"\r\n                  className=\"adminselectbox\"\r\n                  onChange={OnSearchChange}\r\n                  name=\"status\"\r\n                  value={String(searchdata.status)}\r\n                >\r\n                  <option value=\"\">status</option>\r\n                  <option value=\"publish\">Publish</option>\r\n                  <option value=\"expired\">Expired</option>\r\n                  <option value=\"pending\">Pending</option>\r\n                </Form.Select>\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2 \">\r\n                <MainButton\r\n                  btntext={\"Search\"}\r\n                  btnclass={\"button main_button w-100\"}\r\n                  onClick={Search}\r\n                />\r\n              </div>\r\n              <div className=\"col-md-3 col-sm-6 aos_input mb-2 \">\r\n                <MainButton\r\n                  btntext={\"Reset\"}\r\n                  btnclass={\"button main_button w-100\"}\r\n                  type=\"reset\"\r\n                  onClick={OnReset}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* upload */}\r\n\r\n          <Modal size=\"lg\" show={show} onHide={() => setShow(false)}>\r\n            <Form className=\"\" ref={formRef}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title></Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div className=\"row p-3 m-0\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group\r\n                      className=\"mb-3 aos_input\"\r\n                      controlId=\"formBasicStartDate\"\r\n                    >\r\n                      <Form.Label>Start Date</Form.Label>\r\n                      {console.log(featuredData.start_date)}\r\n                      <Form.Control\r\n                        name=\"start_date\"\r\n                        value={featuredData.start_date}\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        type=\"date\"\r\n                        placeholder=\"Coupon Start Date\"\r\n                        min={currentDate}\r\n                      />\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group\r\n                      className=\"mb-3 aos_input\"\r\n                      controlId=\"formBasicStartDate\"\r\n                    >\r\n                      <Form.Label>End Date</Form.Label>\r\n                      {console.log(featuredData.start_date)}\r\n\r\n                      <Form.Control\r\n                        name=\"end_date\"\r\n                        value={featuredData.end_date}\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        type=\"date\"\r\n                        placeholder=\"Coupon Start Date\"\r\n                        min={featuredData.start_date}\r\n                      />\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button\r\n                  className=\"button main_outline_button\"\r\n                  onClick={handleClose}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  className=\"button main_outline_button\"\r\n                  onClick={UpdatePromotionProduct}\r\n                >\r\n                  Update\r\n                </button>\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n\r\n          {/* datatable */}\r\n\r\n          <DataTable\r\n            columns={columns}\r\n            data={promotionProductData}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n            className={\"table_body featuredproduct_table\"}\r\n          />\r\n          <SAlert\r\n            show={Alert}\r\n            title=\"Product Name\"\r\n            text=\"Are you Sure you want to remove\"\r\n            onConfirm={hideAlert}\r\n            showCancelButton={true}\r\n            onCancel={hideAlert}\r\n          />\r\n          <SAlert\r\n            show={UpdateAlert}\r\n            title=\"Promotional Products Updated Successfully \"\r\n            onConfirm={hideUpdateAlert}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Promotionproduct;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\soldproduct.js",["462"],[],"import React, { useEffect, useState } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport BrandJson from \"./../json/BrandJson\";\r\nimport SAlert from \"../common/salert\";\r\nimport Loader from \"../common/loader\";\r\n\r\nconst Soldproduct = () => {\r\n\r\n  const handleClick = () => { };\r\n  let token = localStorage.getItem(\"token\");\r\n  const [show, setShow] = useState(false);\r\n  const [id, setId] = useState(\"\");\r\n  console.log(id)\r\n  const [productData, setProductData] = useState({});\r\n  const [solddata, setsolddata] = useState([]);\r\n  const [apicall, setapicall] = useState([]);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  let [searcherror, setsearcherror] = useState(false);\r\n  let [loading, setloading] = useState(false);\r\n  const [filtervategory, setfiltercategory] = useState([]);\r\n  const [vendorid, setVendorId] = useState([]);\r\n  const [searchdata, setsearchData] = useState({\r\n    product_title_name: \"\",\r\n    category: \"\",\r\n    vendor: \"\",\r\n    brand: \"\",\r\n  });\r\n  const [customvalidation, setCustomvalidation] = useState(false);\r\n\r\n  const closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n  /*<---Category list api---> */\r\n  const getCategorydatafilter = () => {\r\n    try {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL}/category?category=all`)\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n          setfiltercategory(cgory);\r\n        });\r\n    } catch (err) { }\r\n  };\r\n  /*<---vendor list api---> */\r\n  const getVendorData = () => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL}/vendors`,\r\n          { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n\r\n          const result = cgory.filter(\r\n            (thing, index, self) =>\r\n              index === self.findIndex((t) => t.shop_name === thing.shop_name)\r\n          );\r\n          const result1 = result.filter(\r\n            (item) => item.status === \"approved\" || item.status === \"active\"\r\n          );\r\n          setVendorId(result1);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const handleShow = (id, product_id) => {\r\n    try {\r\n      axios\r\n        .get(\r\n          `${process.env.REACT_APP_BASEURL}/products_pricing?id=${id}&product_id=${product_id}`\r\n        )\r\n        .then((response) => {\r\n          let data = response.data;\r\n          setProductData(data[0]);\r\n          setId(data[0].id);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n    setShow(true);\r\n  };\r\n  /* Onchange function to search the product */\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n\r\n  /* OnClick function to search the product */\r\n  const onSearchClick = () => {\r\n    if (\r\n      searchdata.product_title_name === \"\" &&\r\n      searchdata.category === \"\" &&\r\n      searchdata.brand === \"\" &&\r\n      searchdata.vendor === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      setsearcherror(false);\r\n      setapicall(true);\r\n    }\r\n  };\r\n  /* OnClick function to reset the search feilds for the product */\r\n  const OnReset = () => {\r\n    setsearchData({\r\n      product_title_name: \"\",\r\n      category: \"\",\r\n      vendor: \"\",\r\n      brand: \"\",\r\n    });\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n  /* Render function to get data of the product */\r\n  useEffect(() => {\r\n    let productArry = [];\r\n\r\n    setloading(true);\r\n    axios\r\n      .post(`${process.env.REACT_APP_BASEURL_0}/home?page=0&per_page=400`, {\r\n        product_search: {\r\n          search: [`${searchdata.product_title_name}`],\r\n          price_from: \"\",\r\n          price_to: \"\",\r\n          id: \"\",\r\n          sale_price: \"\",\r\n          product_title_name_asc_desc: \"\",\r\n          short_by_updated_on: \"\",\r\n          category: [`${searchdata.category}`],\r\n          brand: [`${searchdata.brand}`],\r\n          shop: [`${searchdata.vendor}`],\r\n          quantity: [\"0\"],\r\n          is_delete: [\"1\"],\r\n        },\r\n      }, {\r\n        headers: { admin_token: `${token}` },\r\n      })\r\n      .then((response) => {\r\n        let v = response.data.results;\r\n        console.log(v)\r\n        v.forEach(function (item, index) {\r\n          console.log(item.category)\r\n          console.log(response.data.category_name[item.category])\r\n          let catname = response.data.category_name[item.category]\r\n          item.category = catname;\r\n          // console.log(\"item\"+JSON.stringify(item))\r\n          productArry.push(item)\r\n        })\r\n        setsearcherror(false);\r\n        // let data = response.data;\r\n        let response_data = {};\r\n        response_data[\"results\"] = productArry;\r\n\r\n        if ((response_data.length = 0)) {\r\n          setsolddata([0]);\r\n        } else {\r\n          setsolddata(response.data);\r\n        }\r\n        setapicall(false);\r\n        setloading(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    getCategorydatafilter();\r\n    getVendorData();\r\n  }, [apicall]);\r\n\r\n  /* Table data */\r\n  const columns = [\r\n    {\r\n      name: \"#\",\r\n      width: \"100px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <img\r\n          alt={\"apna_organic\"}\r\n          src={\r\n            row.all_images\r\n              ? row.all_images\r\n              : \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n          }\r\n          style={{\r\n            padding: 10,\r\n            textAlign: \"right\",\r\n            maxHeight: \"100px\",\r\n            maxWidth: \"100px\",\r\n          }}\r\n          onClick={handleClick}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => (\r\n        <div>\r\n          <p className=\"mb-1\">\r\n            <b>\r\n              {row.product_title_name}\r\n              <br />\r\n            </b>\r\n            {/* Product ID: {row.product_id} <br /> */}\r\n            <span className=\"d-flex flex-column \">\r\n              {row.is_featured === 1 ? (\r\n                <span className={\"badge bg-warning mt-1\"}>\r\n                  {\"featured product\"}\r\n                </span>\r\n              ) : null}\r\n              {row.is_special_offer === 1 ? (\r\n                <span className={\"badge bg-info mt-1\"}>{\"special offer\"}</span>\r\n              ) : null}\r\n            </span>\r\n          </p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n      width: \"200px\",\r\n    },\r\n    {\r\n      name: \"Category\",\r\n      selector: (row) => row.category,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Vendor\",\r\n      selector: (row) => row.shop,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Product Type\",\r\n      selector: (row) => row.product_type,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Brand\",\r\n      selector: (row) => row.brand,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    {\r\n      name: \"Mrp\",\r\n      selector: (row) => (\r\n        <p className=\"m-0\">\r\n          <b>MRP :</b>₹ {Number(row.mrp).toFixed(2)} <br />\r\n          <b>Discount : </b>\r\n          {Number(row.discount).toFixed(2)}%\r\n          {/* {row.discount === \"0\" ? null : row.discount + \"%\"}{\" \"} */}\r\n          <br />\r\n          <b>Product Price:</b>₹ {Number(row.product_price).toFixed(2)} <br />\r\n          <b>Sale Price:</b>₹ {Number(row.sale_price).toFixed(2)} <br />\r\n        </p>\r\n      ),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Tax\",\r\n      selector: (row) => (\r\n        <div className=\"d-flex flex-column\">\r\n          <b>\r\n            Total:\r\n            {Number(row.gst) +\r\n              Number(row.cgst) +\r\n              Number(row.sgst) +\r\n              Number(row.wholesale_sales_tax) +\r\n              Number(row.retails_sales_tax) +\r\n              Number(row.manufacturers_sales_tax) +\r\n              Number(row.value_added_tax) +\r\n              \"%\"}{\" \"}\r\n          </b>{\" \"}\r\n          <div className=\"d-flex\">\r\n            <b>Gst :</b>₹ {Number(row.gst).toFixed(2)}%<b>Cgst : </b>\r\n            {Number(row.cgst).toFixed(2)}%\r\n            {/* {row.discount === \"0\" ? null : row.discount + \"%\"}{\" \"} */}\r\n            <b>Sgst:</b> {Number(row.sgst).toFixed(2)}%\r\n          </div>\r\n          <div className=\"d-flex flex-column\">\r\n            <b>\r\n              wholesale_sales_tax:{Number(row.wholesale_sales_tax).toFixed(2)}%\r\n            </b>{\" \"}\r\n            <b>retails_sales_tax:{Number(row.retails_sales_tax).toFixed(2)}%</b>{\" \"}\r\n            <b>value_added_tax:{Number(row.value_added_tax).toFixed(2)}% </b>\r\n            <b>\r\n              manufacturers_sales_tax:{\" \"}\r\n              {Number(row.manufacturers_sales_tax).toFixed(2)}%\r\n            </b>{\" \"}\r\n          </div>\r\n        </div>\r\n      ),\r\n\r\n      sortable: true,\r\n      width: \"200px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"SP\",\r\n      selector: (row) => row.sale_price.toFixed(2),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"180px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.id, row.product_id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const OnQuntityChange = (e) => {\r\n    setCustomvalidation(\"\");\r\n    setProductData({ ...productData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const OnProductQutUpdate = (e) => {\r\n\r\n    if (\r\n      Number(productData.quantity) > 10000 ||\r\n      Number(productData.quantity) <= 0\r\n    ) {\r\n      setCustomvalidation(\"qtyhigher\");\r\n    } else {\r\n      axios\r\n        .put(\r\n          `${process.env.REACT_APP_BASEURL}/products_varient_update`,\r\n          productData\r\n        )\r\n        .then((response) => {\r\n          // let data = response.data;\r\n          setCustomvalidation(\"\");\r\n          setapicall(true);\r\n          setShow(false);\r\n          setUpdateAlert(true);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setProductData({});\r\n    setShow(false);\r\n  };\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n      <div>\r\n        <h2>Sold Products </h2>\r\n\r\n        {/* search bar */}\r\n        <div className=\"card mt-3 p-3\">\r\n          <div className=\"row pb-3\">\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <input\r\n                type={\"text\"}\r\n                placeholder={\"Search by product name\"}\r\n                onChange={OnSearchChange}\r\n                name=\"product_title_name\"\r\n                value={searchdata.product_title_name}\r\n                className={\"form-control\"}\r\n              />\r\n              {searcherror === true ? (\r\n                <small className=\"text-danger\">please fill the feild</small>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by category\"\r\n                onChange={OnSearchChange}\r\n                name=\"category\"\r\n                value={String(searchdata.category)}\r\n              >\r\n                <option value={\"\"}>Select Category</option>\r\n                {(filtervategory || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.id} key={i}>\r\n                      {\" \"}\r\n                      {data.id}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by vendor\"\r\n                onChange={OnSearchChange}\r\n                name=\"vendor\"\r\n                value={String(searchdata.vendor)}\r\n              >\r\n                <option value={\"\"}>Select Vendor</option>\r\n                {(vendorid || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.shop_name} key={i}>\r\n                      {\" \"}\r\n                      {data.shop_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <Form.Select\r\n                aria-label=\"Search by brand\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by brand\"\r\n                onChange={OnSearchChange}\r\n                name=\"brand\"\r\n                value={String(searchdata.brand)}\r\n              >\r\n                <option value={\"\"}>Select Brand</option>\r\n                {(BrandJson.BrandJson || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data} key={i}>\r\n                      {\" \"}\r\n                      {data}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2 \">\r\n              <MainButton\r\n                btntext={\"Search\"}\r\n                btnclass={\"button main_button w-100\"}\r\n                onClick={onSearchClick}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2 \">\r\n              <MainButton\r\n                btntext={\"Reset\"}\r\n                btnclass={\"button main_button w-100\"}\r\n                type=\"reset\"\r\n                onClick={OnReset}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* upload */}\r\n\r\n          <Modal size=\"lg\" show={show} onHide={() => handleClose()}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Sold Product</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div className=\"row p-3 m-0\">\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input mb-2\"\r\n                    controlId=\"validationCustom01\"\r\n                  >\r\n                    <Form.Label>Product Id</Form.Label>\r\n                    <Form.Control\r\n                      defaultValue={productData.id}\r\n                      type=\"text\"\r\n                      placeholder=\"Add Title\"\r\n                      name={\"id\"}\r\n                      disabled\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n\r\n                <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n                  <label for=\"quantity\">Quantity</label>\r\n                  <input\r\n                    id=\"quantity\"\r\n                    type={\"number\"}\r\n                    placeholder={\"Select quantity\"}\r\n                    onChange={OnQuntityChange}\r\n                    name=\"quantity\"\r\n                    defaultValue={productData.quantity}\r\n                    className={\"adminsideinput\"}\r\n                    max={10000}\r\n                    min={0}\r\n                  />\r\n                </div>\r\n                {customvalidation === \"qtyhigher\" ? (\r\n                  <span className=\"text-danger\">\r\n                    Quantity Cannot exceed more than 10,000\r\n                  </span>\r\n                ) : null}\r\n              </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <button\r\n                className=\"button main_outline_button\"\r\n                onClick={() => handleClose()}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"button main_outline_button\"\r\n                onClick={() => OnProductQutUpdate()}\r\n              >\r\n                Update\r\n              </button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n          {/* datatable */}\r\n\r\n          <DataTable\r\n            columns={columns}\r\n            data={solddata.results}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n            className={\"table_body soldproduct_table\"}\r\n          />\r\n          <SAlert\r\n            show={UpdateAlert}\r\n            title={\"Update sucsessfully\"}\r\n            onConfirm={closeUpdateAlert}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Soldproduct;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\addproduct.js",["463","464","465","466","467","468"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { GiCancel } from \"react-icons/gi\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport MainButton from \"../common/button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\nimport { MdOutlineEdit } from 'react-icons/md';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport VariationJson from '../json/variation';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\nconst Addproduct = (props) => {\r\n  const [addtag, setaddtag] = useState();\r\n  const [pdata, setpdata] = useState([]);\r\n  const [validated, setValidated] = useState(false);\r\n  const [customvalidated, setcustomValidated] = useState(false);\r\n  const [modalshow, setmodalshow] = useState(false);\r\n  const [seoarray, setseoArray] = useState([]);\r\n  const [varietyval, setvarietyval] = useState('');\r\n  const [variantarray, setvariantarray] = useState([]);\r\n  const [headerval, setheaderval] = useState('');\r\n  const [descval, setdescval] = useState('');\r\n  const [variantmainarray, setvariantmainarray] = useState([]);\r\n  const [customarray, setcustomarray] = useState([]);\r\n  const [data1, setdata1] = useState([]);\r\n  const [vdata, setvdata] = useState([]);\r\n  // const [varietyshow, setvarietyShow] = useState(false);\r\n  const formRef = useRef();\r\n  const mainformRef = useRef();\r\n\r\n  var varietyy = VariationJson;\r\n\r\n  // api\r\n\r\n  // api end\r\n  //  json\r\n  const productjson = {\r\n    \"product_title_name\": [\r\n      \"just herbs shampoo\"\r\n    ],\r\n    \"product_slug\": [\r\n      \"just_herbs_123\"\r\n    ],\r\n    \"store_name\": [\r\n      \"w2c_store_lapssi\"\r\n    ],\r\n    \"product_type\": [\r\n      \"organic_shampoo\"\r\n    ],\r\n    \"category\": [\r\n      \"18\"\r\n    ],\r\n    \"parent_category\": [\r\n      \"5,18\"\r\n    ],\r\n    \"product_quantity\": [\r\n      \"250\"\r\n    ],\r\n    \"mrp\": [\r\n      \"600\"\r\n    ],\r\n    \"product_price\": [\r\n      \"500\"\r\n    ],\r\n    \"sale_price\": [\r\n      \"450\"\r\n    ],\r\n    \"discount\": [\r\n      \"10\"\r\n    ],\r\n    \"wholesale_sales_tax\": [\r\n      \"10\"\r\n    ],\r\n    \"manufacturers_sales_tax\": [\r\n      \"10\"\r\n    ],\r\n    \"retails_sales_tax\": [\r\n      \"5\"\r\n    ],\r\n    \"gst\": [\r\n      \"25\"\r\n    ],\r\n    \"value_added_tax\": [\r\n      \"5\"\r\n    ],\r\n    \"manufacturing_date\": [\r\n      \"2022-11-01\"\r\n    ],\r\n    \"expire_date\": [\r\n      \"2022-01-16\"\r\n    ],\r\n    \"quantity\": [\r\n      {\r\n        \"variations\": \"volume\",\r\n        \"volume\": \"300\",\r\n        \"price\": \"250\",\r\n        \"mrp\": \"300\",\r\n        \"sale_price\": \"200\",\r\n        \"discount\": \"10\",\r\n        \"special_offer\": \"on\",\r\n        \"featured_product\": \"on\",\r\n        \"manufacturing_date\": \"2022-11-08\",\r\n        \"expire_date\": \"2022-11-27\",\r\n        \"quantity\": \"50\",\r\n        \"product_img\": [\r\n          \"blob:http://localhost:3000/4737c736-dcc9-4901-a5c9-41efb95667ce\",\r\n          \"blob:http://localhost:3000/e2394413-1533-42f0-858f-babcafefac1e\"\r\n        ]\r\n      },\r\n      {\r\n        \"variations\": \"color\",\r\n        \"colorname\": \"pink\",\r\n        \"size\": \"xl\",\r\n        \"price\": \"250\",\r\n        \"mrp\": \"1400\",\r\n        \"sale_price\": \"200\",\r\n        \"discount\": \"500\",\r\n        \"featured_product\": \"on\",\r\n        \"manufacturing_date\": \"2022-11-25\",\r\n        \"quantity\": \"40\",\r\n        \"product_img\": [\r\n          \"blob:http://localhost:3000/c9b8c6e6-c0b6-49e2-8940-c49e3382eea6\"\r\n        ]\r\n      },\r\n      // {\r\n      //   \"variations\": \"volume\",\r\n      //   \"volume\": \"400\",\r\n      //   \"price\": \"200\",\r\n      //   \"mrp\": \"100\",\r\n      //   \"discount\": \"20\",\r\n      //   \"sale_price\": \"550\",\r\n      //   \"manufacturing_date\": \"2022-11-10\",\r\n      //   \"expire_date\": \"2022-11-27\",\r\n      //   \"quantity\": \"222\",\r\n      //   \"product_img\": [\r\n      //     \"blob:http://localhost:3000/7bde24eb-1e60-496b-b6b6-c3310e1e67ed\"\r\n      //   ]\r\n      // },\r\n      // {\r\n      //   \"variations\": \"weight\",\r\n      //   \"weight\": \"1000\",\r\n      //   \"price\": \"1000\",\r\n      //   \"mrp\": \"2000\",\r\n      //   \"sale_price\": \"150\",\r\n      //   \"discount\": \"100\",\r\n      //   \"manufacturing_date\": \"2022-11-11\",\r\n      //   \"quantity\": \"2000\",\r\n      //   \"product_img\": [\r\n      //     \"blob:http://localhost:3000/1009d8bb-1047-4af6-9440-9edf8687f3e2\"\r\n      //   ]\r\n      // }\r\n    ],\r\n    \"special_offer\": true,\r\n    \"variety\": true,\r\n    \"seo_tag\": [\r\n      \"shampoo\",\r\n      \"herbs\",\r\n      \"organic\"\r\n    ],\r\n    \"add_custom_input\": [\r\n      \"packaging,good quality\",\r\n      \"storage,500gb\"\r\n    ]\r\n  }\r\n  const varietyjson = {\r\n    \"quantity\": [\r\n      {\r\n        \"variations\": \"volume\",\r\n        \"volume\": \"300\",\r\n        \"price\": \"250\",\r\n        \"mrp\": \"300\",\r\n        \"sale_price\": \"200\",\r\n        \"discount\": \"10\",\r\n        \"special_offer\": \"on\",\r\n        \"featured_product\": \"on\",\r\n        \"manufacturing_date\": \"2022-11-08\",\r\n        \"expire_date\": \"2022-11-27\",\r\n        \"quantity\": \"50\",\r\n        \"product_img\": [\r\n          \"blob:http://localhost:3000/4737c736-dcc9-4901-a5c9-41efb95667ce\",\r\n          \"blob:http://localhost:3000/e2394413-1533-42f0-858f-babcafefac1e\"\r\n        ]\r\n      },\r\n      {\r\n        \"variations\": \"color\",\r\n        \"colorname\": \"pink\",\r\n        \"size\": \"xl\",\r\n        \"price\": \"250\",\r\n        \"mrp\": \"1400\",\r\n        \"sale_price\": \"200\",\r\n        \"discount\": \"500\",\r\n        \"featured_product\": \"on\",\r\n        \"manufacturing_date\": \"2022-11-25\",\r\n        \"quantity\": \"40\",\r\n        \"product_img\": [\r\n          \"blob:http://localhost:3000/c9b8c6e6-c0b6-49e2-8940-c49e3382eea6\",\r\n          \"blob:http://localhost:3000/e2394413-1533-42f0-858f-babcafefac1e\"\r\n        ]\r\n      },\r\n    ]\r\n  }\r\n  // json end\r\n  const handleClose = () => {\r\n    setmodalshow(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props.show === 1) {\r\n      setpdata('')\r\n      setmodalshow(true)\r\n    }\r\n    if (props.show === 2) {\r\n      setmodalshow(true)\r\n      setpdata(productjson)\r\n      setseoArray(productjson.seo_tag)\r\n    }\r\n  }, [props.show]);\r\n\r\n  useEffect(() => {\r\n    setvdata(varietyjson)\r\n  }, []);\r\n\r\n  // seotag\r\n  let tagname;\r\n  const ontagchange = (e) => {\r\n    tagname = e.target.value;\r\n    setaddtag(tagname);\r\n  };\r\n\r\n  const tagRemoveClick = (e) => {\r\n    setseoArray(seoarray.filter(item => item !== e));\r\n  }\r\n  const ontagaddclick = (e) => {\r\n    // e.preventDefault();\r\n    setseoArray(seoarray => [...seoarray, addtag]);\r\n    setaddtag('');\r\n  };\r\n  useEffect(() => {\r\n    setpdata({\r\n      ...pdata,\r\n      seo_tag: seoarray\r\n    });\r\n  }, [seoarray]);\r\n  useEffect(() => {\r\n    setvariantmainarray(varietyjson.quantity)\r\n  }, [variantarray]);\r\n  // end seotag\r\n\r\n  // variant\r\n  const newImageUrls = [];\r\n  const imguploadchange = (e) => {\r\n    ([...e.target.files]).forEach((image) => newImageUrls.push(URL.createObjectURL(image)));\r\n    setvariantarray((variantarray) => { return { ...variantarray, product_img: newImageUrls } });\r\n  }\r\n  const onVariantChange = (e) => {\r\n    setvariantarray({\r\n      ...variantarray,\r\n      [e.target.name]: e.target.value\r\n    });\r\n    // setdata1({\r\n    //   ...data1,\r\n    //   [e.target.name]: e.target.value\r\n    // });\r\n  };\r\n  const onVariantaddclick = (e) => {\r\n    if (variantarray !== '') {\r\n      setvariantmainarray(variantmainarray => [...variantmainarray, variantarray]);\r\n      setcustomValidated(false);\r\n    }\r\n    else {\r\n      setcustomValidated(true);\r\n    }\r\n    e.preventDefault();\r\n    formRef.current.reset();\r\n    setvariantarray('');\r\n  }\r\n\r\n  const VariantRemoveClick = (e) => {\r\n    setvariantmainarray(variantmainarray.filter(item => item !== e));\r\n  }\r\n  const VariantEditClick = (e) => {\r\n    setdata1(e)\r\n    setvariantmainarray(variantmainarray.filter(item => item !== e));\r\n  }\r\n  // varint end\r\n\r\n\r\n  // handle click event of the Remove button\r\n  let customvalue;\r\n  const oncustomheadChange = (e) => {\r\n    setheaderval(e.target.value);\r\n  };\r\n  const oncustomdescChange = (e) => {\r\n    setdescval(e.target.value);\r\n  };\r\n  const handleAddClick = (e) => {\r\n    customvalue = headerval + ',' + descval;\r\n\r\n    if (headerval !== '' && descval !== '') {\r\n      setcustomarray(customarray => [...customarray, customvalue]);\r\n      setheaderval('');\r\n      setdescval('');\r\n      setcustomValidated(false);\r\n    }\r\n    else {\r\n      setcustomValidated(true);\r\n    }\r\n  }\r\n  const handleRemoveClick = (e) => {\r\n    setcustomarray(customarray.filter(item => item !== e));\r\n  };\r\n  useEffect(() => {\r\n    setpdata({\r\n      ...pdata,\r\n      add_custom_input: customarray\r\n    });\r\n  }, [customarray]);\r\n  // end\r\n\r\n  const handleInputcheckboxChange = (e) => {\r\n    const target = e.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value\r\n    setpdata({\r\n      ...pdata,\r\n      [e.target.name]: value\r\n    });\r\n\r\n  }\r\n  const handleInputFieldChange = (e) => {\r\n    setpdata({\r\n      ...pdata,\r\n      [e.target.name]: [e.target.value]\r\n    });\r\n  };\r\n  const handleSaveDraft = (e) => {\r\n    // const form = e.currentTarget;\r\n  };\r\n\r\n  const handleAddProduct = (e) => {\r\n    const form = e.currentTarget;\r\n\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      e.preventDefault()\r\n    }\r\n    setValidated(true);\r\n    setcustomValidated(false);\r\n    e.preventDefault();\r\n    mainformRef.current.reset();\r\n    setpdata('');\r\n    setValidated(false);\r\n    // handleClose();\r\n  }\r\n  const handleUpdateProduct = (e) => {\r\n    mainformRef.current.reset();\r\n  }\r\n  useEffect(() => {\r\n    setvdata({\r\n      ...vdata,\r\n      quantity: variantmainarray\r\n    });\r\n  }, [variantmainarray]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* form */}\r\n      <Modal\r\n        show={modalshow}\r\n        onHide={handleClose}\r\n        dialogClassName=\"addproductmainmodal\"\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton className=\"addproductheader\">\r\n          <Modal.Title id=\"example-custom-modal-styling-title\">\r\n            Add Product\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"addproductbody p-2\">\r\n          <div className=\"d-flex justify-content-center align-items-center addproduct_form_boxx p-0 m-0\">\r\n            <Form className=\"p-2 addproduct_form\" validated={validated} ref={mainformRef} onSubmit={handleAddProduct}>\r\n              <div className=\"my-3 inputsection_box\">\r\n                <h5 className=\"m-0\">Basic Info</h5>\r\n                <div className=\"productvariety\">\r\n\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom01\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Product Title/Name<span className=\"text-danger\">*\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please fill productname\r\n                        </Form.Control.Feedback></span>\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"text\" placeholder=\"Product Title/Name\" required onChange={() => handleInputFieldChange()} name={'product_title_name'} value={pdata.product_title_name} />\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please fill productname\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom02\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Product Slug<span className=\"text-danger\">* </span>\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"text\" placeholder=\"Product Slug\" onChange={handleInputFieldChange} name={'product_slug'} value={pdata.product_slug} />\r\n                    </Col>\r\n                  </Form.Group>\r\n\r\n\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom03\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Store Name<span className=\"text-danger\">* <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please fill storename\r\n                      </Form.Control.Feedback></span>\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"text\" placeholder=\" Store Name\" required onChange={handleInputFieldChange} name={'store_name'} value={pdata.store_name} />\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please fill storename\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                </div>\r\n                <Form.Group className=\"mx-3\" controlId=\"validationCustom04\">\r\n                  <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                    Product Description\r\n                  </Form.Label>\r\n                  <Col sm=\"12\">\r\n                    <CKEditor\r\n                      editor={ClassicEditor}\r\n                      data=\"<p>Hello from CKEditor 5!</p>\"\r\n                      onReady={editor => {\r\n                        // You can store the \"editor\" and use when it is needed.\r\n                      }}\r\n                      onChange={(event, editor) => {\r\n                        const data = editor.getData();\r\n                        console.log(data)\r\n                      }}\r\n                      onBlur={(event, editor) => {\r\n                      }}\r\n                      onFocus={(event, editor) => {\r\n                      }}\r\n                      name={'product_description'}\r\n                      value={pdata.product_description}\r\n                    />\r\n\r\n                  </Col>\r\n                </Form.Group>\r\n              </div>\r\n              {/* category */}\r\n              <div className=\"my-3 inputsection_box\">\r\n                <h5 className=\"m-0\">Category Info</h5>\r\n                <div className=\"productvariety\">\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom05\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Product Type<span className=\"text-danger\">* </span>\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n\r\n                      <Form.Select\r\n                        aria-label=\"Product Type\"\r\n                        className=\"adminselectbox\"\r\n                        required\r\n                        name=\"product_type\"\r\n                        onChange={handleInputFieldChange}\r\n                        value={pdata.product_type}\r\n                      >\r\n                        <option value={''}>Select Product Type</option>\r\n                        <option value=\"organic_shampoo\">organic_shampoo</option>\r\n                        <option value=\"Foods\">Two</option>\r\n                        <option value=\"Clothes\">Three</option>\r\n                        <option value=\"Health Care\">Four</option>\r\n                        <option value=\"Books\">Five</option>\r\n                      </Form.Select>\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please select producttype\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom06\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Category<span className=\"text-danger\">* </span>\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Select aria-label=\"Category\" className=\"adminselectbox\" required onChange={handleInputFieldChange} name={'category'} value={pdata.category}>\r\n                        <option value={''}> Select Category</option>\r\n                        <option value=\"18\">18</option>\r\n                        <option value=\"Drinks\">Two</option>\r\n                        <option value=\"Cakes\">Three</option>\r\n                      </Form.Select>\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please select category\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom07\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Parent Category<span className=\"text-danger\">*</span>\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Select\r\n                        onChange={handleInputFieldChange} name={'parent_category'}\r\n                        aria-label=\"Parent Category\"\r\n                        className=\"adminselectbox\"\r\n                        required\r\n                        value={pdata.parent_category}\r\n                      >\r\n                        <option value={''}>Select Parent Category</option>\r\n                        <option value=\"5,18\">5,18</option>\r\n                        <option value=\"Fresh\">Two</option>\r\n                        <option value=\"Organic\">Three</option>\r\n                      </Form.Select>\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please select parentcategory\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                </div>\r\n              </div>\r\n              {/*Price and Quantity  */}\r\n              <div className=\"my-3 inputsection_box\">\r\n                <h5 className=\"m-0\">Stock Info</h5>\r\n                <div className=\"productvariety mt-0\">\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom08\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Product Quantity<span className=\"text-danger\">* </span>\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"number\" placeholder=\"Product Quantity\" required onChange={handleInputFieldChange} name={'product_quantity'} value={pdata.product_quantity} />\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please fill quantity\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom09\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Mrp<span className=\"text-danger\">*</span>\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"number\" placeholder=\"mrp\" required onChange={handleInputFieldChange} name={'mrp'} value={pdata.mrp} />\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please fill mrp\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"m-3\" controlId=\"validationCustom10\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Product Price<span className=\"text-danger\">* </span>\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"number\" placeholder=\"Price\" required onChange={handleInputFieldChange} name={'product_price'} value={pdata.product_price} />\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please fill price\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom11\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Sale Price\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"number\" placeholder=\"Sale Price\" onChange={handleInputFieldChange} name={'sale_price'} value={pdata.sale_price} />\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom11\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Discount\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"number\" placeholder=\"Discount\" onChange={handleInputFieldChange} name={'discount'} value={pdata.discount} />\r\n                    </Col>\r\n                  </Form.Group>\r\n                </div>\r\n              </div>\r\n              {/* Taxes */}\r\n              <div className=\"my-3 inputsection_box\">\r\n                <h5 className=\"m-0\">Taxes</h5>\r\n                <div className=\"productvariety mt-0\">\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom11\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Wholesale Sales Tax\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control\r\n                        type=\"number\"\r\n                        placeholder=\"Wholesale Sales Tax\"\r\n                        name=\"wholesale_sales_tax\"\r\n                        value={pdata.wholesale_sales_tax}\r\n                        onChange={handleInputFieldChange}\r\n                      />\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom11\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Manufacturers’ Sales Tax\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control\r\n                        type=\"number\"\r\n                        placeholder=\"Manufacturers’ Sales Tax \"\r\n                        name=\"manufacturers_sales_tax\"\r\n                        value={pdata.manufacturers_sales_tax}\r\n                        onChange={handleInputFieldChange}\r\n                      />\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"m-3\" controlId=\"validationCustom11\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Retail Sales Tax\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"number\" placeholder=\"Retail Sales Tax\" name=\"retails_sales_tax\" value={pdata.retails_sales_tax}\r\n                        onChange={handleInputFieldChange} />\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom11\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Gst\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"number\" placeholder=\"Gst\" required name=\"gst\" value={pdata.gst} onChange={handleInputFieldChange} />\r\n                      <Form.Control.Feedback type=\"invalid\">\r\n                        Please choose a gst\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom11\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Value Added Tax\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"number\" placeholder=\"Value Added Tax\" name=\"value_added_tax\" value={pdata.value_added_tax} onChange={handleInputFieldChange} />\r\n                    </Col>\r\n                  </Form.Group>\r\n                </div>\r\n              </div>\r\n              {/*Date  */}\r\n              <div className=\"my-3 inputsection_box\">\r\n                <h5 className=\"m-0\">Date</h5>\r\n                <div className=\"productvariety\">\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom11\">\r\n                    <Form.Label className=\"inputlabelheading\" sm=\"12\">\r\n                      Manufacturing Date\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"date\" placeholder=\"manufacturing_date\" name=\"manufacturing_date\" required onChange={handleInputFieldChange} value={pdata.manufacturing_date} />\r\n                      <Form.Control.Feedback type=\"invalid\">\r\n                        Please choose a date\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                  <Form.Group className=\"mx-3\">\r\n                    <Form.Label\r\n                      className=\"inputlabelheading\"\r\n                      sm=\"12 d-flex align-itmes-center\"\r\n                    >\r\n                      Expire Date\r\n                    </Form.Label>\r\n                    <Col sm=\"12\">\r\n                      <Form.Control type=\"date\" placeholder=\"expire_date\" required name=\"expire_date\" value={pdata.expire_date} onChange={handleInputFieldChange} />\r\n                      <Form.Control.Feedback type=\"invalid\">\r\n                        Please choose a expire date\r\n                      </Form.Control.Feedback>\r\n                    </Col>\r\n                  </Form.Group>\r\n                </div>\r\n              </div>\r\n              {/* Variation */}\r\n              {/* \r\n              <div className=\"my-3 inputsection_box\">\r\n                <h5 className=\"m-0\">Variety</h5>\r\n                <div className=\"row\">\r\n                  <Form ref={formRef} validated={validated} onSubmit={onVariantaddclick}>\r\n                    <Form.Group\r\n                      className=\"mx-3\"\r\n                    // controlId=\"validationCustom13\"\r\n                    >\r\n                      <div className=\"variation_box my-2\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col-auto\">\r\n                            <Table bordered className=\"align-middle my-2\">\r\n                              <thead className=\"align-middle\">\r\n                                <tr>\r\n                                  <th >Variety</th>\r\n                                  <th >Color</th>\r\n                                  <th >Weight/Size</th>\r\n                                  <th >Price</th>\r\n                                  <th >Mrp</th>\r\n                                  <th >Sale Price</th>\r\n                                  <th >Discount</th>\r\n                                  <th >Special Offer</th>\r\n                                  <th >Featured Product</th>\r\n                                  <th className=\"manufacture_date\">Mdate</th>\r\n                                  <th className=\"manufacture_date\">Edate</th>\r\n                                  <th className=\"manufacture_date\">Image</th>\r\n                                  <th className=\"manufacture_date\">Quantity</th>\r\n                                  <th ></th>\r\n                                </tr>\r\n                              </thead>\r\n                              <tbody>\r\n                                <tr>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\" d-flex align-items-center\">\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Select aria-label=\"Default select example\" name='variations' value ={data1.variations} onChange={(e) => {\r\n                                          // setvariantmainarray('');\r\n                                          setcustomValidated(false)\r\n                                          setvarietyval(e.target.value);\r\n                                          setvariantarray({\r\n                                            ...variantarray,\r\n                                            variations: e.target.value\r\n                                          });\r\n                                        }}\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                        >\r\n                                          <option value={''} >Select</option>\r\n                                          {(varietyy.variety || []).map((vari, i) => {\r\n                                            return (\r\n                                              <option value={vari} key={i}>{vari}</option>\r\n                                            );\r\n                                          })}\r\n                                        </Form.Select>\r\n                                      </InputGroup>\r\n                                    </div>\r\n                                  </td>\r\n\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\" d-flex align-items-center\">\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                          type=\"text\"\r\n                                          sm=\"9\"\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                          onChange={onVariantChange}\r\n                                          name={'colorname'}\r\n                                          value={data1.colorname}\r\n                                        />\r\n                                      </InputGroup>\r\n                                    </div>\r\n                                  </td>\r\n\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\" d-flex align-items-center\">\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                        value={(data1.variations === 'weight' ? data1.weight : data1.variations === 'volume' ? data1.volume  : data1.variations === 'piece' ?  data1.piece : data1.variations === 'color' ? data1.size : null)}\r\n                                          type=\"text\"\r\n                                          sm=\"9\"\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                          onChange={onVariantChange}\r\n                                          name={(varietyval === 'weight' ? 'weight' : varietyval === 'volume' ? 'volume' : varietyval === 'piece' ? 'piece' : varietyval === 'color' ? 'size' : null)}\r\n                                        />\r\n                                      </InputGroup>\r\n\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\" d-flex align-items-center\">\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                          min={1}\r\n                                          type=\"number\"\r\n                                          sm=\"9\"\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                          onChange={onVariantChange}\r\n                                          name={'price'}\r\n                                          value={data1.price}\r\n                                        />\r\n                                      </InputGroup>\r\n\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\" d-flex align-items-center\">\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                          type=\"number\"\r\n                                          min={1}\r\n                                          sm=\"9\"\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                          onChange={onVariantChange}\r\n                                          name={'mrp'}\r\n                                          value={data1.mrp}\r\n\r\n                                        />\r\n                                      </InputGroup>\r\n\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\" d-flex align-items-center\">\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                          type=\"number\"\r\n                                          sm=\"9\"\r\n                                          min={1}\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                          onChange={onVariantChange}\r\n                                          name={'sale_price'}\r\n                                          value={data1.sale_price}\r\n                                        />\r\n                                      </InputGroup>\r\n\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\" d-flex align-items-center\">\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                          type=\"number\"\r\n                                          sm=\"9\"\r\n                                          min={1}\r\n                                          onChange={onVariantChange}\r\n                                          name={'discount'}\r\n                                          value={data1.discount}\r\n                                        />\r\n                                      </InputGroup>\r\n\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\"\">\r\n                                      <Form.Check\r\n                                        onChange={onVariantChange}\r\n                                        name={'special_offer'}\r\n                                        value={data1.special_offer}\r\n                                      />\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\"\">\r\n                                      <Form.Check\r\n                                        onChange={onVariantChange}\r\n                                        name={'featured_product'}\r\n                                        value={data1.featured_product}\r\n                                      />\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\"manufacture_date\" >\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                          type=\"date\"\r\n                                          sm=\"9\"\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                          onChange={onVariantChange}\r\n                                          name={'manufacturing_date'}\r\n                                          value={data1.manufacturing_date}\r\n                                        />\r\n                                      </InputGroup>\r\n\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\"manufacture_date\" >\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                          type=\"date\"\r\n                                          sm=\"9\"\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                          onChange={onVariantChange}\r\n                                          name={'expire_date'}\r\n                                          value={data1.expire_date}\r\n                                        />\r\n                                      </InputGroup>\r\n\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <div className=\"manufacture_date\">\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                          multiple\r\n                                          type=\"file\"\r\n                                          sm=\"9\"\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                          onChange={imguploadchange}\r\n                                          name={'product_img'}\r\n                                         \r\n                                        />\r\n                                      </InputGroup>\r\n\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0\">\r\n                                    <div className=\"manufacture_date\">\r\n                                      <InputGroup className=\"\" size=\"sm\">\r\n                                        <Form.Control\r\n                                          name={'quantity'}\r\n                                          type=\"number\"\r\n                                          value={data1.quantity}\r\n                                          sm=\"9\"\r\n                                          min={'1'}\r\n                                          className={(customvalidated === true) ? 'border-danger' : null}\r\n                                          onChange={onVariantChange}\r\n                                          onKeyPress={event => {\r\n                                            if (event.key === \"Enter\") {\r\n                                              onVariantaddclick();\r\n                                            }\r\n                                          }\r\n                                          }\r\n                                        />\r\n                                      </InputGroup>\r\n                                    </div>\r\n                                  </td>\r\n                                  <td className=\"p-0\">\r\n                                    <div className=\" d-flex align-items-center\">\r\n                                      <Button variant=\"outline-success\" className=\"addcategoryicon\"\r\n                                        type=\"submit\"\r\n                                        onClick={onVariantaddclick}\r\n                                        size=\"sm\">\r\n                                        +\r\n                                      </Button>\r\n                                    </div>\r\n                                  </td>\r\n                                </tr>\r\n                              \r\n                                {\r\n                                  (pdata.quantity || []).map((variantdata, i) => {\r\n                                    return (\r\n                                      <tr >\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.variations}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.colorname}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {(variantdata.variations === 'color' ? variantdata.size : variantdata.variations === 'weight' ? variantdata.weight : variantdata.variations === 'volume' ? variantdata.volume : variantdata.variations === 'piece' ? variantdata.piece : null)}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.price}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.mrp}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.sale_price}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.discount}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.special_offer}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.featured_product}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.manufacturing_date}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center \">\r\n                                          {variantdata.expire_date}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center\">\r\n                                          <Carousel indicators={false} controls={false}>\r\n                                            {(variantdata.product_img || []).map((data) => {\r\n                                              return (\r\n                                                <Carousel.Item interval={1000}>\r\n                                                  <img src={data} alt='apnaorganic' width={50} />\r\n                                                </Carousel.Item>\r\n                                              )\r\n                                            })}\r\n                                          </Carousel>\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center\">\r\n                                          {variantdata.quantity}\r\n                                        </td>\r\n                                        <td className=\"p-0 text-center\">\r\n                                          <Button variant=\"text-danger\" className=\"addcategoryicon text-danger\"\r\n                                            onClick={() => VariantRemoveClick(variantdata)} size=\"sm\">\r\n                                            &times;\r\n                                          </Button>\r\n                                          <Button variant=\"text-danger\" className=\"addcategoryicon text-danger\"\r\n                                            onClick={() => VariantEditClick(variantdata)} size=\"sm\">\r\n                                            <MdOutlineEdit/>\r\n                                          </Button>\r\n                                        </td>\r\n                                      </tr>\r\n                                    )\r\n                                  })\r\n                                }\r\n                              </tbody>\r\n                            </Table>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </Form.Group>\r\n                  </Form>\r\n                </div>\r\n              </div> */}\r\n              <div className=\"my-3 inputsection_box\">\r\n                <div className=\"productvariety_box\">\r\n                  <h5 className=\"m-0\">Offer</h5>\r\n                  <div className=\"productvariety\">\r\n                    <Form.Group\r\n                      className=\"mx-3\"\r\n                      controlId=\"validationCustom11\"\r\n                    >\r\n                      <Form.Label\r\n                        className=\"inputlabelheading\"\r\n                        sm=\"12 d-flex align-itmes-center\"\r\n                      >\r\n                        {pdata.variety === true ?\r\n                          <Form.Check className=\"mx-2\" onChange={handleInputcheckboxChange} name='variety' value={pdata.variety === true ? true : false} checked /> :\r\n                          <Form.Check className=\"mx-2\" onChange={handleInputcheckboxChange} name='variety' value={pdata.variety === true ? true : false} />}\r\n                        Variety\r\n                      </Form.Label>\r\n                    </Form.Group>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* Offer */}\r\n\r\n              <div className=\"my-3 inputsection_box\">\r\n                <div>\r\n                  <div className=\"productvariety_box\">\r\n                    <h5 className=\"m-0\">Offer</h5>\r\n                    <div className=\"productvariety\">\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label\r\n                          className=\"inputlabelheading\"\r\n                          sm=\"12 d-flex align-itmes-center\"\r\n                        >\r\n                          {pdata.special_offer === true ?\r\n                            <Form.Check className=\"mx-2\" onChange={handleInputcheckboxChange} name='special_offer' value={pdata.special_offer === true ? true : false} checked /> :\r\n                            <Form.Check className=\"mx-2\" onChange={handleInputcheckboxChange} name='special_offer' value={pdata.special_offer === true ? true : false} />}\r\n                          Special Offer\r\n                        </Form.Label>\r\n                      </Form.Group>\r\n                      <Form.Group\r\n                        className=\"mx-3\"\r\n                        controlId=\"validationCustom11\"\r\n                      >\r\n                        <Form.Label\r\n                          className=\"inputlabelheading\"\r\n                          sm=\"9 d-flex align-items-end\"\r\n                        >\r\n                          {pdata.featured_product === true ?\r\n                            <Form.Check className=\"mx-0\" value={pdata.featured_product ? true : false}\r\n                              name='featured_product' onChange={handleInputcheckboxChange} checked /> :\r\n                            <Form.Check className=\"mx-2\" value={pdata.featured_product ? true : false}\r\n                              name='featured_product' onChange={handleInputcheckboxChange} />\r\n                          }\r\n\r\n                          Featured Product\r\n                        </Form.Label>\r\n                      </Form.Group>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* seo tag */}\r\n              <div className=\"my-3 inputsection_box\">\r\n                <h5 className=\"m-0\">Seo Tag</h5>\r\n                <div className=\"productvariety\">\r\n                  <Form.Group className=\"mx-3\" controlId=\"validationCustom11\">\r\n                    <div className=\" d-flex align-items-center my-2\">\r\n                      <InputGroup className=\"\" size=\"sm\">\r\n                        <Form.Control\r\n                          sm=\"9\"\r\n                          onChange={ontagchange}\r\n                          value={addtag}\r\n                          onKeyPress={event => {\r\n                            if (event.key === \"Enter\") {\r\n                              ontagaddclick();\r\n                            }\r\n                          }\r\n                          }\r\n                        />\r\n                        <Button variant=\"outline-success\" className=\"addcategoryicon\"\r\n                          onClick={() => ontagaddclick()} size=\"sm\">\r\n                          +\r\n                        </Button>\r\n\r\n                      </InputGroup>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"d-flex align-items-center tagselectbox mt-2\" >\r\n                      {(seoarray || []).map((seotags, i) => {\r\n                        return (\r\n                          <Badge className=\"tagselecttitle mb-0\" bg=\"success\" key={i}>{seotags}\r\n\r\n                            <GiCancel\r\n                              className=\" mx-0 ms-1 btncancel\"\r\n                              onClick={() => tagRemoveClick(seotags)}\r\n                            />\r\n\r\n                          </Badge>\r\n\r\n                        )\r\n\r\n                      })}\r\n                    </div>\r\n\r\n                  </Form.Group>\r\n                </div>\r\n              </div>\r\n\r\n              {/* other info */}\r\n              <div className=\"my-3 inputsection_box\">\r\n                <h5 className=\"m-0\">Other Instruction</h5>\r\n                <Col sm=\"12\" className=\"mt-3\">\r\n                  <CKEditor\r\n                    editor={ClassicEditor}\r\n                    data=\"<p>Hello from CKEditor 5!</p>\"\r\n                    onReady={editor => {\r\n                      // You can store the \"editor\" and use when it is needed.\r\n                    }}\r\n                    onChange={(event, editor) => {\r\n                      const data = editor.getData();\r\n                      console.log(data)\r\n                    }}\r\n                    onBlur={(event, editor) => {\r\n                    }}\r\n                    onFocus={(event, editor) => {\r\n                    }}\r\n                  />\r\n\r\n                </Col>\r\n              </div>\r\n              {/* input */}\r\n              <div className=\"my-3 inputsection_box\">\r\n                <h5 className=\"m-0\">Add Custom Input</h5>\r\n                <div className=\" mt-0 mb-3\">\r\n                  <Table className=\"align-middle\" >\r\n                    <thead>\r\n                      <tr>\r\n                        <th >Heading</th>\r\n                        <th >Description</th>\r\n                        <th ></th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td className=\"text-center col-4\">\r\n                          <InputGroup className=\"\">\r\n                            <Form.Control\r\n                              value={headerval}\r\n                              type=\"text\"\r\n                              sm=\"9\"\r\n                              min={'1'}\r\n                              onChange={oncustomheadChange}\r\n                              name={'custom_input_header'}\r\n                              className={(customvalidated === true) ? 'border-danger' : null}\r\n                            />\r\n                          </InputGroup>\r\n\r\n                        </td>\r\n                        <td className=\"col-4\">\r\n                          <InputGroup className=\"\">\r\n                            <Form.Control\r\n                              className={(customvalidated === true) ? 'border-danger' : null}\r\n                              value={descval}\r\n                              name={'custom_input_desc'}\r\n                              type=\"text\"\r\n                              sm=\"9\"\r\n                              min={'1'}\r\n                              onChange={oncustomdescChange}\r\n                              onKeyPress={event => {\r\n                                if (event.key === \"Enter\") {\r\n                                  handleAddClick();\r\n                                }\r\n                              }\r\n                              }\r\n                            />\r\n                          </InputGroup>\r\n                        </td>\r\n                        <td className=\"\">\r\n                          <Button variant=\"outline-success\" className=\"addcategoryicon\"\r\n                            onClick={() => handleAddClick()} size=\"sm\">\r\n                            +\r\n                          </Button>\r\n\r\n                        </td>\r\n                      </tr>\r\n                      {(pdata.add_custom_input || []).map((variantdata, i) => {\r\n                        const arr = variantdata.split(',')\r\n                        return (\r\n                          <tr className=\"\">\r\n                            <td className=\" text-center\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  value={arr[0]}\r\n                                  type=\"text\"\r\n                                  sm=\"9\"\r\n                                  min={'1'}\r\n                                  onChange={oncustomheadChange}\r\n                                  name={'custom_input_header'}\r\n                                  required\r\n                                />\r\n                              </InputGroup>\r\n\r\n                            </td>\r\n                            <td className=\"text-center\">\r\n                              <InputGroup className=\"\">\r\n                                <Form.Control\r\n                                  required\r\n                                  value={arr[1]}\r\n                                  name={'custom_input_desc'}\r\n                                  type=\"text\"\r\n                                  sm=\"9\"\r\n                                  min={'1'}\r\n                                  onChange={oncustomdescChange}\r\n                                  onKeyPress={event => {\r\n                                    if (event.key === \"Enter\") {\r\n                                      handleAddClick();\r\n                                    }\r\n                                  }\r\n                                  }\r\n                                />\r\n                              </InputGroup>\r\n                            </td>\r\n                            <td className=\"\">\r\n                              <Button variant=\"text-danger\" className=\"addcategoryicon text-danger\"\r\n                                onClick={() => handleRemoveClick(variantdata)} size=\"sm\">\r\n                                &times;\r\n                              </Button>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      })}\r\n                    </tbody>\r\n                  </Table>\r\n                </div>\r\n                {/* );\r\n                })} */}\r\n                {/* --------------------------------------------- */}\r\n              </div>\r\n            </Form>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"addproductfooter\">\r\n          <Iconbutton\r\n            btntext={\" Cancel\"}\r\n            onClick={() => handleClose()}\r\n            btnclass={\"button main_outline_button px-2\"}\r\n          // Iconname={<GiCancel /> }\r\n          />\r\n          <MainButton btntext={\"Save as Draft\"} onClick={() => handleSaveDraft()} />\r\n          <Iconbutton\r\n            type={'submit'}\r\n            btntext={(props.show === 2 ? \"Update Product\" : \"Add Product\")}\r\n            onClick={(props.show === 2 ? handleUpdateProduct : handleAddProduct)}\r\n            btnclass={\"button main_button \"}\r\n          />\r\n        </Modal.Footer>\r\n      </Modal>\r\n      {/* variety */}\r\n      <Modal size=\"lg\" show={props.show1} onHide={props.hide} dialogClassName=\"addproductmainmodal\">\r\n        <Form ref={formRef} validated={validated} onSubmit={onVariantaddclick}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Add Variety</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"row\">\r\n\r\n              <Form.Group\r\n                className=\"mx-3\"\r\n              // controlId=\"validationCustom13\"\r\n              >\r\n                <div className=\"variation_box my-2\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-auto\">\r\n                      <Table bordered className=\"align-middle my-2\">\r\n                        <thead className=\"align-middle\">\r\n                          <tr>\r\n                            <th >Variety</th>\r\n                            <th >Color</th>\r\n                            <th >Weight/Size</th>\r\n                            <th >Price</th>\r\n                            <th >Mrp</th>\r\n                            <th >Sale Price</th>\r\n                            <th >Discount</th>\r\n                            <th >Special Offer</th>\r\n                            <th >Featured Product</th>\r\n                            <th className=\"manufacture_date\">Mdate</th>\r\n                            <th className=\"manufacture_date\">Edate</th>\r\n                            <th className=\"manufacture_date\">Image</th>\r\n                            <th className=\"manufacture_date\">Quantity</th>\r\n                            <th ></th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\" d-flex align-items-center\">\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Select aria-label=\"Default select example\" name='variations' value={data1.variations} onChange={(e) => {\r\n                                    // setvariantmainarray('');\r\n                                    setcustomValidated(false)\r\n                                    setvarietyval(e.target.value);\r\n                                    setvariantarray({\r\n                                      ...variantarray,\r\n                                      variations: e.target.value\r\n                                    });\r\n                                  }}\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                  >\r\n                                    <option value={''} >Select</option>\r\n                                    {(varietyy.variety || []).map((vari, i) => {\r\n                                      return (\r\n                                        <option value={vari} key={i}>{vari}</option>\r\n                                      );\r\n                                    })}\r\n                                  </Form.Select>\r\n                                </InputGroup>\r\n                              </div>\r\n                            </td>\r\n\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\" d-flex align-items-center\">\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    type=\"text\"\r\n                                    sm=\"9\"\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                    onChange={onVariantChange}\r\n                                    name={'colorname'}\r\n                                    value={data1.colorname}\r\n                                  />\r\n                                </InputGroup>\r\n                              </div>\r\n                            </td>\r\n\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\" d-flex align-items-center\">\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    value={(data1.variations === 'weight' ? data1.weight : data1.variations === 'volume' ? data1.volume : data1.variations === 'piece' ? data1.piece : data1.variations === 'color' ? data1.size : null)}\r\n                                    type=\"text\"\r\n                                    sm=\"9\"\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                    onChange={onVariantChange}\r\n                                    name={(varietyval === 'weight' ? 'weight' : varietyval === 'volume' ? 'volume' : varietyval === 'piece' ? 'piece' : varietyval === 'color' ? 'size' : null)}\r\n                                  />\r\n                                </InputGroup>\r\n\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\" d-flex align-items-center\">\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    min={1}\r\n                                    type=\"number\"\r\n                                    sm=\"9\"\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                    onChange={onVariantChange}\r\n                                    name={'price'}\r\n                                    value={data1.price}\r\n                                  />\r\n                                </InputGroup>\r\n\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\" d-flex align-items-center\">\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    type=\"number\"\r\n                                    min={1}\r\n                                    sm=\"9\"\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                    onChange={onVariantChange}\r\n                                    name={'mrp'}\r\n                                    value={data1.mrp}\r\n\r\n                                  />\r\n                                </InputGroup>\r\n\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\" d-flex align-items-center\">\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    type=\"number\"\r\n                                    sm=\"9\"\r\n                                    min={1}\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                    onChange={onVariantChange}\r\n                                    name={'sale_price'}\r\n                                    value={data1.sale_price}\r\n                                  />\r\n                                </InputGroup>\r\n\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\" d-flex align-items-center\">\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    type=\"number\"\r\n                                    sm=\"9\"\r\n                                    min={1}\r\n                                    onChange={onVariantChange}\r\n                                    name={'discount'}\r\n                                    value={data1.discount}\r\n                                  />\r\n                                </InputGroup>\r\n\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\"\">\r\n                                <Form.Check\r\n                                  onChange={onVariantChange}\r\n                                  name={'special_offer'}\r\n                                  value={data1.special_offer}\r\n                                />\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\"\">\r\n                                <Form.Check\r\n                                  onChange={onVariantChange}\r\n                                  name={'featured_product'}\r\n                                  value={data1.featured_product}\r\n                                />\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\"manufacture_date\" >\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    type=\"date\"\r\n                                    sm=\"9\"\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                    onChange={onVariantChange}\r\n                                    name={'manufacturing_date'}\r\n                                    value={data1.manufacturing_date}\r\n                                  />\r\n                                </InputGroup>\r\n\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\"manufacture_date\" >\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    type=\"date\"\r\n                                    sm=\"9\"\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                    onChange={onVariantChange}\r\n                                    name={'expire_date'}\r\n                                    value={data1.expire_date}\r\n                                  />\r\n                                </InputGroup>\r\n\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0 text-center\">\r\n                              <div className=\"manufacture_date\">\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    multiple\r\n                                    type=\"file\"\r\n                                    sm=\"9\"\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                    onChange={imguploadchange}\r\n                                    name={'product_img'}\r\n\r\n                                  />\r\n                                </InputGroup>\r\n\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0\">\r\n                              <div className=\"manufacture_date\">\r\n                                <InputGroup className=\"\" size=\"sm\">\r\n                                  <Form.Control\r\n                                    name={'quantity'}\r\n                                    type=\"number\"\r\n                                    value={data1.quantity}\r\n                                    sm=\"9\"\r\n                                    min={'1'}\r\n                                    className={(customvalidated === true) ? 'border-danger' : null}\r\n                                    onChange={onVariantChange}\r\n                                    onKeyPress={event => {\r\n                                      if (event.key === \"Enter\") {\r\n                                        onVariantaddclick();\r\n                                      }\r\n                                    }\r\n                                    }\r\n                                  />\r\n                                </InputGroup>\r\n                              </div>\r\n                            </td>\r\n                            <td className=\"p-0\">\r\n                              <div className=\" d-flex align-items-center\">\r\n                                <Button variant=\"outline-success\" className=\"addcategoryicon\"\r\n                                  type=\"submit\"\r\n                                  onClick={onVariantaddclick}\r\n                                  size=\"sm\">\r\n                                  +\r\n                                </Button>\r\n                              </div>\r\n                            </td>\r\n                          </tr>\r\n\r\n                          {\r\n                            (variantmainarray || []).map((variantdata, i) => {\r\n                              return (\r\n                                <tr >\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.variations}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.colorname}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {(variantdata.variations === 'color' ? variantdata.size : variantdata.variations === 'weight' ? variantdata.weight : variantdata.variations === 'volume' ? variantdata.volume : variantdata.variations === 'piece' ? variantdata.piece : null)}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.price}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.mrp}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.sale_price}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.discount}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.special_offer}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.featured_product}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.manufacturing_date}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center \">\r\n                                    {variantdata.expire_date}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <Carousel indicators={false} controls={false}>\r\n                                      {(variantdata.product_img || []).map((data) => {\r\n                                        return (\r\n                                          <Carousel.Item interval={1000}>\r\n                                            <img src={data} alt='apnaorganic' width={50} />\r\n                                          </Carousel.Item>\r\n                                        )\r\n                                      })}\r\n                                    </Carousel>\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    {variantdata.quantity}\r\n                                  </td>\r\n                                  <td className=\"p-0 text-center\">\r\n                                    <Button variant=\"text-danger\" className=\"addcategoryicon text-danger\"\r\n                                      onClick={() => VariantRemoveClick(variantdata)} size=\"sm\">\r\n                                      x\r\n                                    </Button>\r\n                                    <Button variant=\"text-danger\" className=\"addcategoryicon text-danger\"\r\n                                      onClick={() => VariantEditClick(variantdata)} size=\"sm\">\r\n                                      <MdOutlineEdit />\r\n                                    </Button>\r\n                                  </td>\r\n                                </tr>\r\n                              )\r\n                            })\r\n                          }\r\n                        </tbody>\r\n                      </Table>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Form.Group>\r\n\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <button className='button main_outline_button' onClick={props.hide}>Cancel</button>\r\n            <button className='button main_button' onClick={() => handleClose()}>Save</button>\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Addproduct;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\productdetail.js",["469","470","471"],[],"import React, { useState, useRef } from \"react\";\r\nimport ShowMoreText from \"react-show-more-text\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport FileInput from \"../setting/FileInput\";\r\n\r\nimport VariationJson from \"../json/variation\";\r\n// import { MdOutlineEdit } from \"react-icons/md\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SAlert from \"../../admin/common/salert\";\r\nimport moment from \"moment/moment\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Loader from \"../common/loader\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport { RiImageAddLine } from \"react-icons/ri\";\r\nimport ImageCropper from \"../setting/ImageCropper\";\r\nlet encoded;\r\nlet ImgObj = [];\r\n\r\nconst Productdetail = () => {\r\n  const navigate = useNavigate();\r\n  let vid = localStorage.getItem(\"variantid\");\r\n  let pid = localStorage.getItem(\"productid\");\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [hideallData, setHideAlldata] = useState(false);\r\n  const [variantremove, setVariantRemove] = useState([]);\r\n  const [totaltax, settotaltax] = useState(\"\");\r\n  const [VerityAlert, setVerityAlert] = useState(false);\r\n  const [categoryName, setCategoryName] = useState(\"\");\r\n  const [productdata, setProductData] = useState([]);\r\n  const [taxdata, settaxdata] = useState([]);\r\n  const [validated, setValidated] = useState(false);\r\n  const [vdata, setvdata] = useState([]);\r\n  const [loading, setloading] = useState(false);\r\n\r\n  const [variantapicall, setvariantapicall] = useState(false);\r\n  const [ProductAlert, setProductAlert] = useState(false);\r\n  const [UpdatetAlert, setUpdatetAlert] = useState(false);\r\n  const [viewImage, setViewImage] = useState(\"view\");\r\n  console.log(viewImage)\r\n  const veriantData = {\r\n    product_status: \"1\",\r\n    product_id: pid,\r\n    unit: \"\",\r\n    colors: \"\",\r\n    unit_quantity: null,\r\n    size: \"\",\r\n    product_price: \"\",\r\n    mrp: \"\",\r\n    sale_price: \"\",\r\n    discount: \"0\",\r\n    special_offer: false,\r\n    featured_product: false,\r\n    manufacturing_date: \"\",\r\n    expire_date: \"\",\r\n    quantity: \"\",\r\n  };\r\n  const [variantmainarray, setvariantmainarray] = useState([]);\r\n\r\n  const [variantarray, setvariantarray] = useState(veriantData);\r\n  const [customvalidated, setcustomValidated] = useState(false);\r\n  const [unitValidated, setunitValidated] = useState(false);\r\n  console.log(unitValidated)\r\n  const [varietyUnitvalidation, setVarietyUnitvalidation] = useState(\"\");\r\n  const formRef = useRef();\r\n  const [newImageUrls, setnewImageUrls] = useState([]);\r\n  const [variantdetail, setVariantdetail] = useState([]);\r\n  const [editbutton, setEditButton] = useState(false);\r\n  console.log(editbutton)\r\n\r\n  const [changeUnitproperty, setChangeUnitProperty] = useState(false);\r\n  const [image, setImage] = useState(\"\");\r\n  const [imageName, setimageName] = useState(\"\");\r\n  const [currentPage, setCurrentPage] = useState(\"choose-img\");\r\n  const [show, setShow] = useState(false);\r\n  console.log(show);\r\n  var varietyy = VariationJson;\r\n  // PRODUCT DETAIL API\r\n  useEffect(() => {\r\n    function getProductDetails() {\r\n      // setloading(true);\r\n      try {\r\n        axios\r\n          .get(`${process.env.REACT_APP_BASEURL}/product_details?id=${pid}`)\r\n\r\n          .then((response) => {\r\n            let data = response.data;\r\n            if (data === \"error\") {\r\n              navigate(\"/product\");\r\n            }\r\n            if (data === undefined || data === \"\" || data === null) { } else {\r\n              setProductData(data);\r\n              settaxdata(data);\r\n              setVariantdetail(data.product_verient);\r\n              onImgView(vid, pid);\r\n              // setvariantarray({\r\n              //   ...variantarray,\r\n              //   unit: data.product_verient[0].unit,\r\n              //   product_id: pid,\r\n              // });\r\n              console.log(\"-----\")\r\n              console.log(data)\r\n\r\n              // setloading(false);\r\n            }\r\n\r\n            setvariantapicall(false);\r\n          });\r\n      } catch (err) {\r\n        console.log(err);\r\n        // setloading(false);\r\n      }\r\n    }\r\n\r\n    getProductDetails();\r\n  }, [variantapicall]);\r\n  console.log(\"variantarray\")\r\n  console.log(variantarray)\r\n\r\n  useEffect(() => {\r\n    // setloading(true)\r\n    getCategorydata();\r\n  }, [productdata.category]);\r\n  //  END PRODUCT DETAIL API\r\n\r\n  // api call for category details\r\n  const getCategorydata = () => {\r\n    setloading(true);\r\n    axios\r\n      .get(\r\n        `${process.env.REACT_APP_BASEURL_0}/category_details?id=${productdata.id}`\r\n      )\r\n\r\n      .then((response) => {\r\n        let data = response.data;\r\n        setCategoryName(data[0].category_name);\r\n        setloading(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        setloading(false);\r\n      });\r\n  };\r\n\r\n  // End of api call for category details\r\n\r\n  // IMAGE SECTION END\r\n  // const convertToBase64 = (file) => {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     const fileReader = new FileReader();\r\n  //     const { name } = file;\r\n  //     fileReader.addEventListener(\"load\", () => {\r\n  //       resolve({ name: name, base64: fileReader.result });\r\n  //     });\r\n  //     fileReader.readAsDataURL(file);\r\n  //     fileReader.onerror = (error) => {\r\n  //       reject(error);\r\n  //     };\r\n  //   });\r\n  // };\r\n  const onImageSelected = (event) => {\r\n    if (event.target.files[0].name && event.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      const image_name = event.target.files[0].name;\r\n      reader.readAsDataURL(event.target.files[0]);\r\n\r\n      reader.onload = function () {\r\n        console.log(\"stage1 \")\r\n        setImage(reader.result);\r\n        setimageName(image_name)\r\n        // onImageSelected({ \"dataurl\": reader.result, \"imageName\": image_name });\r\n      };\r\n\r\n\r\n      setCurrentPage(\"crop-img\");\r\n      // setShow(true)\r\n      console.log(\"stage2 ---------\" + reader.result + \"image_name==========\" + image_name)\r\n    }\r\n  };\r\n  const onCropDone = (imgCroppedArea, product_id, id, vendor_id) => {\r\n\r\n    const canvasEle = document.createElement(\"canvas\");\r\n    canvasEle.width = imgCroppedArea.width;\r\n\r\n    canvasEle.height = imgCroppedArea.height;\r\n    const context = canvasEle.getContext(\"2d\");\r\n    let imageObj1 = new Image();\r\n    imageObj1.src = image;\r\n    imageObj1.onload = function () {\r\n      context.drawImage(\r\n        imageObj1,\r\n        imgCroppedArea.x,\r\n        imgCroppedArea.y,\r\n        imgCroppedArea.width,\r\n        imgCroppedArea.height,\r\n        0,\r\n        0,\r\n        imgCroppedArea.width,\r\n        imgCroppedArea.height\r\n      );\r\n\r\n      const dataURL = canvasEle.toDataURL(\"image/jpeg\");\r\n      imguploadchange(dataURL, product_id, id, vendor_id)\r\n      onImgView(product_id, id)\r\n      setCurrentPage(\"img-cropped\");\r\n    };\r\n  };\r\n  const onCropCancel = () => {\r\n    setCurrentPage(\"choose-img\");\r\n    setImage(\"\");\r\n  };\r\n  const handleClose = () => {\r\n\r\n    setShow(false)\r\n    setCurrentPage(\"choose-img\");\r\n\r\n  };\r\n  const imguploadchange = async (dataURL, product_id, id, vendor_id) => {\r\n    setcustomValidated(\"\");\r\n    onImgView(product_id, id);\r\n    let i\r\n    let coverimg;\r\n\r\n    for (i = 0; i < imageName.length; i++) {\r\n\r\n      if ((newImageUrls.length === 0 || newImageUrls.length === 1) && i === 0) {\r\n        coverimg = \"cover\";\r\n      } else {\r\n        coverimg = `cover${i}`;\r\n\r\n      }\r\n    }\r\n    //   encoded = await convertToBase64(e.target.files[i]);\r\n    encoded = dataURL;\r\n    const [first, ...rest] = encoded.split(\",\");\r\n    let imgvalidation = first.split(\"/\").pop();\r\n    if (\r\n      imgvalidation === \"jpeg;base64\" ||\r\n      imgvalidation === \"jpg;base64\" ||\r\n      imgvalidation === \"png;base64\"\r\n    ) {\r\n      const productimg = rest.join(\"-\");\r\n      let imar = {\r\n        product_id: `${product_id}`,\r\n        product_verient_id: `${id}`,\r\n        vendor_id: `${vendor_id}`,\r\n        product_image_name: `${imageName}${i}${id}`,\r\n        image_position: `${coverimg}`,\r\n        img_64: productimg,\r\n      };\r\n      ImgObj.push(imar);\r\n      axios\r\n        .post(`${process.env.REACT_APP_BASEURL}/product_images`, ImgObj)\r\n        .then((response) => {\r\n\r\n          ImgObj = [];\r\n          onImgView(id, product_id);\r\n          setcustomValidated(\"\");\r\n\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      setcustomValidated(\"imgformat\");\r\n\r\n    }\r\n    setProductAlert(true);\r\n\r\n  };\r\n  // const imguploadchange = async (e, product_id, id, vendor_id) => {\r\n  //   setcustomValidated(\"\");\r\n  //   for (let i = 0; i < e.target.files.length; i++) {\r\n  //     let coverimg;\r\n  //     if (newImageUrls.length === 0 && i === 0) {\r\n  //       coverimg = \"cover\";\r\n  //     } else {\r\n  //       coverimg = `cover${i}`;\r\n  //     }\r\n  //     encoded = await convertToBase64(e.target.files[i]);\r\n  //     const [first, ...rest] = encoded.base64.split(\",\");\r\n  //     const productimg = rest.join(\"-\");\r\n  //     let imar = {\r\n  //       product_id: `${product_id}`,\r\n  //       product_verient_id: `${id}`,\r\n  //       vendor_id: `${vendor_id}`,\r\n  //       product_image_name: `${encoded.name}${i}${id}`,\r\n  //       image_position: coverimg,\r\n  //       img_64: productimg,\r\n  //     };\r\n  //     ImgObj.push(imar);\r\n  //   }\r\n  //   // image\r\n  //   // setloading(true)\r\n  //   axios\r\n  //     .post(`${process.env.REACT_APP_BASEURL}/product_images`, ImgObj)\r\n  //     .then((response) => {\r\n  //       onImgView(id, product_id);\r\n\r\n  //       // setloading(false)\r\n  //     })\r\n  //     .catch(function (error) {\r\n  //       console.log(error);\r\n  //       // setloading(false)\r\n  //     });\r\n  // };\r\n\r\n  const onImgRemove = (id, name, vendor_id, product_id, product_verient_id) => {\r\n    // setloading(true)\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/product_image_delete`, {\r\n        product_image_id: `${id}`,\r\n        product_image_name: `${name}`,\r\n        vendor_id: `${vendor_id}`,\r\n      })\r\n      .then((response) => {\r\n        onImgView(product_verient_id, product_id);\r\n        // setloading(false)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        // setloading(false)\r\n      });\r\n  };\r\n  const [imageboxid, setimageboxid] = useState(0);\r\n  const onImgView = (id, productid) => {\r\n    setOpen(true);\r\n    setEditButton(false);\r\n    setimageboxid(id);\r\n    setViewImage(\"notview\");\r\n    localStorage.setItem(\"variantid\", id);\r\n    localStorage.setItem(\"productid\", productid);\r\n    setEditButton(false);\r\n    // setloading(true)\r\n    axios\r\n      .get(\r\n        `${process.env.REACT_APP_BASEURL}/product_images_get_singal_veriant?product_id=${productid}&product_verient_id=${id}`\r\n      )\r\n      .then((response) => {\r\n        setnewImageUrls(response.data);\r\n        // setloading(false)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        // setloading(false)\r\n      });\r\n  };\r\n  const onImgCoverEditClick = (imgid, productid, productvariantid) => {\r\n    // setloading(true)\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/change_porduct_cover_image`, {\r\n        product_image_id: `${imgid}`,\r\n        product_id: `${productid}`,\r\n        product_verient_id: `${productvariantid}`,\r\n      })\r\n      .then((response) => {\r\n        onImgView(productvariantid, productid);\r\n        // setloading(false)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        // setloading(false)\r\n      });\r\n  };\r\n  // IMAGE SECTION END\r\n\r\n  // ONCHANGE OF VARIETY\r\n  const onVariantChange = (e) => {\r\n    setVarietyUnitvalidation(\"\");\r\n    // setValidated(true);\r\n\r\n    setcustomValidated(false);\r\n    setvariantapicall(true);\r\n    setunitValidated(false);\r\n    setvariantarray({\r\n      ...variantarray,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  // END ONCHANGE OF VARIETY\r\n\r\n  // SALE RICE CALCULATION\r\n  useEffect(() => {\r\n    let discountt = (variantarray.mrp * variantarray.discount) / 100;\r\n    let saleprice = variantarray.mrp - discountt;\r\n    let totaltaxpercent =\r\n      Number(taxdata.gst) +\r\n      Number(taxdata.wholesale_sales_tax) +\r\n      Number(taxdata.retails_sales_tax) +\r\n      Number(taxdata.manufacturers_sales_tax) +\r\n      Number(taxdata.value_added_tax);\r\n    let totaltaxx = (saleprice * totaltaxpercent) / 100;\r\n    settotaltax(totaltaxx);\r\n    let product_price = saleprice - totaltaxx;\r\n    setvariantarray({\r\n      ...variantarray,\r\n      product_status: \"pending\",\r\n      product_price: `${product_price}`,\r\n      sale_price: `${saleprice}`,\r\n    });\r\n  }, [variantarray.mrp, variantarray.discount, productdata, variantapicall]);\r\n  // const handleInputcheckboxChange = (e) => {\r\n  //   const target = e.target;\r\n  //   const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n  //   setvariantarray({\r\n  //     ...variantarray,\r\n  //     [e.target.name]: value,\r\n  //   });\r\n  // };\r\n  //  END SALEPRICE CALCULATION\r\n\r\n  // ADD VARIETY\r\n  const onVariantaddclick = (id, pid) => {\r\n    if (id === \"\" || id === null || id === undefined) {\r\n      if (\r\n        variantarray.unit === \"\" ||\r\n        variantarray.unit === undefined ||\r\n        variantarray.unit === null ||\r\n        variantarray.unit === \"Select\" ||\r\n        variantarray.product_price === \"\" ||\r\n        variantarray.mrp === \"\" ||\r\n        variantarray.sale_price === \"\" ||\r\n        variantarray.manufacturing_date === \"\" ||\r\n        variantarray.expire_date === \"\" ||\r\n        variantarray.quantity === \"\"\r\n      ) {\r\n        setcustomValidated(true);\r\n        setValidated(true);\r\n      } else if (variantarray.quantity === 0 || variantarray.quantity < 1) {\r\n        setVarietyUnitvalidation(\"QwanityValidation\");\r\n      } else if (variantarray.manufacturing_date > variantarray.expire_date) {\r\n        setVarietyUnitvalidation(\"ExpireDateValidation\");\r\n      } else if (\r\n        productdata.product_type !== \"Cloths\" &&\r\n        variantarray.unit === \"pcs\" &&\r\n        variantarray.colors === \"\" &&\r\n        (variantarray.size === null || variantarray.size === \"\")\r\n      ) {\r\n        setVarietyUnitvalidation(\"fillUnit&color\");\r\n      } else if (\r\n        productdata.product_type === \"Cloths\" &&\r\n        variantarray.unit === \"pcs\" &&\r\n        (variantarray.colors === \"\" ||\r\n          variantarray.size === null ||\r\n          variantarray.size === \"\")\r\n      ) {\r\n        setVarietyUnitvalidation(\"fillUnit&size&color\");\r\n      } else if (\r\n        variantarray.unit !== \"pcs\" &&\r\n        (variantarray.unit_quantity === \"\" ||\r\n          variantarray.unit_quantity === \"null\" ||\r\n          variantarray.unit_quantity === null)\r\n      ) {\r\n        setunitValidated(true);\r\n        setVarietyUnitvalidation(\"unitQwanity&size&color\");\r\n      } else if (Number(variantarray.discount) > 100) {\r\n        setVarietyUnitvalidation(\"discountmore\");\r\n      } else if (\r\n        Number(variantarray.mrp) > 50000 ||\r\n        Number(variantarray.mrp) <= 0\r\n      ) {\r\n        setVarietyUnitvalidation(\"mrpmore\");\r\n      }\r\n      else {\r\n        axios\r\n          .post(\r\n            `${process.env.REACT_APP_BASEURL}/products_varient_add`,\r\n            variantarray\r\n          )\r\n          .then((response) => {\r\n            if ((response.affectedRows = \"1\")) {\r\n              setProductAlert(true);\r\n              setValidated(false);\r\n              setvariantmainarray((variantmainarray) => [\r\n                ...variantmainarray,\r\n                variantarray,]);\r\n              setvariantarray({\r\n                product_status: \"\",\r\n                // unit: \"\",\r\n                colors: \"\",\r\n                unit_quantity: \"\",\r\n                size: \"\",\r\n                product_price: \"\",\r\n                mrp: \"\",\r\n                sale_price: \"\",\r\n                discount: \"0\",\r\n                special_offer: false,\r\n                featured_product: false,\r\n                manufacturing_date: \"\",\r\n                expire_date: \"\",\r\n                quantity: \"\",\r\n                product_id: \"\",\r\n              });\r\n              setvariantapicall(true);\r\n              setcustomValidated(false);\r\n              setVarietyUnitvalidation(\"\");\r\n            } else if (response.errno === 1064) {\r\n              alert(\"Error in add product\");\r\n              setProductAlert(false);\r\n            } else {\r\n              setProductAlert(false);\r\n            }\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      }\r\n    } else {\r\n      if (id) {\r\n        if (\r\n          variantarray.unit === \"\" ||\r\n          variantarray.unit === undefined ||\r\n          variantarray.unit === null ||\r\n          variantarray.unit === \"Select\" ||\r\n          variantarray.product_price === \"\" ||\r\n          variantarray.mrp === \"\" ||\r\n          variantarray.sale_price === \"\" ||\r\n          variantarray.manufacturing_date === \"\" ||\r\n          variantarray.expire_date === \"\" ||\r\n          variantarray.quantity === \"\"\r\n        ) {\r\n          setcustomValidated(true);\r\n        } else if (variantarray.quantity === 0 || variantarray.quantity < 1) {\r\n          setVarietyUnitvalidation(\"QwanityValidation\");\r\n        } else if (variantarray.manufacturing_date > variantarray.expire_date) {\r\n          setVarietyUnitvalidation(\"ExpireDateValidation\");\r\n        } else if (\r\n          productdata.product_type !== \"Cloths\" &&\r\n          variantarray.unit === \"pcs\" &&\r\n          variantarray.colors === \"\" &&\r\n          (variantarray.size === null || variantarray.size === \"\")\r\n        ) {\r\n          setVarietyUnitvalidation(\"fillUnit&color\");\r\n        } else if (\r\n          productdata.product_type === \"Cloths\" &&\r\n          variantarray.unit === \"pcs\" &&\r\n          (variantarray.colors === \"\" ||\r\n            variantarray.size === null ||\r\n            variantarray.size === \"\")\r\n        ) {\r\n          setVarietyUnitvalidation(\"fillUnit&size&color\");\r\n        } else if (\r\n          variantarray.unit !== \"pcs\" &&\r\n          (variantarray.unit_quantity === \"\" ||\r\n            variantarray.unit_quantity === \"null\" ||\r\n            variantarray.unit_quantity === null ||\r\n            variantarray.unit_quantity === undefined)\r\n        ) {\r\n          setunitValidated(true);\r\n          setVarietyUnitvalidation(\"unitQwanity&size&color\");\r\n        } else if (Number(variantarray.discount) > 100) {\r\n          setVarietyUnitvalidation(\"discountmore\");\r\n        } else if (\r\n          Number(variantarray.mrp) > 50000 ||\r\n          Number(variantarray.mrp) <= 0\r\n        ) {\r\n          setVarietyUnitvalidation(\"mrpmore\");\r\n        } else {\r\n          axios\r\n            .put(\r\n              `${process.env.REACT_APP_BASEURL}/products_varient_update`,\r\n              variantarray\r\n            )\r\n            .then((response) => {\r\n              if ((response.affectedRows = \"1\")) {\r\n                setUpdatetAlert(true);\r\n\r\n                // setvariantarray(response.data);\r\n\r\n                setvariantarray({\r\n                  product_status: \"\",\r\n                  // unit: \"\",\r\n                  colors: \"\",\r\n                  unit_quantity: \"\",\r\n                  size: \"\",\r\n                  product_price: \"\",\r\n                  mrp: \"\",\r\n                  sale_price: \"\",\r\n                  discount: \"0\",\r\n                  special_offer: false,\r\n                  featured_product: false,\r\n                  manufacturing_date: \"\",\r\n                  expire_date: \"\",\r\n                  quantity: \"\",\r\n                  product_id: \"\",\r\n                });\r\n                setvariantapicall(true);\r\n                setcustomValidated(false);\r\n                setVarietyUnitvalidation(\"\");\r\n              } else if (response.errno === 1064) {\r\n                alert(\"Error in Update product\");\r\n                setUpdatetAlert(false);\r\n              } else {\r\n                setUpdatetAlert(false);\r\n              }\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n        }\r\n      } else {\r\n        alert(\"Id not provide\");\r\n      }\r\n    }\r\n  };\r\n  // END VARIETY\r\n\r\n  // REMOVE VARIETY\r\n  const VariantRemoveClick = (e, id, productid) => {\r\n    setVerityAlert(true);\r\n    setvariantmainarray(variantmainarray.filter((item) => item !== e));\r\n    setVariantRemove((variantremove) => {\r\n      return { ...variantremove, id: id, productid: productid };\r\n    });\r\n  };\r\n\r\n  const closeAlert = () => {\r\n    setVerityAlert(false);\r\n    setProductAlert(false);\r\n    setUpdatetAlert(false);\r\n  };\r\n\r\n  const deleteProductVeriant = () => {\r\n    if (variantdetail.length === 0) {\r\n      setHideAlldata(true);\r\n      setVerityAlert(false);\r\n    }\r\n    if (variantdetail.length === 2) {\r\n      setChangeUnitProperty(\"editvariety\");\r\n    }\r\n    // setloading(true)\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/products_delete_remove`, {\r\n        varient_id: variantremove.id,\r\n        product_id: variantremove.productid,\r\n        is_delete: \"0\",\r\n      })\r\n      .then((response) => {\r\n        // let data=response.data\r\n        setvariantapicall(true)\r\n        // if (data !== undefined || data !== \"\" || data !== null){\r\n        // setvariantapicall(true);\r\n        //   navigate(\"/product\");\r\n        // }\r\n        // setloading(false)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        // setloading(false)\r\n      });\r\n    setvdata(vdata.filter((item) => item !== variantremove.id));\r\n    setVerityAlert(false);\r\n  };\r\n  // END REMOVE VARIETY\r\n\r\n  // EDIT VARIETY\r\n  const VariantEditClick = (id, productid) => {\r\n    if (variantdetail.length === 1) {\r\n      setChangeUnitProperty(true);\r\n    }\r\n    // setloading(true)\r\n    axios\r\n      .get(\r\n        `${process.env.REACT_APP_BASEURL}/products_pricing?id=${id}&product_id=${productid}&user_id`\r\n      )\r\n      .then((response) => {\r\n        setvariantarray({\r\n          ...variantarray,\r\n          unit: response.data[0].unit,\r\n          product_id: id,\r\n        })\r\n        // setloading(false)\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        // setloading(false)\r\n      });\r\n  };\r\n  // useEffect((id, productid)=>{\r\n  //   VariantEditClick(id, productid)\r\n  // },[])\r\n  return (\r\n    <>\r\n      {loading === true ? (\r\n        <Loader />\r\n      ) : (\r\n        <div>\r\n          {\" \"}\r\n          {hideallData === false ? (\r\n            <>\r\n              <h2 className=\"productname mb-0\">\r\n                {productdata.product_title_name}\r\n              </h2>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"productimg_box col-8\">\r\n                  {newImageUrls.length === 0 ? (\r\n                    <img\r\n                      alt=\"\"\r\n                      src=\"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n                      className=\"w-100 h-50\"\r\n                    />\r\n                  ) : (\r\n                    <Carousel\r\n                      autoPlay\r\n                      interval=\"3000\"\r\n                      transitionTime=\"3000\"\r\n                      infiniteLoop\r\n                      showIndicators={false}\r\n                      className={\"productimg_carousel\"}\r\n                      showStatus={false}\r\n                    >\r\n                      {newImageUrls\r\n                        ? (newImageUrls || []).map((data, i) => {\r\n                          return data.product_verient_id === vid &&\r\n                            data.product_id === pid ? (\r\n                            <div className=\"w-100 h-50\" key={i}>\r\n                              <img\r\n                                src={\r\n                                  newImageUrls.length === 0\r\n                                    ? \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n                                    : data.product_image_path\r\n                                      ? data.product_image_path\r\n                                      : null\r\n                                }\r\n                                alt={data.product_image_name}\r\n                              />\r\n                            </div>\r\n                          ) : (\r\n                            <img\r\n                              src={\r\n                                \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n                              }\r\n                              alt={\"\"}\r\n                            />\r\n                          );\r\n                        })\r\n                        : null}\r\n                    </Carousel>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"product_detail_box col-4 mt-4 \">\r\n                  <div className=\"product_upper_section row\">\r\n                    <div className=\"col-6\">\r\n                      <b>\r\n                        <h5 className=\"statuslabeltext text-success\">\r\n                          {productdata.product_title_name}\r\n                        </h5>\r\n                      </b>\r\n\r\n                      {/* price */}\r\n\r\n                      <div className=\"product_upper_section \">\r\n                        {variantdetail\r\n                          ? (variantdetail || []).map((data, i) => {\r\n                            return data.id === vid &&\r\n                              data.product_id === pid ? (\r\n                              <div\r\n                                className=\"product_mid_section product_variety_section\"\r\n                                key={i}\r\n                              >\r\n                                <h3 className=\"mb-0\">\r\n                                  {\" \"}\r\n                                  Price:{data.sale_price.toFixed(2)}\r\n                                </h3>\r\n                                <div className=\"priceboxx\">\r\n                                  <b>\r\n                                    <p className=\"text-success mb-0\">\r\n                                      {data.discount}% off\r\n                                    </p>\r\n                                  </b>\r\n                                  <p className=\"mrprate text-danger\">\r\n                                    ({data.mrp.toFixed(2)})\r\n                                  </p>\r\n                                </div>\r\n                                <div className=\"priceboxx\">\r\n                                  <b>\r\n                                    {\" \"}\r\n                                    <p className=\"text-secondary\">\r\n                                      Product Price: {data.product_price}{\" \"}\r\n                                    </p>\r\n                                  </b>\r\n                                </div>\r\n                              </div>\r\n                            ) : null;\r\n                          })\r\n                          : null}\r\n\r\n                        {/* store */}\r\n                        <div className=\"product_lower_section product_upper_section\">\r\n                          <div className=\"productquantity productstatus\">\r\n                            <h5 className=\" mb-0\">Store:</h5>\r\n                            <p className=\"statuslabeltext mb-0 text-primary\">\r\n                              {productdata.store_name}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                        {/*  */}\r\n                        {/*description  */}\r\n                        <div>\r\n                          <h5 className=\"mb-1\">Product Description:</h5>\r\n                          <ShowMoreText\r\n                            /* Default options */\r\n                            lines={5}\r\n                            more=\"Show more\"\r\n                            less=\"...Show less\"\r\n                            anchorclassName=\"oooeeer\"\r\n                            expanded={false}\r\n                            width={500}\r\n                            className={\"detailproduct\"}\r\n                          >\r\n                            <div\r\n                              className=\"detailproduct statuslabeltext editor\"\r\n                              dangerouslySetInnerHTML={{\r\n                                __html: productdata.product_description,\r\n                              }}\r\n                            ></div>\r\n                          </ShowMoreText>\r\n                        </div>\r\n                        {/*  */}\r\n\r\n                        {/* other instarusction */}\r\n                        <div>\r\n                          <h5 className=\"mb-1\">Other Instruction:</h5>\r\n                          <ShowMoreText\r\n                            /* Default options */\r\n                            lines={5}\r\n                            more=\"Show more\"\r\n                            less=\"...Show less\"\r\n                            anchorclassName=\"oooeeer\"\r\n                            expanded={false}\r\n                            width={500}\r\n                          >\r\n                            <div\r\n                              className=\"detailproduct statuslabeltext\"\r\n                              dangerouslySetInnerHTML={{\r\n                                __html: productdata.other_introduction,\r\n                              }}\r\n                            ></div>\r\n                          </ShowMoreText>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    {/* category */}\r\n                    <div className=\"col-6\">\r\n                      <div className=\"product_lower_section product_upper_section\">\r\n                        <div className=\"productquantity productstatus\">\r\n                          <h5 className=\"mb-0\">\r\n                            Product type: <b>{productdata.product_type}</b>{\" \"}\r\n                          </h5>\r\n                        </div>\r\n                        <div className=\"productquantity productstatus\">\r\n                          <h5 className=\"mb-0\">\r\n                            Category: <b>{categoryName}</b>{\" \"}\r\n                          </h5>\r\n                        </div>\r\n                      </div>\r\n                      {/* tax */}\r\n                      <div className=\"product_mid_section product_variety_section\">\r\n                        <h5 className=\"mb-0\">Tax:</h5>\r\n                        <div className=\"productstatus\">\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <h5 className=\"statuslabeltext\">\r\n                              Gst:{\" \"}\r\n                              <b>\r\n                                {productdata.gst === \"undefined\"\r\n                                  ? 0\r\n                                  : productdata.gst}{\" \"}\r\n                              </b>{\" \"}\r\n                            </h5>\r\n                            <b></b>\r\n                          </div>\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <h5 className=\"statuslabeltext\">\r\n                              Cgst:{\" \"}\r\n                              <b>\r\n                                {productdata.cgst === \"undefined\"\r\n                                  ? 0\r\n                                  : productdata.cgst}{\" \"}\r\n                              </b>{\" \"}\r\n                            </h5>\r\n                          </div>\r\n                          <div className=\"d-flex align-items-center\">\r\n                            <h5 className=\"statuslabeltext\">\r\n                              Sgst:{\" \"}\r\n                              <b>\r\n                                {productdata.sgst === \"undefined\"\r\n                                  ? 0\r\n                                  : productdata.sgst}{\" \"}\r\n                              </b>\r\n                            </h5>\r\n                          </div>\r\n                          <div className=\"d-flex\">\r\n                            <h5 className=\"statuslabeltext\">\r\n                              Wholesale sales tax:{\" \"}\r\n                              <b>\r\n                                {productdata.wholesale_sales_tax === \"\" ||\r\n                                  productdata.wholesale_sales_tax === \"undefined\"\r\n                                  ? 0\r\n                                  : productdata.wholesale_sales_tax}\r\n                              </b>\r\n                            </h5>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <h5 className=\"statuslabeltext\">\r\n                            Manufacturers sales tax:{\" \"}\r\n                            <b>\r\n                              {productdata.manufacturers_sales_tax === \"\" ||\r\n                                productdata.manufacturers_sales_tax ===\r\n                                \"undefined\"\r\n                                ? 0\r\n                                : productdata.manufacturers_sales_tax}\r\n                            </b>\r\n                          </h5>\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <h5 className=\"statuslabeltext\">\r\n                            Retails sales tax:{\" \"}\r\n                            <b>\r\n                              {productdata.retails_sales_tax === \"\" ||\r\n                                productdata.retails_sales_tax === \"undefined\"\r\n                                ? 0\r\n                                : productdata.retails_sales_tax}\r\n                            </b>\r\n                          </h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    {/*  */}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"variety_section_box col-12\">\r\n                  <Form ref={formRef} validated={validated}>\r\n                    <Form.Group className=\"\">\r\n                      <div className=\"variation_box my-2\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Variety\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Select\r\n                                      aria-label=\"Default select example\"\r\n                                      name=\"unit\"\r\n                                      required\r\n                                      value={variantarray.unit}\r\n                                      onChange={(e) =>\r\n                                        onVariantChange(e)\r\n                                      }\r\n                                      disabled={\r\n                                        variantarray.unit &&\r\n                                          changeUnitproperty === false\r\n                                          ? true\r\n                                          : variantarray.unit ||\r\n                                            changeUnitproperty === true\r\n                                            ? false\r\n                                            : true\r\n                                      }\r\n                                    // className={\r\n                                    //   customvalidated === true\r\n                                    //     ? \"border-danger\"\r\n                                    //     : null\r\n                                    // }\r\n                                    >\r\n                                      <option >\r\n                                        Select\r\n                                      </option>\r\n                                      {(varietyy.variety || []).map(\r\n                                        (vari, i) => {\r\n                                          console.log(\"unittttttt=======\" + vari)\r\n                                          return changeUnitproperty ===\r\n                                            true ? (\r\n                                            <option\r\n                                              value={\r\n                                                vari === \"color\"\r\n                                                  ? \"pcs\"\r\n                                                  : vari ===\r\n                                                    \"weight\"\r\n                                                    ? \"gms\"\r\n                                                    : vari ===\r\n                                                      \"volume\"\r\n                                                      ? \"ml\"\r\n                                                      : vari === \"piece\"\r\n                                                        ? \"piece\"\r\n                                                        : \"\"\r\n                                              }\r\n                                              key={i}\r\n                                            >\r\n                                              {vari}\r\n                                            </option>\r\n                                          ) : productdata.product_type ===\r\n                                            \"Cloths\" ||\r\n                                            productdata.product_type ===\r\n                                            \"Fashion\" ? (\r\n                                            vari === \"weight\" ||\r\n                                              vari ===\r\n                                              \"volume\" ? null : (\r\n                                              <option\r\n                                                value={\r\n                                                  vari === \"piece\"\r\n                                                    ? \"piece\"\r\n                                                    : vari ===\r\n                                                      \"color\"\r\n                                                      ? \"pcs\"\r\n                                                      : \"\"\r\n                                                }\r\n                                                key={i}\r\n                                              >\r\n                                                {vari}\r\n                                              </option>\r\n                                            )\r\n                                          ) : vari ===\r\n                                            \"color\" ? null : (\r\n                                            <option\r\n                                              value={\r\n                                                vari === \"weight\"\r\n                                                  ? \"gms\"\r\n                                                  : vari ===\r\n                                                    \"volume\"\r\n                                                    ? \"ml\"\r\n                                                    : vari === \"piece\"\r\n                                                      ? \"piece\"\r\n                                                      : \"\"\r\n                                              }\r\n                                              key={i}\r\n                                            >\r\n                                              {vari}\r\n                                            </option>\r\n                                          );\r\n                                        }\r\n                                      )}\r\n                                    </Form.Select>\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Color\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Select\r\n                                      aria-label=\"Default select example\"\r\n                                      name=\"colors\"\r\n                                      value={variantarray.colors}\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      disabled={\r\n                                        variantarray.unit !== \"pcs\" &&\r\n                                          variantarray.unit !== \"\"\r\n                                          ? true\r\n                                          : variantarray.unit === \"\"\r\n                                            ? false\r\n                                            : false\r\n                                      }\r\n                                      required\r\n                                    >\r\n                                      {\" \"}\r\n                                      <option value={\"\"}> Select Color</option>\r\n                                      {(varietyy.color || []).map((vari, i) => {\r\n                                        return (\r\n                                          <option\r\n                                            value={vari}\r\n                                            key={i}\r\n                                            selected={productdata.color}\r\n                                          >\r\n                                            {vari}\r\n                                          </option>\r\n                                        );\r\n                                      })}\r\n                                    </Form.Select>\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Weight/Piece/Volume\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\" size=\"sm\">\r\n                                    <Form.Control\r\n                                      type=\"number\"\r\n                                      sm=\"9\"\r\n                                      value={variantarray.unit_quantity}\r\n                                      disabled={\r\n                                        variantarray.unit === \"pcs\"\r\n                                          ? true\r\n                                          : false\r\n                                      }\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      name={\"unit_quantity\"}\r\n                                      required\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Size\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Select\r\n                                      aria-label=\"Default select example\"\r\n                                      required\r\n                                      sm=\"9\"\r\n                                      name=\"size\"\r\n                                      value={variantarray.size}\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      disabled={\r\n                                        variantarray.unit !== \"pcs\" &&\r\n                                          variantarray.unit !== \"\"\r\n                                          ? true\r\n                                          : variantarray.unit === \"\"\r\n                                            ? false\r\n                                            : false\r\n                                      }\r\n                                    >\r\n                                      <option value={\"\"}>Select</option>\r\n                                      {(varietyy.size || []).map((vari, i) => {\r\n                                        return (\r\n                                          <option value={vari} key={i}>\r\n                                            {vari}\r\n                                          </option>\r\n                                        );\r\n                                      })}\r\n                                    </Form.Select>\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Mrp\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\" size=\"sm\">\r\n                                    <Form.Control\r\n                                      type=\"number\"\r\n                                      sm=\"9\"\r\n                                      maxLength={\"5\"}\r\n                                      minLength={\"1\"}\r\n                                      min=\"1\"\r\n                                      max=\"50000\"\r\n                                      // className={\r\n                                      //   customvalidated === true\r\n                                      //     ? \"border-danger\"\r\n                                      //     : null\r\n                                      // }\r\n                                      name=\"mrp\"\r\n                                      value={variantarray.mrp}\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      required\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Discount\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Control\r\n                                      type=\"number\"\r\n                                      sm=\"9\"\r\n                                      min={\"1\"}\r\n                                      max={\"100\"}\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      name={\"discount\"}\r\n                                      value={variantarray.discount}\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Original Price\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Control\r\n                                      min={1}\r\n                                      step={0.01}\r\n                                      type=\"number\"\r\n                                      sm=\"9\"\r\n                                      name={\"product_price\"}\r\n                                      value={Number(\r\n                                        variantarray.product_price\r\n                                      ).toFixed(2)}\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Tax\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Control\r\n                                      step={0.01}\r\n                                      type=\"number\"\r\n                                      sm=\"9\"\r\n                                      min={1}\r\n                                      name={\"totaltax\"}\r\n                                      value={Number(totaltax).toFixed(2)}\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Sale Price\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Control\r\n                                      min={1}\r\n                                      step={0.01}\r\n                                      type=\"number\"\r\n                                      sm=\"9\"\r\n                                      name={\"sale_price\"}\r\n                                      value={Number(variantarray.sale_price)}\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"manufacture_date addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Manufacturing Date\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\" size=\"sm\">\r\n                                    <Form.Control\r\n                                      type=\"date\"\r\n                                      sm=\"9\"\r\n                                      required\r\n                                      min={moment().format(\"YYYY-MM-DD\")}\r\n                                      // className={\r\n                                      //   customvalidated === true\r\n                                      //     ? \"border-danger\"\r\n                                      //     : null\r\n                                      // }\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      name={\"manufacturing_date\"}\r\n                                      value={variantarray.manufacturing_date}\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"manufacture_date addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Expire Date\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Control\r\n                                      required\r\n\r\n                                      type=\"date\"\r\n                                      sm=\"9\"\r\n                                      min={moment(\r\n                                        variantarray.manufacturing_date\r\n                                      ).format(\"YYYY-MM-DD\")}\r\n                                      disabled={\r\n                                        variantarray.manufacturing_date\r\n                                          ? false\r\n                                          : true\r\n                                      }\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      name={\"expire_date\"}\r\n                                      value={moment(\r\n                                        variantarray.expire_date\r\n                                      ).format(\"YYYY-MM-DD\")}\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-md-3 col-sm-4 p-2\">\r\n                            <div className=\"manufacture_date addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Quantity\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\">\r\n                                    <Form.Control\r\n                                      name={\"quantity\"}\r\n                                      type=\"number\"\r\n                                      value={variantarray.quantity}\r\n                                      sm=\"9\"\r\n                                      min={\"1\"}\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      onKeyUp={(event) => {\r\n                                        if (event.key === \"Enter\") {\r\n                                          onVariantaddclick();\r\n                                        }\r\n                                      }}\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div>\r\n                          {/* <div className=\"col-md-3 col-sm-4 p-2\">\r\n                            <div className=\"manufacture_date addvariety_inputbox\">\r\n                              <Form.Group\r\n                                className=\"mx-3\"\r\n                                controlId=\"validationCustom01\"\r\n                              >\r\n                                <Form.Label\r\n                                  className=\"text-start inputlabelheading\"\r\n                                  sm=\"12\"\r\n                                >\r\n                                  Quantity\r\n                                  <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Col sm=\"12\">\r\n                                  <InputGroup className=\"\" size=\"sm\">\r\n                                    <Form.Control\r\n                                      type=\"number\"\r\n                                      sm=\"9\"\r\n                                      value={variantarray.quantity}\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      name={\"quantity\"}\r\n                                      onKeyPress={(event) => {\r\n                                        if (event.key === \"Enter\") {\r\n                                          onVariantaddclick();\r\n                                        }\r\n                                      }}\r\n                                      required\r\n                                    />\r\n                                  </InputGroup>\r\n                                  {/* <InputGroup className=\"\">\r\n                                    <Form.Control\r\n                                      name={\"quantity\"}\r\n                                      type=\"number\"\r\n                                      value={variantarray.quantity}\r\n                                      sm=\"9\"\r\n                                      min={\"1\"}\r\n                                      onChange={(e) => onVariantChange(e)}\r\n                                      onKeyUp={(event) => {\r\n                                        if (event.key === \"Enter\") {\r\n                                          onVariantaddclick();\r\n                                        }\r\n                                      }}\r\n                                    />\r\n                                  </InputGroup> \r\n                                </Col>\r\n                              </Form.Group>\r\n                            </div>\r\n                          </div> */}\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            <div className=\"manufacture_date addvariety_inputbox\">\r\n                              <Button\r\n                                variant=\"outline-success\"\r\n                                className=\"addcategoryicon w-100\"\r\n                                // type=\"submit\"\r\n                                onClick={() =>\r\n                                  onVariantaddclick(\r\n                                    variantarray.id,\r\n                                    variantarray.product_id\r\n                                  )\r\n                                }\r\n                              >\r\n                                Save Variety\r\n                              </Button>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-md-3 col-sm-4 p-2 text-center\">\r\n                            {varietyUnitvalidation ===\r\n                              \"ExpireDateValidation\" ? (\r\n                              <tr>\r\n                                <p\r\n                                  className=\"mt-1 ms-2 text-danger\"\r\n                                  type=\"invalid\"\r\n                                >\r\n                                  Please Expire date should be greater than\r\n                                  Manufacturing date\r\n                                </p>\r\n                              </tr>\r\n                            ) : null}\r\n                            <tr>\r\n                              {customvalidated === true ? (\r\n                                <p\r\n                                  className=\"mt-1 ms-2 text-danger\"\r\n                                  type=\"invalid\"\r\n                                >\r\n                                  Please fill Required fields\r\n                                </p>\r\n                              ) : null}\r\n\r\n                              {varietyUnitvalidation ===\r\n                                \"fillUnit&size&color\" ? (\r\n                                <p\r\n                                  className=\"mt-1 ms-2 text-danger\"\r\n                                  type=\"invalid\"\r\n                                >\r\n                                  Please Fill size and colors\r\n                                </p>\r\n                              ) : varietyUnitvalidation === \"fillUnit&color\" ? (\r\n                                <p\r\n                                  className=\"mt-1 ms-2 text-danger my-3\"\r\n                                  type=\"invalid\"\r\n                                >\r\n                                  Please fill color\r\n                                </p>\r\n                              ) : varietyUnitvalidation ===\r\n                                \"unitQwanity&size&color\" ? (\r\n                                <p\r\n                                  className=\"mt-1 ms-2 text-danger my-3\"\r\n                                  type=\"invalid\"\r\n                                >\r\n                                  Please fill weight/volume/piece\r\n                                </p>\r\n                              ) : varietyUnitvalidation === \"discountmore\" ? (\r\n                                <p\r\n                                  className=\"mt-1 ms-2 text-danger my-3\"\r\n                                  type=\"invalid\"\r\n                                >\r\n                                  Discount should be less then 100\r\n                                </p>\r\n                              ) : varietyUnitvalidation ===\r\n                                \"QwanityValidation\" ? (\r\n                                <p\r\n                                  className=\"mt-1 ms-2 text-danger my-3\"\r\n                                  type=\"invalid\"\r\n                                >\r\n                                  Quantity must be greater than 0\r\n                                </p>\r\n                              ) : varietyUnitvalidation === \"mrpmore\" ? (\r\n                                <p\r\n                                  className=\"mt-1 ms-2 text-danger my-3\"\r\n                                  type=\"invalid\"\r\n                                >\r\n                                  Mrp must be lesser than 50000 and greater than\r\n                                  0\r\n                                </p>\r\n                              ) : varietyUnitvalidation === \"\" ? null : null}\r\n                            </tr>\r\n                          </div>\r\n\r\n                          <div className=\"col-auto\">\r\n                            <div className=\"col-12\">\r\n                              <Table bordered className=\"align-middle my-2\">\r\n                                <thead className=\"align-middle\">\r\n                                  <tr>\r\n                                    <th>\r\n                                      Variety{\" \"}\r\n                                      <span className=\"text-danger\">*</span>\r\n                                    </th>\r\n\r\n                                    <th>Color</th>\r\n                                    <th>Weight/piece/Volume </th>\r\n                                    <th>Size </th>\r\n                                    <th>\r\n                                      Mrp <span className=\"text-danger\">*</span>\r\n                                    </th>\r\n                                    <th>Discount</th>\r\n                                    <th>\r\n                                      Price\r\n                                      <span className=\"text-danger\">*</span>\r\n                                    </th>\r\n                                    <th>\r\n                                      Total Tax\r\n                                      <span className=\"text-danger\">*</span>\r\n                                    </th>\r\n                                    <th>\r\n                                      Sale Price\r\n                                      <span className=\"text-danger\">*</span>\r\n                                    </th>\r\n                                    <th className=\"manufacture_date\">\r\n                                      Mdate{\" \"}\r\n                                      <span className=\"text-danger\">*</span>\r\n                                    </th>\r\n                                    <th className=\"manufacture_date\">\r\n                                      Edate{\" \"}\r\n                                      <span className=\"text-danger\">*</span>\r\n                                    </th>\r\n                                    <th className=\"manufacture_date\">\r\n                                      Quantity\r\n                                      <span className=\"text-danger\">*</span>\r\n                                    </th>\r\n                                    <th className=\"manufacture_date\">Action</th>\r\n                                  </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                  {productdata.product_verient === \"\" ||\r\n                                    productdata.product_verient === null ||\r\n                                    productdata.product_verient === undefined\r\n                                    ? null\r\n                                    : (productdata.product_verient || []).map(\r\n                                      (variantdata, i) => {\r\n                                        return variantdata.is_delete ===\r\n                                          \"0\" ? null : (\r\n                                          <>\r\n                                            <tr\r\n                                              className=\"add_variety_list_box\"\r\n                                              key={i}\r\n                                            >\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {variantdata.unit === \"pcs\"\r\n                                                  ? \"color\"\r\n                                                  : variantdata.unit ===\r\n                                                    \"piece\"\r\n                                                    ? \"piece\"\r\n                                                    : variantdata.unit === \"gms\"\r\n                                                      ? \"weight\"\r\n                                                      : variantdata.unit === \"ml\"\r\n                                                        ? \"volume\"\r\n                                                        : \"\"}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {variantdata.colors}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {variantdata.unit === \"gms\"\r\n                                                  ? variantdata.unit_quantity\r\n                                                  : variantdata.unit === \"ml\"\r\n                                                    ? variantdata.unit_quantity\r\n                                                    : variantdata.unit ===\r\n                                                      \"piece\"\r\n                                                      ? variantdata.unit_quantity\r\n                                                      : \"\"}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {variantdata.size}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {Number(\r\n                                                  variantdata.mrp\r\n                                                ).toFixed(2)}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {Number(\r\n                                                  variantdata.discount\r\n                                                ).toFixed(2)}\r\n                                              </td>\r\n\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {Number(\r\n                                                  variantdata.product_price\r\n                                                ).toFixed(2)}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {Number(\r\n                                                  (variantdata.sale_price *\r\n                                                    (Number(taxdata.gst) +\r\n                                                      Number(\r\n                                                        taxdata.wholesale_sales_tax\r\n                                                      ) +\r\n                                                      Number(\r\n                                                        taxdata.retails_sales_tax\r\n                                                      ) +\r\n                                                      Number(\r\n                                                        taxdata.manufacturers_sales_tax\r\n                                                      ) +\r\n                                                      Number(\r\n                                                        taxdata.value_added_tax\r\n                                                      ))) /\r\n                                                  100\r\n                                                ).toFixed(2)}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {variantdata.sale_price.toFixed(\r\n                                                  2\r\n                                                )}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {moment(\r\n                                                  variantdata.manufacturing_date\r\n                                                ).format(\"YYYY-MM-DD\")}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center \">\r\n                                                {moment(\r\n                                                  variantdata.expire_date\r\n                                                ).format(\"YYYY-MM-DD\")}\r\n                                              </td>\r\n                                              <td className=\"p-0 py-3 text-center manufacture_date\">\r\n                                                {variantdata.quantity}\r\n                                              </td>\r\n\r\n                                              <td className=\"p-0 py-3 text-center action_btn_box\">\r\n                                                <RiImageAddLine\r\n                                                  type=\"file\"\r\n                                                  className=\"variety_edit_action_btn  text-success\"\r\n                                                  eventKey={i}\r\n                                                  onClick={(_id) =>\r\n                                                    onImgView(\r\n                                                      variantdata.id,\r\n                                                      variantdata.product_id\r\n                                                    )\r\n                                                  }\r\n                                                  aria-controls={\r\n                                                    \"variantimgbox\" +\r\n                                                    variantdata.id\r\n                                                  }\r\n                                                  aria-expanded={open}\r\n                                                />\r\n                                                <BiEdit\r\n                                                  className=\"variety_edit_action_btn text-primary mx-2\"\r\n                                                  onClick={(id) =>\r\n                                                    VariantEditClick(\r\n                                                      variantdata.id,\r\n                                                      variantdata.product_id\r\n                                                    )\r\n                                                  }\r\n                                                />\r\n                                                <BsTrash\r\n                                                  className=\"variety_edit_action_btn text-danger\"\r\n                                                  onClick={(id, e) =>\r\n                                                    VariantRemoveClick(e,\r\n                                                      variantdata.id,\r\n                                                      variantdata.product_id\r\n                                                    )\r\n                                                  }\r\n                                                />\r\n                                              </td>\r\n                                            </tr>\r\n                                            {newImageUrls ? (\r\n                                              <tr\r\n                                                className={\r\n                                                  variantdata.id === imageboxid\r\n                                                    ? \"img_preview_boxx show\"\r\n                                                    : \"img_preview_boxx hide\"\r\n                                                }\r\n                                                id={\"variantimgbox\" + variantdata.id}\r\n                                              >\r\n                                                <td colSpan=\"13\">\r\n                                                  <div className=\"image_box\">\r\n                                                    {(newImageUrls || []).map((imgg, i) => {\r\n                                                      return `${variantdata.id}` ===\r\n                                                        imgg.product_verient_id ? (\r\n                                                        <div\r\n                                                          className=\"imgprivew_box\"\r\n                                                          key={i}\r\n                                                        >\r\n                                                          {imgg.image_position ===\r\n                                                            \"cover\" ? (\r\n                                                            <span className=\"cover_img\">\r\n                                                              Cover\r\n                                                            </span>\r\n                                                          ) : null}\r\n                                                          <img\r\n                                                            src={\r\n                                                              imgg.product_image_path\r\n                                                            }\r\n                                                            key={i}\r\n                                                            alt=\"apna_organic\"\r\n                                                            height={120}\r\n                                                          />\r\n                                                          <span\r\n                                                            className=\"cover_icon\"\r\n                                                            onClick={(id) =>\r\n                                                              onImgCoverEditClick(\r\n                                                                imgg.product_image_id,\r\n                                                                imgg.product_id,\r\n                                                                imgg.product_verient_id\r\n                                                              )\r\n                                                            }\r\n                                                          >\r\n                                                            Set Cover\r\n                                                          </span>\r\n                                                          <button\r\n                                                            className=\"cross_icon\"\r\n                                                            onClick={() =>\r\n                                                              onImgRemove(\r\n                                                                imgg.product_image_id,\r\n                                                                imgg.product_image_name,\r\n                                                                imgg.vendor_id,\r\n                                                                imgg.product_id,\r\n                                                                imgg.product_verient_id\r\n                                                              )\r\n                                                            }\r\n                                                          >\r\n                                                            &times;\r\n                                                          </button>\r\n                                                        </div>\r\n                                                      ) : null;\r\n                                                    })}\r\n                                                    <div className=\"imgprivew_box\">\r\n                                                      {currentPage === \"choose-img\" ? (\r\n\r\n                                                        <FileInput setImage={setImage} onImageSelected={onImageSelected} setimageName={setimageName} />\r\n                                                      ) : currentPage === \"crop-img\" ? (\r\n                                                        <ImageCropper\r\n                                                          handleClose={handleClose}\r\n                                                          // show={show}\r\n                                                          image={image}\r\n                                                          imageNamee={imageName}\r\n                                                          modalShow={true}\r\n                                                          onCropDone={(imgCroppedArea) => onCropDone(\r\n                                                            imgCroppedArea,\r\n                                                            variantdata.product_id,\r\n                                                            variantdata.id,\r\n                                                            variantdata.vendor_id,\r\n\r\n                                                          )\r\n                                                          }\r\n                                                          onCropCancel={onCropCancel}\r\n                                                        />\r\n                                                      ) : (\r\n                                                        <div>\r\n                                                          <div>\r\n                                                            <FileInput setImage={setImage} onImageSelected={onImageSelected} setimageName={setimageName} />\r\n                                                          </div>\r\n                                                          {/* {<FileInput/> === <ImageCropper /> ? (\r\n                                                      <>\r\n                                                        <button\r\n                                                          onClick={() => {\r\n                                                            setCurrentPage(\"crop-img\");\r\n                                                          }}\r\n                                                          className=\"btn\"\r\n                                                        >\r\n                                                          Crop\r\n                                                        </button>\r\n\r\n                                                        <button\r\n                                                          onClick={() => {\r\n                                                            setCurrentPage(\"choose-img\");\r\n                                                            setImage(\"\");\r\n                                                          }}\r\n                                                          className=\"btn\"\r\n                                                        >\r\n                                                          New Image\r\n                                                        </button>\r\n                                                      </>\r\n                                                    ) : \"\"} */}\r\n                                                        </div>\r\n                                                      )}\r\n\r\n\r\n\r\n\r\n\r\n                                                      {/* <Form.Control\r\n                                                  multiple\r\n                                                  type=\"file\"\r\n                                                  sm=\"9\"\r\n                                                  className={\"img_add_button\"}\r\n                                                  onChange={(e) =>\r\n                                                    imguploadchange(\r\n                                                      e,\r\n                                                      variantdata.product_id,\r\n                                                      variantdata.id,\r\n                                                      variantdata.vendor_id\r\n                                                    )\r\n                                                  }\r\n                                                  name={\"img_64\"}\r\n                                                /> */}\r\n                                                      {/* <span className=\"plus_icon\">\r\n                                                  +\r\n                                                </span> */}\r\n                                                    </div>\r\n                                                  </div>\r\n                                                </td>\r\n                                              </tr>\r\n                                            ) : null}\r\n                                          </>\r\n                                        );\r\n                                      }\r\n                                    )}\r\n                                  {changeUnitproperty === \"editvariety\" ? (\r\n                                    <tr className=\"text-primary text-center mx-5\">\r\n                                      Now You can edit vareity type\r\n                                    </tr>\r\n                                  ) : customvalidated === \"imgformat\" ? (\r\n                                    <tr>\r\n                                      <td colSpan={\"12\"}>\r\n                                        (\r\n                                        <span\r\n                                          className=\"mt-2   text-center fs-6 text-danger\"\r\n                                          type=\"invalid\"\r\n                                        >\r\n                                          Image Format should be in jpg, jpeg or\r\n                                          png\r\n                                        </span>\r\n                                        )\r\n                                      </td>\r\n                                    </tr>\r\n                                  ) : null}\r\n                                </tbody>\r\n                              </Table>\r\n                              {/* </Accordion> */}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </Form.Group>\r\n                  </Form>\r\n                </div>\r\n              </div>\r\n\r\n              <SAlert\r\n                show={VerityAlert}\r\n                title={\"Product\"}\r\n                text=\"Are you Sure you want to delete\"\r\n                onConfirm={deleteProductVeriant}\r\n                showCancelButton={true}\r\n                onCancel={closeAlert}\r\n              />\r\n\r\n              <SAlert\r\n                show={ProductAlert}\r\n                title=\"Added Successfully\"\r\n                text=\" Product Added\"\r\n                onConfirm={closeAlert}\r\n              />\r\n\r\n              <SAlert\r\n                show={UpdatetAlert}\r\n                title=\"Updated Successfully \"\r\n                text=\" Product Updated\"\r\n                onConfirm={closeAlert}\r\n              />\r\n            </>\r\n          ) : hideallData === true ? (\r\n            <h1>No Record Found</h1>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Productdetail;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\pendingproduct.js",["472"],[],"import React, { useEffect, useState } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport SweetAlert from \"sweetalert-react\";\r\nimport \"sweetalert/dist/sweetalert.css\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport BrandJson from \"./../json/BrandJson\";\r\nimport Loader from \"../common/loader\";\r\n\r\nconst Pendingproduct = () => {\r\n  const hideAlert = () => setAlert(false);\r\n  const [Alert, setAlert] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n  const [apicall, setapicall] = useState(false);\r\n  let [searcherror, setsearcherror] = useState(false);\r\n  const [pendingdata, setpendingdata] = useState([]);\r\n  const currentdate = moment().format(\"YYYY-MM-DD\");\r\n  const [filtervategory, setfiltercategory] = useState([]);\r\n  const [vendorid, setVendorId] = useState([]);\r\n  const [searchdata, setsearchData] = useState({\r\n    product_title_name: \"\",\r\n    manufacturing_date: \"\",\r\n    category: \"\",\r\n    vendor: \"\",\r\n    brand: \"\",\r\n  });\r\n  let token = localStorage.getItem(\"token\");\r\n\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n  /*<---Category list api---> */\r\n  const getCategorydatafilter = () => {\r\n    try {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL_0}/category?category=all`)\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n          setfiltercategory(cgory);\r\n        });\r\n    } catch (err) { }\r\n  };\r\n  /*<---vendor list api---> */\r\n  const getVendorData = () => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/vendors`,\r\n          { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n\r\n          const result = cgory.filter(\r\n            (thing, index, self) =>\r\n              index === self.findIndex((t) => t.shop_name === thing.shop_name)\r\n          );\r\n          const result1 = result.filter(\r\n            (item) => item.status === \"approved\" || item.status === \"active\"\r\n          );\r\n          setVendorId(result1);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const OnDateChange = (e) => {\r\n    let mdate = moment(e.target.value).format(\"YYYY-MM-DD\");\r\n    setsearchData({ ...searchdata, manufacturing_date: mdate });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let productArry = [];\r\n\r\n    setloading(true);\r\n    axios\r\n      .post(`${process.env.REACT_APP_BASEURL_0}/home?page=0&per_page=400`, {\r\n        product_search: {\r\n          search: [`${searchdata.product_title_name}`],\r\n          price_from: \"\",\r\n          price_to: \"\",\r\n          id: \"\",\r\n          product_title_name_asc_desc: \"\",\r\n          sale_price: \"\",\r\n          short_by_updated_on: \"\",\r\n          // product_title_name: ,\r\n          product_status: [\"pending\"],\r\n          manufacturing_date: [`${searchdata.manufacturing_date}`],\r\n          category: [`${searchdata.category}`],\r\n          brand: [`${searchdata.brand}`],\r\n          shop: [`${searchdata.vendor}`],\r\n        },\r\n      })\r\n      .then((response) => {\r\n        let v = response.data.results;\r\n        v.forEach(function (item, index) {\r\n\r\n          // console.log(item.category)\r\n          // console.log(response.data.category_name[item.category])\r\n          let catname = response.data.category_name[item.category]\r\n          // console.log(catname)\r\n          // console.log(item)\r\n\r\n          item.category = catname;\r\n          // console.log(\"item\"+JSON.stringify(item))\r\n\r\n          productArry.push(item)\r\n        }\r\n        );\r\n        let response_data = {};\r\n        response_data[\"results\"] = productArry;\r\n        setpendingdata(response_data);\r\n        setapicall(false);\r\n        setsearcherror(false);\r\n        setloading(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    getCategorydatafilter();\r\n    getVendorData();\r\n  }, [apicall]);\r\n\r\n  const onSearchClick = () => {\r\n    if (\r\n      searchdata.product_title_name === \"\" &&\r\n      searchdata.brand === \"\" &&\r\n      searchdata.category === \"\" &&\r\n      searchdata.vendor === \"\" &&\r\n      searchdata.manufacturing_date === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      setsearcherror(false);\r\n      setapicall(true);\r\n    }\r\n  };\r\n\r\n  const OnReset = () => {\r\n    setsearchData({\r\n      product_title_name: \"\",\r\n      manufacturing_date: \"\",\r\n      vendor: \"\",\r\n      category: \"\",\r\n      brand: \"\",\r\n    });\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n  // end search and reset\r\n  const columns = [\r\n    {\r\n      name: \"#\",\r\n      width: \"150px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <img\r\n          height=\"90px\"\r\n          width=\"70px\"\r\n          alt={row.product_title_name}\r\n          src={\r\n            row.all_images\r\n              ? row.all_images\r\n              : \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n          }\r\n          style={{\r\n            borderRadius: 10,\r\n            paddingTop: 10,\r\n            paddingBottom: 10,\r\n            textAlign: \"right\",\r\n          }}\r\n          onClick={handleClick}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => row.product_title_name,\r\n      sortable: true,\r\n      width: \"200px\",\r\n    },\r\n    {\r\n      name: \"Category\",\r\n      selector: (row) => row.category,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    {\r\n      name: \"Vendor\",\r\n      selector: (row) => row.shop,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Product Type\",\r\n      selector: (row) => row.product_type,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Brand\",\r\n      selector: (row) => row.brand,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    {\r\n      name: \"Mrp\",\r\n      selector: (row) => (\r\n        <p className=\"m-0\">\r\n          <b>MRP :</b>₹ {Number(row.mrp).toFixed(2)} <br />\r\n          <b>Discount : </b>\r\n          {Number(row.discount).toFixed(2)}%\r\n          {/* {row.discount === \"0\" ? null : row.discount + \"%\"}{\" \"} */}\r\n          <br />\r\n          <b>Product Price:</b>₹ {Number(row.product_price).toFixed(2)} <br />\r\n          <b>Sale Price:</b>₹ {Number(row.sale_price).toFixed(2)} <br />\r\n        </p>\r\n      ),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Tax\",\r\n      selector: (row) => (\r\n        <div className=\"d-flex flex-column\">\r\n          <b>\r\n            Total:\r\n            {Number(row.gst) +\r\n              Number(row.cgst) +\r\n              Number(row.sgst) +\r\n              Number(row.wholesale_sales_tax) +\r\n              Number(row.retails_sales_tax) +\r\n              Number(row.manufacturers_sales_tax) +\r\n              Number(row.value_added_tax) +\r\n              \"%\"}{\" \"}\r\n          </b>{\" \"}\r\n          <div className=\"d-flex\">\r\n            <b>Gst :</b>₹ {Number(row.gst).toFixed(2)}%<b>Cgst : </b>\r\n            {Number(row.cgst).toFixed(2)}%\r\n            {/* {row.discount === \"0\" ? null : row.discount + \"%\"}{\" \"} */}\r\n            <b>Sgst:</b> {Number(row.sgst).toFixed(2)}%\r\n          </div>\r\n          <div className=\"d-flex flex-column\">\r\n            <b>\r\n              wholesale_sales_tax:{Number(row.wholesale_sales_tax).toFixed(2)}%\r\n            </b>{\" \"}\r\n            <b>retails_sales_tax:{Number(row.retails_sales_tax).toFixed(2)}%</b>{\" \"}\r\n            <b>value_added_tax:{Number(row.value_added_tax).toFixed(2)}% </b>\r\n            <b>\r\n              manufacturers_sales_tax:{\" \"}\r\n              {Number(row.manufacturers_sales_tax).toFixed(2)}%\r\n            </b>{\" \"}\r\n          </div>\r\n        </div>\r\n      ),\r\n\r\n      sortable: true,\r\n      width: \"200px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"SP\",\r\n      selector: (row) => row.sale_price.toFixed(2),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"SP\",\r\n      selector: (row) => row.sale_price.toFixed(2),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Qty\",\r\n      selector: (row) => row.quantity,\r\n      sortable: true,\r\n      width: \"120px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"MDate\",\r\n      selector: (row) => moment(row.manufacturing_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"EDate\",\r\n      selector: (row) => moment(row.expire_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Change Status\",\r\n      selector: (row) => (\r\n        <Form.Select\r\n          aria-label=\"Search by delivery\"\r\n          size=\"sm\"\r\n          className=\"w-100\"\r\n          onChange={(e) => onProductStatusChange(e, row.id, row.product_id)}\r\n          value={row.product_status}\r\n        >\r\n          <option value=\"\">Select</option>\r\n          <option value=\"pending\">Pending</option>\r\n          <option value=\"draft\">Draft</option>\r\n          <option value=\"Approved\">Approved</option>\r\n        </Form.Select>\r\n      ),\r\n      sortable: true,\r\n    },\r\n  ];\r\n  const onProductStatusChange = (e, id, productid) => {\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL_0}/product_status_update`,\r\n        {\r\n          id: `${id}`,\r\n          product_id: `${productid}`,\r\n          product_status: e.target.value,\r\n        },\r\n        {\r\n          headers: { admin_token: `${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setapicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleClick = () => { };\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n      <div>\r\n        <h2>Pending Products</h2>\r\n\r\n        {/* search bar */}\r\n        <div className=\"card mt-3 p-3 \">\r\n          <div className=\"row pb-3\">\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <input\r\n                onChange={OnSearchChange}\r\n                name=\"product_title_name\"\r\n                value={searchdata.product_title_name}\r\n                className={\"form-control\"}\r\n                type={\"text\"}\r\n                placeholder={\"Search by product name\"}\r\n              />\r\n              {searcherror === true ? (\r\n                <small className=\"text-danger\">please fill the feild</small>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by category\"\r\n                onChange={OnSearchChange}\r\n                name=\"category\"\r\n                value={String(searchdata.category)}\r\n              >\r\n                <option value={\"\"}>Select Category</option>\r\n                {(filtervategory || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.id} key={i}>\r\n                      {\" \"}\r\n                      {data.category_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by vendor\"\r\n                onChange={OnSearchChange}\r\n                name=\"vendor\"\r\n                value={String(searchdata.vendor)}\r\n              >\r\n                <option value={\"\"}>Select Vendor</option>\r\n                {(vendorid || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.shop_name} key={i}>\r\n                      {\" \"}\r\n                      {data.shop_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by brand\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by brand\"\r\n                onChange={OnSearchChange}\r\n                name=\"brand\"\r\n                value={String(searchdata.brand)}\r\n              >\r\n                <option value={\"\"}>Select Brand</option>\r\n                {(BrandJson.BrandJson || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data} key={i}>\r\n                      {\" \"}\r\n                      {data}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input value={}\">\r\n              <input\r\n                type={\"date\"}\r\n                onChange={OnDateChange}\r\n                name=\"manufacturing_date\"\r\n                value={searchdata.manufacturing_date}\r\n                className={\"adminsideinput\"}\r\n                placeholder={\"Search by Date\"}\r\n                max={currentdate}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 mt-2 aos_input\">\r\n              <MainButton\r\n                onClick={onSearchClick}\r\n                btntext={\"Search\"}\r\n                btnclass={\"button main_button w-100\"}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 mt-2 aos_input\">\r\n              <MainButton\r\n                btntext={\"Reset\"}\r\n                btnclass={\"button main_button w-100\"}\r\n                type=\"reset\"\r\n                onClick={OnReset}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* upload */}\r\n\r\n          {/* datatable */}\r\n\r\n          <DataTable\r\n            columns={columns}\r\n            data={pendingdata.results}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n            className={\"table_body pendingproduct_table\"}\r\n          />\r\n          <SweetAlert\r\n            show={Alert}\r\n            title=\"Product Name\"\r\n            text=\"Are you Sure you want to restore\"\r\n            onConfirm={hideAlert}\r\n            showCancelButton={true}\r\n            onCancel={hideAlert}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pendingproduct;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\expiredproduct.js",["473"],[],"import React, { useEffect, useState } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport SweetAlert from \"sweetalert-react\";\r\nimport \"sweetalert/dist/sweetalert.css\";\r\nimport axios from \"axios\";\r\nimport BrandJson from \"./../json/BrandJson\";\r\nimport moment from \"moment\";\r\nimport Loader from \"../common/loader\";\r\n\r\nconst Expiredproduct = () => {\r\n  const handleClick = () => { };\r\n  const hideAlert = () => setAlert(false);\r\n  const [Alert, setAlert] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n  const [apicall, setapicall] = useState(false);\r\n  let [searcherror, setsearcherror] = useState(false);\r\n  const [expiredata, setexpiredata] = useState([]);\r\n  const currentdate = moment().format(\"YYYY-MM-DD\");\r\n  const [filtervategory, setfiltercategory] = useState([]);\r\n  const [vendorid, setVendorId] = useState([]);\r\n  const [searchdata, setsearchData] = useState({\r\n    product_title_name: \"\",\r\n    manufacturing_date: \"\",\r\n    category: \"\",\r\n    vendor: \"\",\r\n    brand: \"\",\r\n  });\r\n  let token = localStorage.getItem(\"token\");\r\n  // 'category:',searchdata.category,\r\n  // 'vendot:',searchdata.vendor,\r\n  // 'brand:',searchdata.brand,\r\n  // 'error:',searcherror);\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n\r\n  /*<---Category list api---> */\r\n  const getCategorydatafilter = () => {\r\n    try {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL_0}/category?category=all`)\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n          setfiltercategory(cgory);\r\n        });\r\n    } catch (err) { }\r\n  };\r\n  /*<---Category list api---> */\r\n  const getVendorData = () => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/vendors`,\r\n          { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n\r\n          const result = cgory.filter(\r\n            (thing, index, self) =>\r\n              index === self.findIndex((t) => t.shop_name === thing.shop_name)\r\n          );\r\n          const result1 = result.filter(\r\n            (item) => item.status === \"approved\" || item.status === \"active\"\r\n          );\r\n          setVendorId(result1);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  // const OnDateChange = (e) => {\r\n  //   let mdate = moment(e.target.value).format(\"YYYY-MM-DD\");\r\n  //   setsearchData({ ...searchdata, manufacturing_date: mdate });\r\n  // };\r\n  useEffect(() => {\r\n    let productArry = [];\r\n    setloading(true);\r\n    axios\r\n      .post(`${process.env.REACT_APP_BASEURL_0}/home?page=0&per_page=400`, {\r\n        product_search: {\r\n          search: [`${searchdata.product_title_name}`],\r\n          price_from: \"\",\r\n          price_to: \"\",\r\n          id: \"\",\r\n          product_title_name_asc_desc: \"\",\r\n          sale_price: \"\",\r\n          short_by_updated_on: \"\",\r\n          // product_title_name: ,\r\n          manufacturing_date: [`${searchdata.manufacturing_date}`],\r\n          category: [`${searchdata.category}`],\r\n          brand: [`${searchdata.brand}`],\r\n          shop: [`${searchdata.vendor}`],\r\n          // expire_date: [`${currentdate}`],\r\n        },\r\n      })\r\n      .then((response) => {\r\n        // let data = response.data.results;\r\n        let v = response.data.results;\r\n        v.forEach(function (item, index) {\r\n          // console.log(item.category)\r\n          // console.log(response.data.category_name[item.category])\r\n          let catname = response.data.category_name[item.category]\r\n          // console.log(catname)\r\n          // console.log(item)\r\n          item.category = catname;\r\n          // console.log(\"item\"+JSON.stringify(item))\r\n\r\n          productArry.push(item)\r\n        })\r\n        let response_data = {};\r\n        response_data[\"results\"] = productArry;\r\n        if (v === \"\" || v === null || v === undefined) {\r\n        } else {\r\n          let data_Array = v.filter((arr) => {\r\n            if (arr.expire_date < currentdate) {\r\n            }\r\n            return arr;\r\n\r\n          });\r\n          setexpiredata(data_Array);\r\n          setapicall(false);\r\n          setsearcherror(false);\r\n          setloading(false);\r\n        }\r\n      });\r\n    getCategorydatafilter();\r\n    getVendorData();\r\n  }, [apicall]);\r\n  const columns = [\r\n    {\r\n      name: \"#\",\r\n      width: \"100px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <img\r\n          alt={\"apna_organic\"}\r\n          src={\r\n            row.all_images\r\n              ? row.all_images\r\n              : \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n          }\r\n          style={{\r\n            padding: 10,\r\n            textAlign: \"right\",\r\n            maxHeight: \"100px\",\r\n            maxWidth: \"100px\",\r\n          }}\r\n          onClick={() => handleClick()}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => (\r\n        <div>\r\n          <p className=\"mb-1\">\r\n            <b>\r\n              {row.product_title_name}\r\n              <br />\r\n            </b>\r\n            {/* Product ID: {row.product_id} <br /> */}\r\n            <span className=\"d-flex flex-column \">\r\n              {row.is_featured === 1 ? (\r\n                <span className={\"badge bg-warning mt-1\"}>\r\n                  {\"featured product\"}\r\n                </span>\r\n              ) : null}\r\n              {row.is_special_offer === 1 ? (\r\n                <span className={\"badge bg-info mt-1\"}>{\"special offer\"}</span>\r\n              ) : null}\r\n            </span>\r\n          </p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n      width: \"200px\",\r\n    },\r\n    {\r\n      name: \"Category\",\r\n      selector: (row) => row.category,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Vendor\",\r\n      selector: (row) => row.shop,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Product Type\",\r\n      selector: (row) => row.product_type,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Brand\",\r\n      selector: (row) => row.brand,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    {\r\n      name: \"Mrp\",\r\n      selector: (row) => (\r\n        <p className=\"m-0\">\r\n          <b>MRP :</b>₹ {Number(row.mrp).toFixed(2)} <br />\r\n          <b>Discount : </b>\r\n          {Number(row.discount).toFixed(2)}%\r\n          {/* {row.discount === \"0\" ? null : row.discount + \"%\"}{\" \"} */}\r\n          <br />\r\n          <b>Product Price:</b>₹ {Number(row.product_price).toFixed(2)} <br />\r\n          <b>Sale Price:</b>₹ {Number(row.sale_price).toFixed(2)} <br />\r\n        </p>\r\n      ),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Tax\",\r\n      selector: (row) => (\r\n        <div className=\"d-flex flex-column\">\r\n          <b>\r\n            Total:\r\n            {Number(row.gst) +\r\n              Number(row.cgst) +\r\n              Number(row.sgst) +\r\n              Number(row.wholesale_sales_tax) +\r\n              Number(row.retails_sales_tax) +\r\n              Number(row.manufacturers_sales_tax) +\r\n              Number(row.value_added_tax) +\r\n              \"%\"}{\" \"}\r\n          </b>{\" \"}\r\n          <div className=\"d-flex\">\r\n            <b>Gst :</b>₹ {Number(row.gst).toFixed(2)}%<b>Cgst : </b>\r\n            {Number(row.cgst).toFixed(2)}%\r\n            {/* {row.discount === \"0\" ? null : row.discount + \"%\"}{\" \"} */}\r\n            <b>Sgst:</b> {Number(row.sgst).toFixed(2)}%\r\n          </div>\r\n          <div className=\"d-flex flex-column\">\r\n            <b>\r\n              wholesale_sales_tax:{Number(row.wholesale_sales_tax).toFixed(2)}%\r\n            </b>{\" \"}\r\n            <b>retails_sales_tax:{Number(row.retails_sales_tax).toFixed(2)}%</b>{\" \"}\r\n            <b>value_added_tax:{Number(row.value_added_tax).toFixed(2)}% </b>\r\n            <b>\r\n              manufacturers_sales_tax:{\" \"}\r\n              {Number(row.manufacturers_sales_tax).toFixed(2)}%\r\n            </b>{\" \"}\r\n          </div>\r\n        </div>\r\n      ),\r\n\r\n      sortable: true,\r\n      width: \"200px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"SP\",\r\n      selector: (row) => row.sale_price.toFixed(2),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Qty\",\r\n      selector: (row) => row.quantity,\r\n      sortable: true,\r\n      width: \"120px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"MDate\",\r\n      selector: (row) => moment(row.manufacturing_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"EDate\",\r\n      selector: (row) => moment(row.expire_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n  ];\r\n  const onSearchClick = () => {\r\n    if (\r\n      searchdata.product_title_name === \"\" &&\r\n      searchdata.category === \"\" &&\r\n      searchdata.manufacturing_date === \"\" &&\r\n      searchdata.brand === \"\" &&\r\n      searchdata.vendor === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      setsearcherror(false);\r\n      setapicall(true);\r\n    }\r\n  };\r\n\r\n  const OnReset = () => {\r\n    setsearchData({\r\n      product_title_name: \"\",\r\n      manufacturing_date: \"\",\r\n      vendor: \"\",\r\n      brand: \"\",\r\n      category: \"\",\r\n    });\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n      <div>\r\n        <h2>Expired Products</h2>\r\n\r\n        {/* search bar */}\r\n        <div className=\"card mt-3 p-3 \">\r\n          <div className=\"row pb-3\">\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <input\r\n                type={\"text\"}\r\n                placeholder={\"Search by product name\"}\r\n                onChange={OnSearchChange}\r\n                name=\"product_title_name\"\r\n                value={searchdata.product_title_name}\r\n                className={\"form-control\"}\r\n              />{\" \"}\r\n              {searcherror === true ? (\r\n                <small className=\"text-danger\">please fill the feild</small>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by category\"\r\n                onChange={OnSearchChange}\r\n                name=\"category\"\r\n                value={String(searchdata.category)}\r\n              >\r\n                <option value={\"\"}>Select Category</option>\r\n                {(filtervategory || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.id} key={i}>\r\n                      {\" \"}\r\n                      {data.category_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by vendor\"\r\n                onChange={OnSearchChange}\r\n                name=\"vendor\"\r\n                value={String(searchdata.vendor)}\r\n              >\r\n                <option value={\"\"}>Select Vendor</option>\r\n                {(vendorid || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.shop_name} key={i}>\r\n                      {\" \"}\r\n                      {data.shop_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-2 col-sm-6 aos_input\">\r\n              <Form.Select\r\n                aria-label=\"Search by brand\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by brand\"\r\n                onChange={OnSearchChange}\r\n                name=\"brand\"\r\n                value={String(searchdata.brand)}\r\n              >\r\n                <option value={\"\"}>Select Brand</option>\r\n                {(BrandJson.BrandJson || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data} key={i}>\r\n                      {\" \"}\r\n                      {data}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input \">\r\n              <MainButton\r\n                onClick={onSearchClick}\r\n                btntext={\"Search\"}\r\n                btnclass={\"button main_button w-100\"}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mt-2\">\r\n              <MainButton\r\n                btntext={\"Reset\"}\r\n                btnclass={\"button main_button w-100\"}\r\n                type=\"reset\"\r\n                onClick={OnReset}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* upload */}\r\n\r\n          {/* datatable */}\r\n\r\n          <DataTable\r\n            columns={columns}\r\n            data={expiredata}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n            className={\"table_body expired_product_table\"}\r\n          />\r\n          <SweetAlert\r\n            show={Alert}\r\n            title=\"Product Name\"\r\n            text=\"Are you Sure you want to delete\"\r\n            onConfirm={hideAlert}\r\n            showCancelButton={true}\r\n            onCancel={hideAlert}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Expiredproduct;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\transactions\\transactions_detail.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\products\\featuredproduct.js",["474","475"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport SAlert from \"../common/salert\";\r\nimport MainButton from \"../common/button\";\r\nimport BrandJson from \"./../json/BrandJson\";\r\nimport Loader from \"../common/loader\";\r\nimport { Badge } from \"react-bootstrap\";\r\n\r\nconst Featuredproduct = () => {\r\n  // let productid = localStorage.getItem(\"productid\");\r\n  // const currentdate = moment().format(\"\");\r\n  const formRef = useRef();\r\n  const [featuredProductData, setFeatureProductData] = useState([]);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  const [Alert, setAlert] = useState(false);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [featuredData, setFeaturetData] = useState([]);\r\n  const [show, setShow] = useState(\"\");\r\n  const [validated, setValidated] = useState(false);\r\n  // const [id, setId] = useState(\"\");\r\n  const [filtervategory, setfiltercategory] = useState([]);\r\n  const [vendorid, setVendorId] = useState([]);\r\n  // const [varietyUnitvalidation, setVarietyUnitvalidation] = useState(\"\");\r\n\r\n  // const[categoryname,setCategoryName]=useState([])\r\n  const [searchdata, setsearchData] = useState({\r\n    product_title_name: \"\",\r\n    status: \"\",\r\n    category: \"\",\r\n    vendor: \"\",\r\n    brand: \"\",\r\n  });\r\n  const [searcherror, setsearcherror] = useState(\"\");\r\n  console.log(searcherror)\r\n  let [loading, setloading] = useState(false);\r\n\r\n  let token = localStorage.getItem(\"token\");\r\n\r\n  // const handleAlert = () => setAlert(true);\r\n  const hideAlert = () => setAlert(false);\r\n\r\n  const handleClose = (e) => {\r\n    setFeaturetData(\"\")\r\n    setFeatureProductData(\"\")\r\n    setVendorId(\"\")\r\n    // formRef.current.reset();\r\n    e.preventDefault();\r\n    setValidated(false);\r\n    setShow(false);\r\n    setapicall(true);\r\n\r\n  };\r\n\r\n  let closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n\r\n  /*<---Category list api---> */\r\n  const getCategorydatafilter = () => {\r\n    try {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL_0}/category?category=all`, {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n          setfiltercategory(cgory);\r\n        });\r\n    } catch (err) { }\r\n  };\r\n  /*<---Category list api---> */\r\n  const getVendorData = () => {\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL}/vendors`,\r\n          { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          let cgory = response.data;\r\n\r\n          const result = cgory.filter(\r\n            (thing, index, self) =>\r\n              index === self.findIndex((t) => t.shop_name === thing.shop_name)\r\n          );\r\n          const result1 = result.filter(\r\n            (item) => item.status === \"approved\" || item.status === \"active\"\r\n          );\r\n          setVendorId(result1);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  /*<----Function to get the data---->*/\r\n\r\n  let cat_name_data = \"\";\r\n  const getCategoryNameData = () => {\r\n    try {\r\n      axios\r\n        .get(\r\n          `${process.env.REACT_APP_BASEURL_0}/category_name`,\r\n          // { vendor_id: \"all\" },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n\r\n          cat_name_data = response.data[0];\r\n          // setVid(\"\")\r\n        });\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n\r\n\r\n  };\r\n  useEffect(() => {\r\n    getCategoryNameData();\r\n\r\n  }, [apicall])\r\n  // console.log(categoryname)\r\n\r\n  /*<---Render feature data function--->*/\r\n  useEffect(() => {\r\n    let productArry = [];\r\n\r\n    setloading(true);\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/fetured_product_search`,\r\n          {\r\n            vendor_id: \"\",\r\n            fetured_type: \"featured_offer\",\r\n            start_date: /*`${searchdata.start_date}`*/ \"\",\r\n            end_date: /*`${searchdata.end_date}`*/ \"\",\r\n            category: [`${searchdata.category}`],\r\n            brand: [`${searchdata.brand}`],\r\n            shop: [`${searchdata.vendor}`],\r\n            product_title_name: [`${searchdata.product_title_name}`],\r\n            status: [`${searchdata.status}`],\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // setFeatureProductData(response.data);\r\n          let v = response.data;\r\n\r\n          v.forEach(function (item, index) {\r\n\r\n            let catname = cat_name_data[item.category];\r\n            if (catname !== undefined || catname !== null || catname !== \"\") {\r\n              item.category = catname;\r\n            }\r\n            productArry.push(item)\r\n          }\r\n          )\r\n\r\n\r\n          setFeatureProductData(productArry);\r\n\r\n          setapicall(false);\r\n          setloading(false);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    getCategorydatafilter();\r\n    getVendorData();\r\n  }, [apicall]);\r\n\r\n  /*<---Table data ---->*/\r\n  const columns = [\r\n    {\r\n      name: \"#\",\r\n      width: \"100px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <img\r\n          alt={\"apna_organic\"}\r\n          src={\r\n            row.all_images\r\n              ? row.all_images\r\n              : \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n          }\r\n          style={{\r\n            padding: 10,\r\n            textAlign: \"right\",\r\n            maxHeight: \"100px\",\r\n            maxWidth: \"100px\",\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => (\r\n        <div>\r\n          <p className=\"mb-1\">\r\n            <b>\r\n              {row.product_title_name}\r\n              <br />\r\n            </b>\r\n            {/* Product ID: {row.product_id} <br /> */}\r\n            <span className=\"d-flex flex-column \">\r\n              {row.is_featured === 1 ? (\r\n                <span className={\"badge bg-warning mt-1\"}>\r\n                  {\"featured product\"}\r\n                </span>\r\n              ) : null}\r\n              {row.is_special_offer === 1 ? (\r\n                <span className={\"badge bg-info mt-1\"}>{\"special offer\"}</span>\r\n              ) : null}\r\n            </span>\r\n          </p>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n      width: \"200px\",\r\n    },\r\n    {\r\n      name: \"Category\",\r\n      selector: (row) => row.category,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Vendor\",\r\n      selector: (row) => row.shop,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Product Type\",\r\n      selector: (row) => row.product_type,\r\n      sortable: true,\r\n      width: \"90px\",\r\n    },\r\n    {\r\n      name: \"Brand\",\r\n      selector: (row) => row.brand,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    {\r\n      name: \"vendor_id\",\r\n      selector: (row) => row.vendor_id,\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: 0,\r\n      },\r\n    },\r\n    {\r\n      name: \"Fetured_type\",\r\n      selector: (row) => row.fetured_type,\r\n      sortable: true,\r\n      width: \"250px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <Badge\r\n          bg={\r\n            row.status === \"pending\"\r\n              ? \"badge bg-info\"\r\n              : row.status === \"expired\"\r\n                ? \"badge bg-danger\"\r\n                : row.status === \"publish\"\r\n                  ? \"badge bg-success\"\r\n                  : null\r\n          }\r\n        >\r\n          {row.status}\r\n        </Badge>\r\n      ),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      // center: true,\r\n    },\r\n    // {\r\n    //   name: \"Status\",\r\n    //   selector: (row) => (\r\n    //     <span\r\n    //       className={\r\n    //         (currentdate > row.start_date || currentdate === row.start_date) &&\r\n    //           currentdate < row.end_date\r\n    //           ? \"badge bg-success\"\r\n    //           : currentdate > row.end_date || currentdate === row.end_date\r\n    //             ? \"badge bg-danger\"\r\n    //             : currentdate < row.start_date\r\n    //               ? \"badge bg-info\"\r\n    //               : null\r\n    //       }\r\n    //     >\r\n    //       {\r\n    //       ( row.start_date || currentdate === row.start_date) &&\r\n    //         currentdate < row.end_date\r\n    //         ? \"Active\"\r\n    //         : currentdate > row.end_date || currentdate === row.end_date\r\n    //           ? \"Expired\"\r\n    //           : currentdate < row.start_date\r\n    //             ? \"In Active\"\r\n    //             : null\r\n    //             }\r\n    //     </span>\r\n    //   ),\r\n    //   sortable: true,\r\n    //   width: \"200px\",\r\n    // },\r\n    {\r\n      name: \"Start Date\",\r\n      selector: (row) => moment(row.start_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"End Date\",\r\n      selector: (row) => moment(row.end_date).format(\"DD-MM-YYYY\"),\r\n      sortable: true,\r\n      width: \"130px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"100px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.vendor_id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  const handleShow = (vendor_id) => {\r\n    console.log(vendor_id)\r\n    console.log(\"vendorid\")\r\n    getCategoryNameData();\r\n\r\n    try {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL_0}/fetured_product_search`,\r\n          {\r\n            vendor_id: vendor_id,\r\n            fetured_type: \"featured_offer\",\r\n            start_date: featuredData.start_date,\r\n            end_date: featuredData.end_date,\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setFeaturetData({\r\n            ...featuredData,\r\n            start_date: response.data[0].start_date,\r\n\r\n            end_date: response.data[0].end_date,\r\n          });\r\n\r\n\r\n          setapicall(false);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    setShow(true);\r\n  };\r\n\r\n  /*<----Onchange function of Feature---->*/\r\n  const handleFormChange = (e) => {\r\n    setFeaturetData({ ...featuredData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  /*<----Function to update feature product---->*/\r\n  const UpdateFeaturedProduct = (e) => {\r\n    const form = e.currentTarget;\r\n\r\n    if (form.checkValidity() === false || featuredData.start_date === \"\" || featuredData.end_date === \"\"\r\n      || featuredData.start_date > featuredData.end_date) {\r\n      e.preventDefault();\r\n      setValidated(true);\r\n    }\r\n\r\n    else {\r\n      axios\r\n        .put(\r\n          `${process.env.REACT_APP_BASEURL_0}/update_fetured_product`,\r\n          {\r\n            id: featuredProductData[0].fetured_product_table_id,\r\n            start_date: featuredData.start_date,\r\n            end_date: featuredData.end_date,\r\n          },\r\n          {\r\n            headers: { admin_token: `${token}` },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          // let data = response.data;\r\n          setValidated(true);\r\n\r\n          setapicall(true);\r\n          setShow(false);\r\n          setUpdateAlert(true);\r\n        });\r\n      e.preventDefault();\r\n      setValidated(false);\r\n      formRef.current.reset();\r\n      // setValidated(false);\r\n    }\r\n\r\n\r\n  };\r\n\r\n  // const OnDateChange = (e) => { };\r\n  // const submitHandler = () => {\r\n  //   setapicall(true);\r\n  // };\r\n  /*<---Onchange function of search --->*/\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n  /*<---Function to reset Search--->*/\r\n  const OnReset = () => {\r\n    setsearchData({\r\n      product_title_name: \"\",\r\n      status: \"\",\r\n      category: \"\",\r\n      brand: \"\",\r\n      vendor: \"\",\r\n    });\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n  /*<---Onlick Function to Search--->*/\r\n  const Search = () => {\r\n    if (\r\n      searchdata.product_title_name === \"\" &&\r\n      searchdata.status === \"\" &&\r\n      searchdata.vendor === \"\" &&\r\n      searchdata.brand === \"\" &&\r\n      searchdata.category === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      setsearcherror(false);\r\n      setapicall(true);\r\n    }\r\n  };\r\n  // let date = moment();\r\n  // let currentDate = date.format(\"YYYY-MM-DD\");\r\n  return (\r\n    <>\r\n      {loading === true ? <Loader /> : null}\r\n      <div>\r\n        <h2>Featured Products</h2>\r\n        <div className=\"card mt-3 p-3\">\r\n          <div className=\"row pb-3\">\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <input\r\n                type={\"text\"}\r\n                placeholder={\"Search by product name\"}\r\n                onChange={OnSearchChange}\r\n                name=\"product_title_name\"\r\n                value={searchdata.product_title_name}\r\n                className={\"form-control\"}\r\n              />{\" \"}\r\n              {/* {searcherror === true ? (\r\n                <small className=\"text-danger\">please fill the feild</small>\r\n              ) : null} */}\r\n            </div>\r\n            {/* <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n  <input type={\"text\"}  onChange={OnSearchChange} name='product_title_name'\r\n  value={searchdata.status} placeholder={\"Search by status\"} className={'adminsideinput'}/>\r\n</div> */}\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by category\"\r\n                onChange={OnSearchChange}\r\n                name=\"category\"\r\n                value={String(searchdata.category)}\r\n              >\r\n                <option value={\"\"}>Select Category</option>\r\n                {(filtervategory || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.id} key={i}>\r\n                      {\" \"}\r\n                      {data.category_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by vendor\"\r\n                onChange={OnSearchChange}\r\n                name=\"vendor\"\r\n                value={String(searchdata.vendor)}\r\n              >\r\n                <option value={\"\"}>Select Vendor</option>\r\n                {(vendorid || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data.shop_name} key={i}>\r\n                      {\" \"}\r\n                      {data.shop_name}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <Form.Select\r\n                aria-label=\"Search by brand\"\r\n                className=\"adminselectbox\"\r\n                placeholder=\"Search by brand\"\r\n                onChange={OnSearchChange}\r\n                name=\"brand\"\r\n                value={String(searchdata.brand)}\r\n              >\r\n                <option value={\"\"}>Select Brand</option>\r\n                {(BrandJson.BrandJson || []).map((data, i) => {\r\n                  return (\r\n                    <option value={data} key={i}>\r\n                      {\" \"}\r\n                      {data}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6\">\r\n              <Form.Select\r\n                aria-label=\"Search by delivery\"\r\n                className=\"adminselectbox\"\r\n                onChange={OnSearchChange}\r\n                name=\"status\"\r\n                value={String(searchdata.status)}\r\n              >\r\n                <option value=\"\">status</option>\r\n                <option value=\"publish\">Publish</option>\r\n                <option value=\"expired\">Expired</option>\r\n                <option value=\"pending\">Pending</option>\r\n              </Form.Select>\r\n            </div>\r\n\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2 \">\r\n              <MainButton\r\n                btntext={\"Search\"}\r\n                btnclass={\"button main_button w-100\"}\r\n                onClick={Search}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2 \">\r\n              <MainButton\r\n                btntext={\"Reset\"}\r\n                btnclass={\"button main_button w-100\"}\r\n                type=\"reset\"\r\n                onClick={OnReset}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <Modal size=\"lg\" show={show} onHide={() => setShow(false)}>\r\n          <Form className=\"\" noValidate\r\n            validated={validated} ref={formRef}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title></Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div className=\"row p-3 m-0\">\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicStartDate\"\r\n                  >\r\n                    <Form.Label>Start Date</Form.Label>\r\n                    {console.log(featuredData.start_date)}\r\n                    {console.log(featuredData.end_date)}\r\n\r\n                    {/* <Form.Control\r\n                        name=\"start_date\"\r\n                        value={featuredData.start_date}\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        type=\"date\"\r\n                        placeholder=\"Coupon Start Date\"\r\n                        min={currentDate}\r\n                      /> */}\r\n                    {/* <Form.Control\r\n                                                  type=\"date\"\r\n                                                  sm=\"9\"\r\n                                                  required\r\n                                                 placeholder=\"Coupon Start Date\"\r\n                                                  min={moment().format(\r\n                                                    \"YYYY-MM-DD\"\r\n                                                  )}\r\n                                                 \r\n                                                  onChange={(e) =>\r\n                                                    handleFormChange(e)\r\n                                                  }\r\n                                                  name={\"start_date\"}\r\n                                                  value={\r\n                                                    featuredData.start_date\r\n                                                  }\r\n                                                /> */}\r\n                    <Form.Control\r\n                      name=\"start_date\"\r\n                      value={featuredData.start_date}\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      type=\"date\"\r\n                      placeholder=\"Coupon Start Date\"\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicStartDate\"\r\n                  >\r\n                    <Form.Label>End Date</Form.Label>\r\n                    {/* <Form.Control\r\n                        name=\"end_date\"\r\n                        value={featuredData.end_date}\r\n                        onChange={(e) => handleFormChange(e)}\r\n                        type=\"date\"\r\n                        placeholder=\"Coupon Start Date\"\r\n                        min={featuredData.start_date}\r\n                      /> */}\r\n                    {/* <Form.Control\r\n                                                  type=\"date\"\r\n                                                  sm=\"9\"\r\n                                                  required\r\n                                                  disabled={\r\n                                                    featuredData.start_date\r\n                                                      ? false\r\n                                                      : true\r\n                                                  }\r\n                                                  min={moment(\r\n                                                    featuredData.start_date\r\n                                                  )\r\n                                                    .add(1, \"day\")\r\n                                                    .format(\"YYYY-MM-DD\")}\r\n                                                  onChange={(e) =>\r\n                                                    handleFormChange(e)\r\n                                                  }\r\n                                                  name={\"end_date\"}\r\n                                                  value={\r\n                                                    featuredData.end_date\r\n                                                  }\r\n                                                /> */}\r\n                    <Form.Control\r\n                      required\r\n                      name=\"end_date\"\r\n                      value={featuredData.end_date}\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      type=\"date\"\r\n                      placeholder=\"Coupon Start Date\"\r\n                    />\r\n                  </Form.Group>\r\n                </div>\r\n              </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <button\r\n                className=\"button main_outline_button\"\r\n                onClick={handleClose}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button\r\n                className=\"button main_outline_button\"\r\n                onClick={UpdateFeaturedProduct}\r\n              >\r\n                Update\r\n              </button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal>\r\n        <DataTable\r\n          columns={columns}\r\n          data={featuredProductData}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body featuredproduct_table\"}\r\n        />\r\n\r\n        <SAlert\r\n          show={Alert}\r\n          title=\"Product Name\"\r\n          text=\"Are you Sure you want to remove\"\r\n          onConfirm={hideAlert}\r\n          showCancelButton={true}\r\n          onCancel={hideAlert}\r\n        />\r\n        <SAlert\r\n          show={UpdateAlert}\r\n          title=\" Sold product Updated Successfully \"\r\n          onConfirm={closeUpdateAlert}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Featuredproduct;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\transactions\\transactions.js",["476"],[],"import React from \"react\";\r\n// import Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport \"../../../style/order.css\";\r\nimport axios from \"axios\";\r\nfunction Transactions() {\r\n  const token = localStorage.getItem(\"token\");\r\n  const [apicall, setapicall] = useState(false);\r\n  const [transectiondata, setTransectionData] = useState([]);\r\n  console.log(\"TRANSECTION\")\r\n  console.log(transectiondata)\r\n\r\n  const [SearchTransection, setSearchTransection] = useState({\r\n    order_id: \"\",\r\n    method: \"\",\r\n    status: \"\",\r\n  });\r\n\r\n  // To render the data of the transaction list :-\r\n  useEffect(() => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/transaction_list`,\r\n        {\r\n          order_id: SearchTransection.order_id,\r\n          method: SearchTransection.method,\r\n          status: SearchTransection.status,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        let data = response.data;\r\n        setTransectionData(data);\r\n        setapicall(false);\r\n      })\r\n      .catch((err) => { });\r\n  }, [apicall]);\r\n\r\n  // const TransectionSearch = () => {\r\n  //   axios\r\n  //     .post(`${process.env.REACT_APP_BASEURL}/transaction_list`, {\r\n  //       order_id: `${SearchTransection.order_id}`,\r\n  //       method: `${SearchTransection.method}`,\r\n  //       status: `${SearchTransection.status}`,\r\n  //     })\r\n  //     .then((response) => {\r\n  //       setTransectionData(response.data);\r\n  //       setSearchTransection(\"\");\r\n  //     });\r\n  // };\r\n\r\n  //Function to search the data on feild :-\r\n  const TranSearch = (e) => {\r\n    setSearchTransection({\r\n      ...SearchTransection,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  //Onclick search function:-\r\n  const onSearchClick = () => {\r\n    setapicall(true);\r\n  };\r\n\r\n  //To reset the search feild :-\r\n  const OnReset = () => {\r\n    setSearchTransection({ order_id: \"\", method: \"\", status: \"\" });\r\n    setapicall(true);\r\n  };\r\n  //To get the data in the table :-\r\n  const columns = [\r\n    {\r\n      name: \"Id\",\r\n      selector: (row) => <Link to=\"/transactions_detail\">{row.id}</Link>,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Order Id\",\r\n      selector: (row) => row.order_id,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Invoice No.\",\r\n      selector: (row) => row.invoice_no,\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Transactions Date\",\r\n      selector: (row) => row.transaction_date,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Amount\",\r\n      selector: (row) => row.amount,\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Method\",\r\n      selector: (row) =>\r\n        row.method === 1\r\n          ? \"UPI\"\r\n          : row.method === 2\r\n            ? \"Card\"\r\n            : row.method === 3\r\n              ? \"COD\"\r\n              : row.method === 4\r\n                ? \"Netbanking\"\r\n                : row.method === 5\r\n                  ? \"Wallet\"\r\n                  : \"Other\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <span\r\n          className={\r\n            row.status === 1\r\n              ? \"badge bg-primary\"\r\n              : row.status === 2\r\n                ? \"badge bg-success\"\r\n                : row.status === 3\r\n                  ? \"badge bg-danger\"\r\n                  : \"badge bg-dark\"\r\n          }\r\n        >\r\n          {row.status === 1\r\n            ? \"Processing\"\r\n            : row.status === 2\r\n              ? \"Success\"\r\n              : row.status === 3\r\n                ? \"Failed\"\r\n                : \"Refund\"}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>Transactions</h2>\r\n      <div className=\"card mt-3 px-3 \">\r\n        <div className=\"product_page_searchbox bg-gray my-4\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3 col-sm-6\">\r\n              <input\r\n                type={\"text\"}\r\n                className=\"adminsideinput\"\r\n                placeholder={\"Search by order id\"}\r\n                onChange={(e) => TranSearch(e)}\r\n                name={\"order_id\"}\r\n                value={SearchTransection.order_id}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                name={\"status\"}\r\n                onChange={(e) => TranSearch(e)}\r\n                value={SearchTransection.status}\r\n              >\r\n                <option>Select Status</option>\r\n                <option value=\"0\">Status</option>\r\n                <option value=\"1\">Processing</option>\r\n                <option value=\"2\">Success</option>\r\n                <option value=\"3\">Failed</option>\r\n                <option value=\"4\">Refund</option>\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6\">\r\n              <Form.Select\r\n                aria-label=\"Search by method\"\r\n                className=\"adminselectbox\"\r\n                name={\"method\"}\r\n                onChange={(e) => TranSearch(e)}\r\n                value={SearchTransection.method}\r\n              >\r\n                <option>Select Pyament Mode</option>\r\n                <option value=\"0\">Pyament Method</option>\r\n                <option value=\"1\">Card</option>\r\n                <option value=\"2\">UPI</option>\r\n                <option value=\"3\">Cash on delivery</option>\r\n                <option value=\"4\">Wallet</option>\r\n                <option value=\"5\">Other</option>\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6\">\r\n              <MainButton\r\n                btnclass={\"button main_button w-100\"}\r\n                btntext={\"Search\"}\r\n                onClick={onSearchClick}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 mt-2\">\r\n              <MainButton\r\n                btnclass={\"button main_button w-100\"}\r\n                btntext={\"Reset\"}\r\n                onClick={OnReset}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={transectiondata}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body transactions_table\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Transactions;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\login\\login.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\login\\change_password.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\login\\forgot.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\login\\footer.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\banner_manager.js",["477"],[],"import React, { useState, useRef } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport SweetAlert from \"sweetalert-react\";\r\nimport \"sweetalert/dist/sweetalert.css\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport { useEffect } from \"react\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\nimport axios from \"axios\";\r\nimport FileInput from \"./FileInput\";\r\nimport ImageCropper from \"./ImageCropper\";\r\n\r\nfunction Banner() {\r\n  let encoded;\r\n  let token = localStorage.getItem(\"token\");\r\n  const formRef = useRef();\r\n  const [error, setError] = useState(true);\r\n  const [show, setShow] = useState(false);\r\n  console.log(show)\r\n  const [bannershow, setBannerShow] = useState(\"\");\r\n  const [Alert, setAlert] = useState(false);\r\n  const [validated, setValidated] = useState(false);\r\n  const [banner, setBanner] = useState([]);\r\n  // const [imageBanner, setImageBanner] = useState([]);\r\n  const [apicall, setapicall] = useState([]);\r\n  const [bannerId, setBannerId] = useState(\"\");\r\n  const [Imgarray, setImgArray] = useState([]);\r\n  console.log(Imgarray)\r\n  // const [file, setFile] = useState();\r\n  const [AddAlert, setAddAlert] = useState(false);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  // const [fileName, setFileName] = useState(\"\");\r\n  const [addBanner, setAddBanner] = useState({\r\n    imgBase64: \"\",\r\n    title: \"\",\r\n    description: \"\",\r\n    size: \"\",\r\n    banner_url: \"\",\r\n    banner_location: \"\",\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Banner_id\",\r\n      selector: (row) => row.banner_id,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Logo\",\r\n      width: \"250px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <>\r\n          <img\r\n            alt={\"apna_organic\"}\r\n            src={\r\n              row.image\r\n                ? row.image\r\n                : \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n            }\r\n            style={{\r\n              padding: 10,\r\n              textAlign: \"right\",\r\n              maxHeight: \"100px\",\r\n              maxWidth: \"100px\",\r\n            }}\r\n          />\r\n          {/* <img\r\n            height=\"90px\"\r\n            width=\"75px\"\r\n            alt={row.title}\r\n            src={row.image.replace(\"public\", \"\")}\r\n            style={{\r\n              borderRadius: 10,\r\n              paddingTop: 10,\r\n              paddingBottom: 10,\r\n              textAlign: \"right\",\r\n            }}\r\n            onClick={() => handleClick()}\r\n          /> */}\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Title\",\r\n      selector: (row) => row.title,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Size\",\r\n      selector: (row) => row.size,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Banner_url\",\r\n      selector: (row) => row.banner_url,\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Description\",\r\n      selector: (row) => row.description,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Banner_location\",\r\n      selector: (row) => row.banner_location,\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"ACTION\",\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(\r\n              this,\r\n              row.banner_id,\r\n              row.title,\r\n              row.description,\r\n              row.imgBase64,\r\n              row.banner_url,\r\n              row.banner_location,\r\n              row.size\r\n            )}\r\n          />\r\n          <BsTrash\r\n            className=\" p-0 m-0 editiconn text-danger\"\r\n            onClick={handleAlert.bind(this, row.banner_id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  const closeAddAlert = () => {\r\n    setAddAlert(false);\r\n  };\r\n\r\n  const closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n\r\n  // let logo = `${process.env.REACT_APP_BASEURL}/${addBanner.image}`;\r\n  // let docsdata = `${process.env.REACT_APP_BASEURL}/${Imgarray}`;\r\n  // var Newlogo = logo.replace(\"/public\", \"\");\r\n  const handleAlert = (banner_id) => {\r\n    setBannerId(banner_id);\r\n    setAlert(true);\r\n  };\r\n\r\n  // const handleClick = () => {};\r\n\r\n  const hideAlert = () => {\r\n    axios.put(`${process.env.REACT_APP_BASEURL_0}/banner_delete`, {\r\n      banner_id: `${bannerId}`,\r\n      is_deleted: 0,\r\n    }, {\r\n      headers: { admin_token: `${token}` },\r\n    }).then((response) => {\r\n      setAlert(false);\r\n    });\r\n    setapicall(true);\r\n\r\n  };\r\n  const CancelAlert = () => {\r\n    setAlert(false);\r\n  };\r\n\r\n  const handleShow = (e, banner_id) => {\r\n    if (e === \"add\") {\r\n      setBannerShow(e);\r\n    } else {\r\n      function getBanner() {\r\n        try {\r\n          axios\r\n            .post(`${process.env.REACT_APP_BASEURL_0}/banner_list`, {\r\n              banner_id: e,\r\n              title: \"\",\r\n              banner_location: \"\",\r\n            }, {\r\n              headers: { admin_token: `${token}` },\r\n            })\r\n            .then((response) => {\r\n              let data = response.data;\r\n              setBanner(data);\r\n              setAddBanner(response.data[0]);\r\n              setBannerId(banner_id);\r\n              setImgArray(response.data[0].image);\r\n            });\r\n        } catch (err) { }\r\n      }\r\n      getBanner();\r\n      setBannerShow(true);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    axios\r\n      .post(`${process.env.REACT_APP_BASEURL_0}/banner_list`, {\r\n        banner_id: \"\",\r\n        title: \"\",\r\n        banner_location: \"\",\r\n      }, {\r\n        headers: { admin_token: `${token}` },\r\n      })\r\n      .then((response) => {\r\n        // let data = response.data;\r\n        setBanner(response.data);\r\n        setAddBanner(response.data);\r\n      });\r\n  }, [apicall]);\r\n  const [currentPage, setCurrentPage] = useState(\"choose-img\");\r\n  const [imgAfterCrop, setImgAfterCrop] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [imageName, setimageName] = useState(\"\");\r\n  const onImageSelected = (event) => {\r\n    if (event.target.files[0].name && event.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      const image_name = event.target.files[0].name;\r\n      reader.readAsDataURL(event.target.files[0]);\r\n\r\n      reader.onload = function () {\r\n        console.log(\"stage1 \")\r\n        setImage(reader.result);\r\n        setimageName(image_name)\r\n        console.log(reader.result)\r\n        console.log(image_name)\r\n\r\n        // onImageSelected({ \"dataurl\": reader.result, \"imageName\": image_name });\r\n      };\r\n\r\n\r\n      setCurrentPage(\"crop-img\");\r\n      // setShow(true)\r\n\r\n    }\r\n  };\r\n  // const onImageSelected = (selectedImg) => {\r\n  //   setImage(selectedImg.dataurl);\r\n  //   setimageName(selectedImg.imageName)\r\n  //   setCurrentPage(\"crop-img\");\r\n\r\n  // };\r\n  // console.log(\"IMAGW\"+image)\r\n  // console.log(\"setFileName---\"+imageName)\r\n\r\n  const onCropDone = (imgCroppedArea) => {\r\n    const canvasEle = document.createElement(\"canvas\");\r\n    canvasEle.width = imgCroppedArea.width;\r\n\r\n    canvasEle.height = imgCroppedArea.height;\r\n    const context = canvasEle.getContext(\"2d\");\r\n    console.log(\"context\" + context)\r\n\r\n    let imageObj1 = new Image();\r\n    imageObj1.src = image;\r\n    // console.log(\"===++++\"+image)\r\n    imageObj1.onload = function () {\r\n      context.drawImage(\r\n        imageObj1,\r\n        imgCroppedArea.x,\r\n        imgCroppedArea.y,\r\n        imgCroppedArea.width,\r\n        imgCroppedArea.height,\r\n        0,\r\n        0,\r\n        imgCroppedArea.width,\r\n        imgCroppedArea.height\r\n      );\r\n\r\n      const dataURL = canvasEle.toDataURL(\"image/jpeg\");\r\n      // console.log(\"DATAURL\"+dataURL)\r\n      //  setAddBanner(dataURL)\r\n      //  console.log(\"CHECK---\"+dataURL+\"----ee---------\"+addBanner)\r\n\r\n      // console.log(\"dataURL----------------------\"+dataURL)\r\n      setImgAfterCrop(dataURL)\r\n      setCurrentPage(\"img-cropped\");\r\n    };\r\n  };\r\n  const onCropCancel = () => {\r\n    setCurrentPage(\"choose-img\");\r\n    setImage(\"\");\r\n  };\r\n  // const ImgFormChange = (e) => {\r\n  //   setFile(e.target.files[0]);\r\n  //   setFileName(e.target.files[0].name);\r\n  // };\r\n\r\n\r\n  const handleFormChange = (e) => {\r\n    setAddBanner({ ...addBanner, [e.target.name]: e.target.value });\r\n  };\r\n  // const handleBannerChange = (e) => {\r\n  //   setImageBanner({ ...imageBanner, [e.target.name]: e.target.value });\r\n  // };\r\n  const modalClose = () => {\r\n    setBannerShow(false);\r\n    setValidated(false);\r\n\r\n  }\r\n  const handleClose = () => {\r\n    setShow(false)\r\n    // formRef.current.reset();\r\n    setAddBanner(\"\")\r\n    setValidated(false);\r\n    setBannerShow(true);\r\n    setCurrentPage(\"choose-img\");\r\n\r\n  };\r\n\r\n  const AddBanner = (e) => {\r\n\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setValidated(true);\r\n    }\r\n    if (form.checkValidity() === true) {\r\n      e.preventDefault();\r\n      encoded = imgAfterCrop\r\n      const [first, ...rest] = encoded.split(\",\");\r\n\r\n      let imgvalidation = first.split(\"/\").pop();\r\n      if (\r\n        imgvalidation === \"jpeg;base64\" ||\r\n        imgvalidation === \"jpg;base64\" ||\r\n        imgvalidation === \"png;base64\"\r\n      ) {\r\n        const productimg = rest.join(\"-\");\r\n        let imar = {\r\n          title: addBanner.title,\r\n          banner_url: addBanner.banner_url,\r\n          description: addBanner.description,\r\n          size: addBanner.size,\r\n          banner_location: addBanner.banner_location,\r\n          imgBase64: productimg,\r\n        };\r\n        axios\r\n          .post(`${process.env.REACT_APP_BASEURL_0}/add_banner`, imar, {\r\n            headers: { admin_token: `${token}` },\r\n          })\r\n          .then((response) => {\r\n            if (response.data.code === \"ER_DUP_ENTRY\") {\r\n              setError(false);\r\n            } else {\r\n              setBannerShow(false);\r\n              setapicall(true);\r\n              setAddAlert(true);\r\n            }\r\n            // let data = response.data;\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      }\r\n      else {\r\n        setValidated(false);\r\n      }\r\n    }\r\n  }\r\n  const UpdateBanner = (e) => {\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setValidated(true);\r\n    }\r\n    if (form.checkValidity() === true) {\r\n      e.preventDefault();\r\n      encoded = imgAfterCrop\r\n      const [first, ...rest] = encoded.split(\",\");\r\n\r\n      let imgvalidation = first.split(\"/\").pop();\r\n      if (\r\n        imgvalidation === \"jpeg;base64\" ||\r\n        imgvalidation === \"jpg;base64\" ||\r\n        imgvalidation === \"png;base64\"\r\n      ) {\r\n        const productimg = rest.join(\"-\");\r\n        let imar = {\r\n          title: addBanner.title,\r\n          banner_url: addBanner.banner_url,\r\n          description: addBanner.description,\r\n          size: addBanner.size,\r\n          banner_location: addBanner.banner_location,\r\n          imgBase64: productimg,\r\n          banner_id: addBanner.banner_id\r\n        };\r\n        axios\r\n          .put(`${process.env.REACT_APP_BASEURL_0}/update_banner`, imar, {\r\n            headers: { admin_token: `${token}` },\r\n          })\r\n          .then((response) => {\r\n            // let data = response.data;\r\n            setBannerShow(false);\r\n            setapicall(true);\r\n            setUpdateAlert(true);\r\n          });\r\n        formRef.current.reset();\r\n        setValidated(false);\r\n      };\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Banner Manager</h2>\r\n      {/* search bar */}\r\n      <div className=\"card p-3\">\r\n        <div className=\"product_page_uploadbox my-4\">\r\n          <button\r\n            className=\"button main_button ml-auto\"\r\n            onClick={() => handleShow(\"add\")}\r\n          >\r\n            Add Banner\r\n          </button>\r\n        </div>\r\n        <DataTable\r\n          columns={columns}\r\n          className=\"main_data_table\"\r\n          data={banner}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n        />\r\n        <SweetAlert\r\n          show={Alert}\r\n          title=\"Banner\"\r\n          text=\"Are you Sure you want to delete\"\r\n          onConfirm={hideAlert}\r\n          showCancelButton={true}\r\n          onCancel={CancelAlert}\r\n        />\r\n      </div>\r\n      <Modal size=\"lg\" show={bannershow} onHide={() => modalClose()}>\r\n        <Form\r\n          className=\"\"\r\n          noValidate\r\n          validated={validated}\r\n          ref={formRef}\r\n          onSubmit={\r\n            bannershow === \"add\" ? (e) => AddBanner(e) : (e) => UpdateBanner(e)\r\n          }\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              {bannershow === \"add\" ? \"Add New Banner \" : \" Update Banner \"}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          {error === false ? (\r\n            <p\r\n              className=\"mt-2 ms-2 text-danger text-center fs-6\"\r\n              type=\"invalid\"\r\n            >\r\n              Already Added!!!\r\n            </p>\r\n          ) : null}\r\n          <Modal.Body>\r\n            <div className=\"row p-3 m-0\">\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom01\"\r\n                >\r\n                  <Form.Label>Title</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    value={addBanner.title}\r\n                    type=\"text\"\r\n                    placeholder=\"Add Title\"\r\n                    name={\"title\"}\r\n                    onChange={(e) => handleFormChange(e)}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill title\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom01\"\r\n                >\r\n                  <Form.Label>Banner_url</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    value={addBanner.banner_url}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter url\"\r\n                    name={\"banner_url\"}\r\n                    onChange={(e) => handleFormChange(e)}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill this field\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom01\"\r\n                >\r\n                  <Form.Label>Size</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    value={addBanner.size}\r\n                    type=\"text\"\r\n                    placeholder=\"Add Size\"\r\n                    name={\"size\"}\r\n                    onChange={(e) => handleFormChange(e)}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill Size\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <Form.Label>Banner_location</Form.Label>\r\n                {bannershow === \"add\" ? (\r\n                  <>\r\n                    <Form.Select\r\n                      aria-label=\"Search by location\"\r\n                      className=\"mb-3 aos_input\"\r\n                      controlId=\"validationCustom01\"\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      placeholder=\"Add banner_location\"\r\n                      name={\"banner_location\"}\r\n                    >\r\n                      <option>Select location</option>\r\n\r\n                      <option value=\"home_page_left_side\">\r\n                        home_page_left_side\r\n                      </option>\r\n                      <option value=\"home_page_left_side(1)\">\r\n                        home_page_left_side(1)\r\n                      </option>\r\n                      <option value=\"home_page_right_side(1)\">\r\n                        home_page_right_side(1)\r\n                      </option>\r\n                      <option value=\"home_page_right_side(2)\">\r\n                        home_page_right_side(2)\r\n                      </option>\r\n                    </Form.Select>\r\n\r\n                    {addBanner.banner_location === \"home_page_left_side\" ? (\r\n                      <p\r\n                        className=\"mt-2 ms-2 text-danger text-center fs-6\"\r\n                        type=\"invalid\"\r\n                      >\r\n                        Select Image This (2/3)\r\n                      </p>\r\n                    ) : addBanner.banner_location ===\r\n                      \"home_page_left_side(1)\" ? (\r\n                      <p\r\n                        className=\"mt-2 ms-2 text-danger text-center fs-6\"\r\n                        type=\"invalid\"\r\n                      >\r\n                        Select Image This (1/2)\r\n                      </p>\r\n                    ) : addBanner.banner_location ===\r\n                      \"home_page_right_side(1)\" ? (\r\n                      <p\r\n                        className=\"mt-2 ms-2 text-danger text-center fs-6\"\r\n                        type=\"invalid\"\r\n                      >\r\n                        Select Image This (1/1)\r\n                      </p>\r\n                    ) : addBanner.banner_location ===\r\n                      \"home_page_right_side(2)\" ? (\r\n                      <p\r\n                        className=\"mt-2 ms-2 text-danger text-center fs-6\"\r\n                        type=\"invalid\"\r\n                      >\r\n                        Select Image This(1/1)\r\n                      </p>\r\n                    ) : null}\r\n                  </>\r\n                ) : (\r\n                  <Form.Select\r\n                    aria-label=\"Search by location\"\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"validationCustom01\"\r\n                    placeholder=\"Add banner_location\"\r\n                    name={\"banner_location\"}\r\n                  >\r\n                    <option>Select location</option>\r\n\r\n                    <option disabled value=\"home_page_left_side\">\r\n                      home_page_left_side\r\n                    </option>\r\n                    <option disabled value=\"home_page_left_side(1)\">\r\n                      home_page_left_side(1)\r\n                    </option>\r\n                    <option disabled value=\"home_page_right_side(1)\">\r\n                      home_page_right_side(1)\r\n                    </option>\r\n                    <option disabled value=\"home_page_right_side(2)\">\r\n                      home_page_right_side(2)\r\n                    </option>\r\n                  </Form.Select>\r\n                )}\r\n              </div>\r\n\r\n              {/* <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom08\"\r\n                >\r\n                  <Form.Label>Blog Image</Form.Label>\r\n                  <Form.Control\r\n                    onChange={(e) => ImgFormChange(e)}\r\n                    type=\"file\"\r\n                    placeholder=\"Shop_logo\"\r\n                    name={\"image\"}\r\n                  />\r\n                  {addBanner.image ? (\r\n                    <img src={Newlogo} alt=\"newimg\" width={\"50px\"} />\r\n                  ) : null}\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please upload image\r\n                  </Form.Control.Feedback>\r\n                </Form.Group> */}\r\n              <div className=\"col-md-4\">\r\n\r\n                {currentPage === \"choose-img\" ? (\r\n\r\n                  <FileInput setImage={setImage} onImageSelected={onImageSelected} setimageName={setimageName} />\r\n                ) : currentPage === \"crop-img\" ? (\r\n                  <div className=\"container-fluid\">\r\n                    <ImageCropper\r\n                      handleClose={handleClose}\r\n                      image={image}\r\n                      imageNamee={imageName}\r\n                      modalShow={true}\r\n                      onCropDone={(imgCroppedArea) => onCropDone(imgCroppedArea)} onCropCancel={onCropCancel}\r\n                    />\r\n\r\n                  </div>\r\n\r\n                ) : (\r\n                  //   <div>\r\n                  //      <div>\r\n                  //   <FileInput setImage={setImage} onImageSelected={onImageSelected} setimageName={setimageName} />\r\n                  // </div>\r\n                  //   </div>\r\n\r\n                  <div>\r\n                    <div>\r\n                      <div>\r\n                        <img className=\"cropped-img w-50 h-50\"\r\n                          src={imgAfterCrop}\r\n\r\n                          // key={i}\r\n                          alt=\"\"\r\n                        // height={120}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    {/* { <FileInput setImage={setImage} onImageSelected={onImageSelected} setimageName={setimageName} />  === <ImageCropper/>  ? (\r\n           <FileInput setImage={setImage} onImageSelected={onImageSelected} setimageName={setimageName} />): */}\r\n                    <>\r\n                      <button\r\n                        onClick={() => {\r\n                          setCurrentPage(\"crop-img\");\r\n                        }}\r\n                        className=\"btn\"\r\n                      >\r\n                        Crop\r\n                      </button>\r\n\r\n                      <button\r\n                        onClick={() => {\r\n                          setCurrentPage(\"choose-img\");\r\n                          setImage(\"\");\r\n                        }}\r\n                        className=\"btn\"\r\n                      >\r\n                        New Image\r\n                      </button>\r\n                    </>\r\n\r\n                    {/* } */}\r\n                  </div>\r\n\r\n                )}\r\n              </div>\r\n              {/* <div className=\"col-md-4\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom08\"\r\n                >\r\n                  <Form.Label>Blog Image</Form.Label>\r\n                 \r\n                  {/* <Form.Control\r\n                    onChange={(e) => ImgFormChange(e)}\r\n                    type=\"file\"\r\n                    placeholder=\"Shop_logo\"\r\n                    name={\"image\"}\r\n                  /> \r\n                  {addBanner.image ? (\r\n                    <img src={Newlogo} alt=\"newimg\" width={\"50px\"} />\r\n                  ) : null}\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please upload image\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div> */}\r\n\r\n              <div className=\"col-md-12\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom05\"\r\n                >\r\n                  <Form.Label>Description</Form.Label>\r\n                  <Form.Control\r\n                    className=\"vendor_address\"\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    placeholder=\"write here...\"\r\n                    name={\"description\"}\r\n                    required\r\n                    value={addBanner.description}\r\n                    onChange={(e) => handleFormChange(e)}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill description\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <button\r\n              type=\"button\"\r\n              className=\"button main_outline_button\"\r\n              onClick={() => modalClose()}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <Iconbutton\r\n              type={\"submit\"}\r\n              btntext={bannershow === \"add\" ? \"Add Banner\" : \"Update Banner\"}\r\n              btnclass={\"button main_button \"}\r\n            />\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <SweetAlert\r\n        show={AddAlert}\r\n        title=\"Added Banner Successfully \"\r\n        onConfirm={closeAddAlert}\r\n      />\r\n      <SweetAlert\r\n        show={UpdateAlert}\r\n        title=\"Updated Banner Successfully \"\r\n        onConfirm={closeUpdateAlert}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default Banner;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\home_manager.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\content_manager.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\add_update_admin\\add_update_admin.js",["478"],[],"import React, { useState, useRef } from \"react\";\r\nimport { AiOutlinePlus } from \"react-icons/ai\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\nimport SAlert from \"../common/salert\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport MainButton from \"../common/button\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\n\r\nfunction Admin() {\r\n  const token = localStorage.getItem(\"token\");\r\n  const [apicall, setapicall] = useState(false);\r\n  const [show, setShow] = useState(\"\");\r\n  const [validated, setValidated] = useState(false);\r\n  const [searchvalidated, setsearchValidated] = useState(false);\r\n  console.log(searchvalidated)\r\n  const [addadmindata, setaddadmindata] = useState([]);\r\n  const [admindata, setadmindata] = useState([]);\r\n  const [searchAdmin, setSearchAdmin] = useState([]);\r\n  console.log(searchAdmin)\r\n\r\n  const [AddAlert, setAddAlert] = useState(false);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  const [Searchad, setSearchAd] = useState({\r\n    admin_name: \"\",\r\n    admin_type: \"\",\r\n    admin_password: \"\",\r\n  });\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n  const closeAddAlert = () => {\r\n    setAddAlert(false);\r\n  };\r\n\r\n  const closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    formRef.current.reset();\r\n\r\n    setaddadmindata(\"\");\r\n    setValidated(false);\r\n    setShow(false);\r\n  };\r\n\r\n  const handleShow = (e) => {\r\n    if (e === \"add\") {\r\n      setShow(e);\r\n    }\r\n    if (e !== \"add\") {\r\n      try {\r\n        axios\r\n          .get(`${process.env.REACT_APP_BASEURL}/admin?id=${e}`, {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            let data = response.data[0];\r\n            setaddadmindata(data);\r\n            localStorage.setItem(\"adminid\", response.data.id);\r\n          });\r\n      } catch (err) { }\r\n    }\r\n    setShow(e);\r\n  };\r\n\r\n  const formRef = useRef();\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Id\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Name\",\r\n      selector: (row) => row.admin_name,\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Email\",\r\n      center: true,\r\n      selector: (row) => row.admin_email,\r\n    },\r\n    {\r\n      name: \"Mobile\",\r\n      selector: (row) => row.admin_phone,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Admin Type\",\r\n      selector: (row) =>\r\n        row.admin_type === \"1\"\r\n          ? \"Super Admin\"\r\n          : row.admin_type === \"2\"\r\n            ? \"Admin\"\r\n            : row.admin_type === \"3\"\r\n              ? \"Editor\"\r\n              : null,\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"120px\",\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  useEffect(() => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/admin_search`,\r\n        {\r\n          admin_name: `${Searchad.admin_name}`,\r\n          admin_type: `${Searchad.admin_type}`,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setadmindata(response.data);\r\n        setSearchAdmin(response.data);\r\n        setsearchValidated(false);\r\n        setapicall(false);\r\n      });\r\n  }, [apicall]);\r\n  const handleFormChange = (e) => {\r\n    setaddadmindata({ ...addadmindata, [e.target.name]: e.target.value });\r\n    setPasswordError(\"\");\r\n  };\r\n  const onValueChange = (e) => {\r\n    setSearchAd({ ...Searchad, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const SearchAdmin = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/admin_search`,\r\n        {\r\n          admin_name: `${Searchad.admin_name}`,\r\n          admin_type: `${Searchad.admin_type}`,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setadmindata(response.data);\r\n        setSearchAd(\"\");\r\n        setsearchValidated(false);\r\n      });\r\n  };\r\n  const AddAdminClick = (e) => {\r\n    // const form = e.currentTarget;\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    // if (form.checkValidity() === false) {\r\n    // e.preventDefault();\r\n    // e.stopPropagation();\r\n    //   setValidated(true);\r\n    //   setapicall(true);\r\n    // }\r\n    if (addadmindata.admin_password.trim() === \"\") {\r\n      setPasswordError(\"Password is required\");\r\n    } else if (\r\n      !/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/.test(\r\n        addadmindata.admin_password\r\n      )\r\n    ) {\r\n      setPasswordError(\r\n        \"Password must contain digit, one uppercase letter, one special character, no space, and it must be 8-16 characters long\"\r\n      );\r\n    } else {\r\n      e.preventDefault();\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL}/add_admin`,\r\n          {\r\n            admin_email: `${addadmindata.admin_email}`,\r\n            admin_name: `${addadmindata.admin_name}`,\r\n            admin_phone: `${addadmindata.admin_phone}`,\r\n            admin_type: `${addadmindata.admin_type}`,\r\n            admin_password: `${addadmindata.admin_password}`,\r\n          },\r\n          {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setAddAlert(true);\r\n          setPasswordError(\"\");\r\n        })\r\n        .catch(function (error) { });\r\n\r\n      formRef.current.reset();\r\n      setValidated(false);\r\n      setapicall(true);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const UpdateAdminClick = (e, show) => {\r\n    e.preventDefault();\r\n    if (addadmindata.admin_password.trim() === \"\") {\r\n      setPasswordError(\"Password is required\");\r\n    } else if (\r\n      !/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W)(?!.* ).{8,16}$/.test(\r\n        addadmindata.admin_password\r\n      )\r\n    ) {\r\n      setPasswordError(\r\n        \"Password must contain digit, one uppercase letter, one special character, no space, and it must be 8-16 characters long\"\r\n      );\r\n    } else {\r\n      axios\r\n        .put(`${process.env.REACT_APP_BASEURL}/update_admin`, addadmindata)\r\n        .then(\r\n          (response) => {\r\n            setUpdateAlert(true);\r\n          },\r\n          {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          }\r\n        )\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      formRef.current.reset();\r\n      setValidated(false);\r\n      setaddadmindata(\"\");\r\n      setShow(\"\");\r\n      setapicall(true);\r\n      // show.preventDefault();\r\n    }\r\n  };\r\n  const OnReset = () => {\r\n    setSearchAd({\r\n      admin_name: \"\",\r\n      admin_type: \"\",\r\n\r\n    });\r\n    setapicall(true);\r\n    // setsearcherror(false);\r\n  };\r\n  return (\r\n    <div className=\"App productlist_maindiv\">\r\n      <></>\r\n      <h2>Admin</h2>\r\n      {/* {search} */}\r\n      <div className=\" row\">\r\n        <div className=\"col-md-3 col-sm-6 aos_input\">\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            className=\"adminsideinput\"\r\n            placeholder={\"Search by admin name\"}\r\n            value={Searchad.admin_name}\r\n            name={\"admin_name\"}\r\n            onChange={(e) => onValueChange(e)}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 col-sm-6 aos_input\">\r\n          <Form.Select\r\n            aria-label=\"Search by status\"\r\n            className=\"adminselectbox\"\r\n            name=\"admin_type\"\r\n            onChange={(e) => onValueChange(e)}\r\n            value={Searchad.admin_type}\r\n          >\r\n            <option>Search by admin type</option>\r\n            <option value=\"1\">Super Admin</option>\r\n            <option value=\"2\">Admin</option>\r\n            <option value=\"3\">Editor</option>\r\n          </Form.Select>\r\n        </div>\r\n        <div className=\"col-md-3 col-sm-6 aos_input\">\r\n          <MainButton\r\n            btntext={\"Search\"}\r\n            btnclass={\"button main_button w-100\"}\r\n            onClick={SearchAdmin}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 col-sm-6 aos_input mb-2 \">\r\n          <MainButton\r\n            btntext={\"Reset\"}\r\n            btnclass={\"button main_button w-100\"}\r\n            type=\"reset\"\r\n            onClick={OnReset}\r\n          />\r\n        </div>\r\n      </div>\r\n      {/* upload */}\r\n\r\n      <div className=\"product_page_uploadbox my-4\">\r\n        <Iconbutton\r\n          btntext={\"Add Admin\"}\r\n          onClick={() => handleShow(\"add\")}\r\n          Iconname={<AiOutlinePlus />}\r\n          btnclass={\"button main_button adminmainbutton\"}\r\n        />\r\n      </div>\r\n\r\n      {/* datatable */}\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={() => handleClose()}\r\n        dialogClassName=\"w-80\"\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n        centered\r\n      >\r\n        <Form\r\n          className=\"\"\r\n          novalidate\r\n          validated={validated}\r\n          ref={formRef}\r\n          onSubmit={\r\n            show === \"add\"\r\n              ? (e) => AddAdminClick(e)\r\n              : (show) => UpdateAdminClick(show)\r\n          }\r\n        >\r\n          <Modal.Header closeButton className=\"\">\r\n            <Modal.Title id=\"example-custom-modal-styling-title\">\r\n              {show === \"add\" ? \"Add Admin \" : \" Update Admin \"}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body className=\"p-3\">\r\n            <div className=\"d-flex justify-content-center align-items-center p-0 m-0\">\r\n              <div className=\"\">\r\n                <div className=\"\">\r\n                  <div className=\"row px-3\">\r\n                    <div className=\"col-12\">\r\n                      <Form.Group\r\n                        className=\"mb-3\"\r\n                        controlId=\"formPlaintextName\"\r\n                      >\r\n                        <Form.Label className=\"\" column sm=\"12\">\r\n                          Name\r\n                        </Form.Label>\r\n\r\n                        <Form.Control\r\n                          type=\"text\"\r\n                          placeholder=\"Name\"\r\n                          onChange={(e) => handleFormChange(e)}\r\n                          value={addadmindata.admin_name}\r\n                          name={\"admin_name\"}\r\n                          required\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please fill name\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <Form.Group\r\n                        className=\"mb-3\"\r\n                        controlId=\"formPlaintextEmail\"\r\n                      >\r\n                        <Form.Label className=\"\" column sm=\"12\">\r\n                          Email\r\n                        </Form.Label>\r\n\r\n                        <Form.Control\r\n                          type=\"email\"\r\n                          placeholder=\"Email\"\r\n                          onChange={(e) => handleFormChange(e)}\r\n                          value={addadmindata.admin_email}\r\n                          name={\"admin_email\"}\r\n                          required\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please fill email\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <Form.Group\r\n                        className=\"mb-3\"\r\n                        controlId=\"formPlaintextMobile\"\r\n                      >\r\n                        <Form.Label className=\"\" column sm=\"12\">\r\n                          Mobile\r\n                        </Form.Label>\r\n\r\n                        <Form.Control\r\n                          type=\"number\"\r\n                          placeholder=\"Mobile Number\"\r\n                          min={1}\r\n                          onChange={(e) => handleFormChange(e)}\r\n                          value={addadmindata.admin_phone}\r\n                          name={\"admin_phone\"}\r\n                          required\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please fill mobile number\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <Form.Group\r\n                        className=\"mb-3\"\r\n                        controlId=\"formPlaintextPassword\"\r\n                      >\r\n                        <Form.Label className=\"\" column sm=\"12\">\r\n                          Password\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                          type=\"password\"\r\n                          placeholder=\"Password\"\r\n                          onChange={(e) => handleFormChange(e)}\r\n                          value={addadmindata.admin_password}\r\n                          name={\"admin_password\"}\r\n                          required\r\n                        />{\" \"}\r\n                        <small className=\"text-danger\">{passwordError}</small>\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please fill password\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <Form.Group\r\n                        className=\"mb-3\"\r\n                        controlId=\"formPlaintextAdminType\"\r\n                      >\r\n                        <Form.Label className=\"\" column sm=\"12\">\r\n                          Admin Type\r\n                        </Form.Label>\r\n\r\n                        <Form.Select\r\n                          aria-label=\"Default select example\"\r\n                          onChange={(e) => handleFormChange(e)}\r\n                          value={addadmindata.admin_type}\r\n                          name={\"admin_type\"}\r\n                          required\r\n                        >\r\n                          <option value=\"\">Select</option>\r\n                          <option value=\"1\">Super Admin</option>\r\n                          <option value=\"2\">Admin</option>\r\n                          <option value=\"3\">Editor</option>\r\n                        </Form.Select>\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please fill admin type\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer className=\"\">\r\n            <button\r\n              className=\"button main_outline_button\"\r\n              onClick={() => handleClose()}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <Iconbutton\r\n              type={\"submit\"}\r\n              btntext={show === \"add\" ? \"Add Admin\" : \"Update Admin\"}\r\n              btnclass={\"button main_button \"}\r\n            />\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <DataTable\r\n        columns={columns}\r\n        data={admindata}\r\n        pagination\r\n        highlightOnHover\r\n        pointerOnHover\r\n        className={\"table_body add_update_admin_table\"}\r\n      />\r\n      <SAlert\r\n        show={AddAlert}\r\n        title=\"Added Admin Successfully \"\r\n        onConfirm={closeAddAlert}\r\n      />\r\n      <SAlert\r\n        show={UpdateAlert}\r\n        title=\"Updated Admin Successfully \"\r\n        onConfirm={closeUpdateAlert}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Admin;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\coupon\\coupon.js",["479","480"],[],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { AiOutlinePlus } from \"react-icons/ai\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport SAlert from \"../common/salert\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nconst Coupon = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const formRef = useRef();\r\n  const [validated, setValidated] = useState(false);\r\n  const [searcherror, setsearcherror] = useState(false);\r\n  const [coupondata, setcoupondata] = useState([]);\r\n\r\n\r\n  const [addcoupondata, setaddcoupondata] = useState({\r\n    campaign_name: \"\",\r\n    code: \"\",\r\n    product_type: \"\",\r\n    start_date: \"\",\r\n    end_date: \"\",\r\n    minimum_amount: \"\",\r\n    percentage: \"\",\r\n    status: \"\",\r\n    image: \"\",\r\n  });\r\n\r\n  const [file, setFile] = useState();\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const [Alert, setAlert] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [dltapicall, setDltapicall] = useState(false);\r\n  const [cid, setCId] = useState(false);\r\n  const [AddAlert, setAddAlert] = useState(false);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  const [searchcoupon, setsearchCoupon] = useState([]);\r\n  console.log(searchcoupon)\r\n  const [SearchCoup, setSearchCoup] = useState({\r\n    campaign_name: \"\",\r\n    code: \"\",\r\n    status: \"\",\r\n  });\r\n\r\n  const handleAlert = (id) => {\r\n    setAlert(true);\r\n    setCId(id);\r\n  };\r\n  const closeAddAlert = () => {\r\n    setAddAlert(false);\r\n    setDltapicall(false)\r\n  };\r\n\r\n  const closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n\r\n  const hideAlert = () => {\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL}/coupons_delete`,\r\n        {\r\n          id: `${cid}`,\r\n          is_active: \"0\",\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setapicall(true);\r\n        setAlert(false);\r\n      });\r\n  };\r\n  const CancelAlert = () => {\r\n    setAlert(false);\r\n  };\r\n  const handleClose = () => {\r\n    formRef.current.reset();\r\n    // coupondata(\"\")\r\n    setValidated(false);\r\n    setShow(false);\r\n  };\r\n\r\n  const handleShow = (e) => {\r\n    if (e === \"add\") {\r\n      setShow(e);\r\n    }\r\n    if (e !== \"add\") {\r\n      try {\r\n        axios\r\n          .get(`${process.env.REACT_APP_BASEURL}/coupon?coupon_id=${e}`)\r\n          .then((response) => {\r\n            let data = response.data[0];\r\n            setaddcoupondata(data);\r\n          });\r\n      } catch (err) { }\r\n      setShow(e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    function getCouponList() {\r\n      try {\r\n        axios\r\n          .get(`${process.env.REACT_APP_BASEURL}/coupon?coupon_id=all`, {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            let data = response.data.filter((item) => item.is_active === 1);\r\n            setcoupondata(data);\r\n\r\n            setaddcoupondata(data);\r\n            setsearchCoupon(data);\r\n            setapicall(false);\r\n          });\r\n      } catch (err) { }\r\n    }\r\n\r\n    getCouponList();\r\n  }, [apicall, dltapicall]);\r\n\r\n  const columns = [\r\n    {\r\n      name: \"ID\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n      width: \"80px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: 0,\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Campaign Name\",\r\n      selector: (row) => row.campaign_name,\r\n      sortable: true,\r\n      width: \"180px\",\r\n    },\r\n    {\r\n      name: \"Code\",\r\n      selector: (row) => row.code,\r\n      sortable: true,\r\n      width: \"130px\",\r\n    },\r\n    {\r\n      name: \"Product Type\",\r\n      selector: (row) => row.product_type,\r\n      sortable: true,\r\n      width: \"140px\",\r\n    },\r\n    {\r\n      name: \"Start Date\",\r\n      selector: (row) => moment(row.start_date).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n      width: \"120px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"End Date\",\r\n      selector: (row) => moment(row.end_date).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n      width: \"120px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Mini Amt\",\r\n      selector: (row) => row.minimum_amount,\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Percentage\",\r\n      selector: (row) => row.percentage,\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <Badge\r\n          bg={\r\n            row.status === \"active\"\r\n              ? \"success\"\r\n              : row.status === \"expired\"\r\n                ? \"danger\"\r\n                : row.status === \"pending\"\r\n                  ? \"warning\"\r\n                  : null\r\n          }\r\n        >\r\n          {row.status}\r\n        </Badge>\r\n      ),\r\n      sortable: true,\r\n      width: \"105px\",\r\n      // center: true,\r\n    },\r\n\r\n    {\r\n      name: \"Image\",\r\n      width: \"100px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <img\r\n          alt={\"apna_organic\"}\r\n          src={\r\n            row.image === \"no image\"\r\n              ? \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png\"\r\n              : row.image\r\n          }\r\n          style={{\r\n            padding: 10,\r\n            textAlign: \"right\",\r\n            maxHeight: \"100px\",\r\n            maxWidth: \"100px\",\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"100px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.id)}\r\n          />\r\n          <BsTrash\r\n            className=\" p-0 m-0 editiconn text-danger\"\r\n            onClick={handleAlert.bind(this, row.id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  const CouponSearch = (e) => {\r\n    setSearchCoup({ ...SearchCoup, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n\r\n  const CoupondataSearch = () => {\r\n    if (\r\n      SearchCoup.campaign_name === \"\" &&\r\n      SearchCoup.code === \"\" &&\r\n      SearchCoup.status === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      axios\r\n        .post(`${process.env.REACT_APP_BASEURL}/coupons_list`, {\r\n          campaign_name: `${SearchCoup.campaign_name}`,\r\n          code: `${SearchCoup.code}`,\r\n          status: `${SearchCoup.status}`,\r\n        })\r\n        .then((response) => {\r\n          let data = response.data.filter((item) => (item.is_active = 1));\r\n          setcoupondata(data);\r\n          // setSearchCoup({\r\n          //   campaign_name: \"\",\r\n          //   code: \"\",\r\n          //   status: \"\",\r\n          // });\r\n          setsearcherror(false);\r\n        });\r\n    }\r\n  };\r\n  /*onclick funtion to Reset the search feild */\r\n  const CoupondataSearchReset = () => {\r\n    setSearchCoup({\r\n      campaign_name: \"\",\r\n      code: \"\",\r\n      status: \"\",\r\n    });\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n  useEffect(() => {\r\n    setcoupondata(coupondata);\r\n  }, []);\r\n  const handleFormChange = (e) => {\r\n    setaddcoupondata({\r\n      ...addcoupondata,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const ImgFormChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n    setFileName(e.target.files[0].name);\r\n  };\r\n\r\n  const AddCouponClick = (e) => {\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setValidated(true);\r\n    } else {\r\n      const formData = new FormData();\r\n      formData.append(\"filename\", fileName);\r\n      formData.append(\"campaign_name\", addcoupondata.campaign_name);\r\n      formData.append(\"code\", addcoupondata.code);\r\n      formData.append(\"product_type\", addcoupondata.product_type);\r\n      formData.append(\r\n        \"start_date\",\r\n        moment(addcoupondata.start_date).format(\"YYYY-MM-DDThh:mm:00.000\")\r\n      );\r\n      formData.append(\r\n        \"end_date\",\r\n        moment(addcoupondata.end_date).format(\"YYYY-MM-DDThh:mm:00.000\")\r\n      );\r\n      formData.append(\"minimum_amount\", addcoupondata.minimum_amount);\r\n      formData.append(\"percentage\", addcoupondata.percentage);\r\n      formData.append(\"status\", addcoupondata.status);\r\n      formData.append(\"image\", file);\r\n      axios\r\n        .post(`${process.env.REACT_APP_BASEURL_0}/coupons_add`, formData, {\r\n          headers: { admin_token: `${token}` }\r\n        })\r\n        .then((response) => {\r\n          setapicall(true);\r\n          setShow(false);\r\n          setAddAlert(true);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      formRef.current.reset();\r\n      setValidated(false);\r\n      e.preventDefault();\r\n      formRef.current.reset();\r\n    }\r\n  };\r\n\r\n  const UpdateCouponClick = (e) => {\r\n    const formData = new FormData();\r\n    formData.append(\"filename\", fileName);\r\n    formData.append(\"id\", e);\r\n    formData.append(\"campaign_name\", addcoupondata.campaign_name);\r\n    formData.append(\"code\", addcoupondata.code);\r\n    formData.append(\"product_type\", addcoupondata.product_type);\r\n    formData.append(\r\n      \"start_date\",\r\n      moment(addcoupondata.start_date).format(\"YYYY-MM-DDThh:mm:00.000\")\r\n    );\r\n    formData.append(\r\n      \"end_date\",\r\n      moment(addcoupondata.end_date).format(\"YYYY-MM-DDThh:mm:00.000\")\r\n    );\r\n    formData.append(\"minimum_amount\", addcoupondata.minimum_amount);\r\n    formData.append(\"percentage\", addcoupondata.percentage);\r\n    formData.append(\"status\", addcoupondata.status);\r\n    formData.append(\"image\", file);\r\n\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL_0}/coupon_update`, formData, {\r\n        headers: { admin_token: `${token}` }\r\n      })\r\n      .then((response) => {\r\n        setapicall(true);\r\n        setUpdateAlert(true);\r\n      },\r\n      )\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    formRef.current.reset();\r\n    setValidated(false);\r\n    setaddcoupondata(\"\");\r\n    setShow(\"\");\r\n  };\r\n\r\n  let date = moment();\r\n  let currentDate = date.format(\"YYYY-MM-DD\");\r\n  return (\r\n    <div>\r\n      <h2>Coupons</h2>\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\" row\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <input\r\n              type={\"text\"}\r\n              name={\"campaign_name\"}\r\n              className=\"form-control\"\r\n              onChange={(e) => CouponSearch(e)}\r\n              placeholder={\"Search by campaign name\"}\r\n              value={SearchCoup.campaign_name}\r\n            />\r\n            {searcherror === true ? (\r\n              <small className=\"text-danger\">please fill the feild</small>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <input\r\n              type={\"text\"}\r\n              name={\"code\"}\r\n              className=\"form-control\"\r\n              onChange={(e) => CouponSearch(e)}\r\n              placeholder={\"Search by code name\"}\r\n              value={SearchCoup.code}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by category\"\r\n              name={\"status\"}\r\n              onChange={(e) => CouponSearch(e)}\r\n              value={SearchCoup.status}\r\n              className=\"adminselectbox\"\r\n            >\r\n              <option value={\"\"}>Status</option>\r\n              <option value=\"active\">Active</option>\r\n              <option value=\"expired\">Expired</option>\r\n              <option value=\"pending\">Pending</option>\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button w-100\"}\r\n              onClick={CoupondataSearch}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input mt-2\">\r\n            <MainButton\r\n              btntext={\"Reset\"}\r\n              btnclass={\"button main_button w-100\"}\r\n              onClick={CoupondataSearchReset}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* upload */}\r\n\r\n        <div className=\"product_page_uploadbox my-4\">\r\n          <Iconbutton\r\n            btntext={\"Add Coupons\"}\r\n            onClick={() => handleShow(\"add\")}\r\n            Iconname={<AiOutlinePlus />}\r\n            btnclass={\"button main_button adminmainbutton\"}\r\n          />\r\n        </div>\r\n\r\n        {/* datatable */}\r\n        <Modal\r\n          show={show}\r\n          onHide={() => handleClose()}\r\n          dialogClassName=\"addproductmainmodal\"\r\n          aria-labelledby=\"example-custom-modal-styling-title\"\r\n          centered\r\n        >\r\n          <Form\r\n            className=\"\"\r\n            validated={validated}\r\n            ref={formRef}\r\n            onSubmit={\r\n              show === \"add\"\r\n                ? (e) => AddCouponClick(e)\r\n                : (show) => UpdateCouponClick(show)\r\n            }\r\n          >\r\n            <Modal.Header closeButton className=\"addproductheader\">\r\n              <Modal.Title id=\"example-custom-modal-styling-title\">\r\n                {show === \"add\" ? \"Add Coupons\" : \" Update Coupons\"}\r\n              </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"addproductbody p-2\">\r\n              <div className=\"row p-3 m-0\">\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicNamel\"\r\n                  >\r\n                    <Form.Label>Campaign Name</Form.Label>\r\n                    <Form.Control\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      name=\"campaign_name\"\r\n                      value={addcoupondata.campaign_name}\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"campaign_name\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                      Please fill name\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicCategoryType\"\r\n                  >\r\n                    <Form.Label>Category Type</Form.Label>\r\n                    <Form.Select\r\n                      aria-label=\"Search by category type\"\r\n                      required\r\n                      className=\"adminselectbox\"\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      name={\"product_type\"}\r\n                      value={addcoupondata.product_type}\r\n                    >\r\n                      <option value={\"\"}>Search by category type</option>\r\n                      <option value=\"Grocery\">Grocery</option>\r\n                      <option value=\"Health\">Health</option>\r\n                      <option value=\"Sports & Accessor\">\r\n                        Sports & Accessor\r\n                      </option>\r\n                    </Form.Select>\r\n                    <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                      Please fill category type\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicCode\"\r\n                  >\r\n                    <Form.Label>Coupon Code</Form.Label>\r\n                    <Form.Control\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      name=\"code\"\r\n                      value={addcoupondata.code}\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"Coupon Code\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                      Please fill coupon code\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicAmount\"\r\n                  >\r\n                    <Form.Label>Minimum Amount</Form.Label>\r\n                    <Form.Control\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      name=\"minimum_amount\"\r\n                      value={addcoupondata.minimum_amount}\r\n                      required\r\n                      type=\"number\"\r\n                      placeholder=\"Minimum Amount Required\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                      Please fill minimum amount\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicPercent\"\r\n                  >\r\n                    <Form.Label>Discount Percentage</Form.Label>\r\n                    <Form.Control\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      name=\"percentage\"\r\n                      value={addcoupondata.percentage}\r\n                      required\r\n                      type=\"number\"\r\n                      placeholder=\"Discount Percentage\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                      Please fill percentage\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicPercent\"\r\n                  >\r\n                    <Form.Label>Status</Form.Label>\r\n                    <Form.Select\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      name=\"status\"\r\n                      value={addcoupondata.status}\r\n                    >\r\n                      <option value={\"\"}>Status</option>\r\n                      <option value=\"active\">Active</option>\r\n                      <option value=\"expired\">Expired</option>\r\n                      <option value=\"pending\">Pending</option>\r\n                    </Form.Select>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicStartDate\"\r\n                  >\r\n                    <Form.Label>Coupon Start Date</Form.Label>\r\n                    <Form.Control\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      name=\"start_date\"\r\n                      min={currentDate}\r\n                      value={moment(addcoupondata.start_date).format(\r\n                        \"YYYY-MM-DD\"\r\n                      )}\r\n                      required\r\n                      type=\"date\"\r\n                      placeholder=\"Coupon Start Date\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                      Please fill start date\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </div>{\" \"}\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicEndDate\"\r\n                  >\r\n                    <Form.Label>Coupon End Date</Form.Label>\r\n                    <Form.Control\r\n                      onChange={(e) => handleFormChange(e)}\r\n                      name=\"end_date\"\r\n                      min={moment(addcoupondata.start_date).format(\r\n                        \"YYYY-MM-DD\"\r\n                      )}\r\n                      value={moment(addcoupondata.end_date).format(\r\n                        \"YYYY-MM-DD\"\r\n                      )}\r\n                      required\r\n                      type=\"date\"\r\n                      placeholder=\"Coupon End Date\"\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                      Please fill end date\r\n                    </Form.Control.Feedback>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input\"\r\n                    controlId=\"formBasicEmail\"\r\n                  >\r\n                    <Form.Label>Coupon Image</Form.Label>\r\n                    <Form.Control\r\n                      type=\"file\"\r\n                      placeholder=\"Coupon Image\"\r\n                      onChange={(e) => ImgFormChange(e)}\r\n                      name=\"image\"\r\n                    />\r\n                    {addcoupondata.image ? (\r\n                      <img src={addcoupondata.image} alt=\"\" width={\"90px\"} />\r\n                    ) : null}\r\n                  </Form.Group>\r\n                </div>\r\n              </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"addproductfooter\">\r\n              <Iconbutton\r\n                btntext={\"Cancel\"}\r\n                onClick={() => handleClose()}\r\n                btnclass={\"button main_outline_button adminmainbutton px-2\"}\r\n              />\r\n              <Iconbutton\r\n                type={\"submit\"}\r\n                btntext={show === \"add\" ? \"Add Coupons\" : \"Update Coupons\"}\r\n                onClick={\r\n                  show === \"add\"\r\n                    ? AddCouponClick\r\n                    : () => UpdateCouponClick(show)\r\n                }\r\n                btnclass={\"button main_button \"}\r\n              />\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal>\r\n        <DataTable\r\n          columns={columns}\r\n          data={coupondata}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body coupon_table\"}\r\n        />\r\n        <SAlert\r\n          show={Alert}\r\n          title=\"Coupoan\"\r\n          text=\"Are you Sure you want to delete\"\r\n          onConfirm={hideAlert}\r\n          showCancelButton={true}\r\n          onCancel={CancelAlert}\r\n        />\r\n        <SAlert\r\n          show={AddAlert}\r\n          title=\"Added Coupon Successfully \"\r\n          onConfirm={closeAddAlert}\r\n        />\r\n        <SAlert\r\n          show={UpdateAlert}\r\n          title=\"Updated Coupan Successfully \"\r\n          onConfirm={closeUpdateAlert}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Coupon;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\complaint\\complaint.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\review\\review.js",["481"],[],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport SAlert from \"../common/salert\";\r\n\r\nconst Review = () => {\r\n  const formRef = useRef();\r\n  const [validated, setValidated] = useState(false);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [reviewdata, setreviewdata] = useState([]);\r\n  const [addreviewdata, setaddreviewdata] = useState([]);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  const [editreviewdata, seteditreviewdata] = useState({\r\n    id: \"\",\r\n    status: \"\",\r\n    note: \"\",\r\n  });\r\n  let [searcherror, setsearcherror] = useState(false);\r\n  const token = localStorage.getItem(\"token\");\r\n  const handleAlert = () => setAlert(true);\r\n  const hideAlert = () => setAlert(false);\r\n  const [Alert, setAlert] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n\r\n  const closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n\r\n  const handleShow = (e) => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/review_list`,\r\n        {\r\n          id: `${e}`,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n\r\n      .then((response) => {\r\n        setaddreviewdata(response.data[0]);\r\n\r\n        seteditreviewdata({\r\n          ...editreviewdata,\r\n          id: response.data[0].id,\r\n          status: response.data[0].status,\r\n          note: response.data[0].note,\r\n        });\r\n\r\n        setapicall(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    setShow(true);\r\n  };\r\n  const [searchdata, setsearchData] = useState({\r\n    product_name: \"\",\r\n    category_type: \"\",\r\n    status: \"\",\r\n  });\r\n\r\n  const OnSearchChange = (e) => {\r\n    setsearchData({ ...searchdata, [e.target.name]: e.target.value });\r\n    setsearcherror(false);\r\n  };\r\n\r\n  const onSearchClick = () => {\r\n    if (\r\n      searchdata.product_name === \"\" &&\r\n      searchdata.category_type === \"\" &&\r\n      searchdata.status === \"\"\r\n    ) {\r\n      setsearcherror(true);\r\n    } else {\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL}/review_list`,\r\n          {\r\n            product_name: `${searchdata.product_name}`,\r\n            category_type: `${searchdata.category_type}`,\r\n            status: `${searchdata.status}`,\r\n          },\r\n          {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setreviewdata(response.data);\r\n          setapicall(false);\r\n          setsearcherror(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n  /*onclick funtion to Reset the search feild */\r\n  const onReset = () => {\r\n    setsearchData({\r\n      product_name: \"\",\r\n      category_type: \"\",\r\n      status: \"\",\r\n    });\r\n    setapicall(true);\r\n    setsearcherror(false);\r\n  };\r\n\r\n  const handleFormChange = (e) => {\r\n    seteditreviewdata({\r\n      ...editreviewdata,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const UpdateCategoryClick = (e) => {\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      setValidated(true);\r\n    } else {\r\n      e.preventDefault();\r\n      axios\r\n        .put(`${process.env.REACT_APP_BASEURL}/review_approved`, editreviewdata)\r\n        .then(\r\n          (response) => {\r\n            setShow(false);\r\n            setapicall(true);\r\n            setUpdateAlert(true);\r\n          },\r\n          {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          }\r\n        )\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      setValidated(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/review_list`,\r\n        {\r\n          product_name: \"\",\r\n          category_type: \"\",\r\n          status: \"\",\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setreviewdata(response.data);\r\n        setapicall(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }, [apicall]);\r\n\r\n  const columns = [\r\n    {\r\n      name: \"ID\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: 0,\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => row.product_name,\r\n      sortable: true,\r\n      width: \"180px\",\r\n    },\r\n    {\r\n      name: \"Review Date\",\r\n      selector: (row) => moment(row.review_date).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Comment\",\r\n      selector: (row) => row.comment,\r\n      sortable: true,\r\n      width: \"150px\",\r\n\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"12px\",\r\n      },\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <Badge\r\n          bg={\r\n            row.status === \"approve\"\r\n              ? \"success\"\r\n              : row.status === \"reject\"\r\n                ? \"danger\"\r\n                : row.status === \"pending\"\r\n                  ? \"warning\"\r\n                  : null\r\n          }\r\n        >\r\n          {row.status}\r\n        </Badge>\r\n      ),\r\n      sortable: true,\r\n      width: \"120px\",\r\n      // center: true,\r\n    },\r\n    {\r\n      name: \"Action\",\r\n      width: \"150px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.id)}\r\n          />\r\n          <BsTrash\r\n            className=\" p-0 m-0 editiconn text-danger\"\r\n            onClick={handleAlert}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <h2>Review</h2>\r\n\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\" row\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <input\r\n              type={\"text\"}\r\n              placeholder={\"Search by product name\"}\r\n              name={\"product_name\"}\r\n              onChange={(e) => OnSearchChange(e)}\r\n              value={searchdata.product_name}\r\n              className={\"adminsideinput\"}\r\n            />\r\n            {searcherror === true ? (\r\n              <small className=\"text-danger\">please fill the feild</small>\r\n            ) : null}\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by status\"\r\n              className=\"adminselectbox\"\r\n              onChange={(e) => OnSearchChange(e)}\r\n              name={\"status\"}\r\n              value={searchdata.status}\r\n            >\r\n              <option value={\"\"}>Search by status</option>\r\n              <option value=\"approve\">Approve</option>\r\n              <option value=\"reject\">Reject</option>\r\n              <option value=\"pending\">Pending</option>\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button w-100\"}\r\n              onClick={() => onSearchClick()}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Reset\"}\r\n              btnclass={\"button main_button w-100\"}\r\n              onClick={() => onReset()}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* upload */}\r\n\r\n        <div className=\"product_page_uploadbox my-4\"></div>\r\n\r\n        {/* datatable */}\r\n        <Modal size=\"md\" show={show} onHide={handleClose}>\r\n          <Form\r\n            className=\"\"\r\n            validated={validated}\r\n            ref={formRef}\r\n            onSubmit={(e) => UpdateCategoryClick(e)}\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Update Review Info</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <div className=\"row p-3 m-0\">\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input flex-column d-flex\"\r\n                    controlId=\"formBasicEmail\"\r\n                  >\r\n                    <Form.Label className=\"mb-0\">Order Id</Form.Label>\r\n                    <Form.Text className=\"mt-0\">{addreviewdata.id}</Form.Text>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input flex-column d-flex\"\r\n                    controlId=\"formBasicEmail\"\r\n                  >\r\n                    <Form.Label className=\"mb-0\">Product Name</Form.Label>\r\n                    <Form.Text className=\"mt-0\">\r\n                      {addreviewdata.product_name}\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input flex-column d-flex\"\r\n                    controlId=\"formBasicEmail\"\r\n                  >\r\n                    <Form.Label className=\"mb-0\">Review</Form.Label>\r\n                    <Form.Text className=\"mt-0\">\r\n                      {addreviewdata.comment}\r\n                    </Form.Text>\r\n                  </Form.Group>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                  <Form.Group\r\n                    className=\"mb-3 aos_input flex-column d-flex\"\r\n                    controlId=\"formBasicEmail\"\r\n                  >\r\n                    <div className=\"col-md-6\">\r\n                      <Form.Group\r\n                        className=\"mb-3 aos_input\"\r\n                        controlId=\"formBasicEmail\"\r\n                      >\r\n                        <Form.Label>Status</Form.Label>\r\n                        <Form.Select\r\n                          aria-label=\"Status\"\r\n                          className=\"adminselectbox\"\r\n                          placeholder=\"Status\"\r\n                          name=\"status\"\r\n                          value={editreviewdata.status}\r\n                          onChange={(e) => handleFormChange(e)}\r\n                        >\r\n                          <option value={\"\"}>Status</option>\r\n                          <option value=\"reject\">Reject</option>\r\n                          <option value=\"pending\">Pending</option>\r\n                          <option value=\"approve\">Approve</option>\r\n                        </Form.Select>\r\n                      </Form.Group>\r\n                    </div>\r\n                    <Form.Label className=\"mb-0\">Note</Form.Label>\r\n                    <Form.Control\r\n                      as=\"textarea\"\r\n                      rows={3}\r\n                      className=\"mt-0\"\r\n                      name=\"note\"\r\n                      value={editreviewdata.note}\r\n                      onChange={(e) => handleFormChange(e)}\r\n                    >\r\n                      {\" \"}\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </div>\r\n              </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <button\r\n                type=\"button\"\r\n                className=\"button main_outline_button\"\r\n                onClick={handleClose}\r\n              >\r\n                Cancel\r\n              </button>\r\n              <button className=\"button main_button\" type=\"submit\">\r\n                Update\r\n              </button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        </Modal>\r\n        <DataTable\r\n          columns={columns}\r\n          data={reviewdata}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body review_table\"}\r\n        />\r\n        <SAlert\r\n          show={Alert}\r\n          title=\"Review\"\r\n          text=\"Are you Sure you want to delete\"\r\n          onConfirm={hideAlert}\r\n          showCancelButton={true}\r\n          onCancel={hideAlert}\r\n        />\r\n        <SAlert\r\n          show={UpdateAlert}\r\n          title=\"Updated Review Successfully \"\r\n          onConfirm={closeUpdateAlert}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Review;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\category\\category.js",["482"],[],"import React, { useState, useRef, useEffect } from \"react\";\r\n// import Input from \"../common/input\";\r\nimport { AiOutlinePlus } from \"react-icons/ai\";\r\n// import { useNavigate } from \"react-router-dom\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\n// import { Badge } from \"react-bootstrap\";\r\nimport SweetAlert from \"sweetalert-react\";\r\nimport \"sweetalert/dist/sweetalert.css\";\r\nimport axios from \"axios\";\r\nimport categorytype from \"../../admin/json/categorytype\";\r\n// import Loader from \"../common/loader\";\r\nvar newImg = \"\";\r\n\r\nconst CategoryList = () => {\r\n  const formRef = useRef();\r\n  const [validated, setValidated] = useState(false);\r\n  const [searchvalidated, setsearchValidated] = useState(false);\r\n  const [CateName, setCateName] = useState(false);\r\n  const [CateType, setCateType] = useState(false);\r\n  const [Alert, setAlert] = useState(false);\r\n  const [show, setShow] = useState(\"\");\r\n  const [newName, setnewName] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [ImagePaht, setImagePath] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [category, setCategory] = useState([]);\r\n  const [indVal, setIndVal] = useState(0);\r\n  const [subCategory, setSubCategory] = useState([]);\r\n  const [childCategory, setchildCategory] = useState([]);\r\n  const [grandcCategory, setgrandcCategory] = useState([]);\r\n  console.log(grandcCategory)\r\n  const [scategory, setScategory] = useState({\r\n    category_name: \"0\",\r\n    sub_category: \"\",\r\n    child_category: \"\",\r\n    s_category: \"\",\r\n  });\r\n  const [level, setlevel] = useState(\"\");\r\n  const [imgerror, setimgerror] = useState(\"\");\r\n  const [numrror, setnumrror] = useState(\"\");\r\n  const [cid, setCid] = useState();\r\n  console.log(cid)\r\n\r\n  const [parentid, setParentid] = useState(\"\");\r\n  const [file, setFile] = useState();\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const [allparentid, setAllparentid] = useState([]);\r\n  console.log(allparentid)\r\n\r\n  const [apicall, setapicall] = useState(false);\r\n  const [searchdata, setsearchData] = useState([]);\r\n  const [CategoryEditparent, setCategoryEditparent] = useState(\"\");\r\n  const [CategoryEditSubparent, setCategoryEditSubparent] = useState(\"\");\r\n  const [AddAlert, setAddAlert] = useState(false);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  const [CategoryEditChildparent, setCategoryEditChildparent] = useState(\"\");\r\n  const [CategoryEditdata, setCategoryEditData] = useState([]);\r\n  const [SearchCat, setSearchCat] = useState({\r\n    category_name: \"\",\r\n    category_type: \"\",\r\n    level: \"\",\r\n  });\r\n\r\n  let token = localStorage.getItem(\"token\");\r\n\r\n  /*<----Sweet alert function of delete category---->*/\r\n  const handleAlert = (id) => {\r\n    setParentid(id[0]);\r\n    setlevel(id[1]);\r\n    setnewName(id[2]);\r\n    setAlert(true);\r\n  };\r\n  /*<----Function to delete category---->*/\r\n  const hideAlert = () => {\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL_0}/delete_category`,\r\n        {\r\n          id: parentid,\r\n          is_active: 0,\r\n          level: level,\r\n        },\r\n        {\r\n          headers: { admin_token: `${token}` },\r\n        }\r\n      )\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    setAlert(false);\r\n    setapicall(true);\r\n  };\r\n  /*<----Fumction to set the icon of the category---->*/\r\n  const saveFile = (e) => {\r\n    setFile(e.target.files[0]);\r\n    setFileName(e.target.files[0].name);\r\n    setimgerror(\"\");\r\n  };\r\n  let vadi = fileName.split(\".\").pop();\r\n  /*<---- Close Sweet alert function of added category---->*/\r\n  const closeAddAlert = () => {\r\n    setAddAlert(false);\r\n    setAlert(false);\r\n  };\r\n  /*<---- Close Sweet alert function of updated category---->*/\r\n  const closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n  /*<----Function to show data in modal of update category---->*/\r\n  const handleShow = (\r\n    e,\r\n    name,\r\n    all_parent_id,\r\n    parent_id,\r\n    level,\r\n    category_type,\r\n    category_name\r\n  ) => {\r\n    if (e === \"add\") {\r\n      setShow(e);\r\n    }\r\n    if (e !== \"add\") {\r\n      try {\r\n        axios\r\n          .get(`${process.env.REACT_APP_BASEURL_0}/category_details?id=${e}`)\r\n          .then((response) => {\r\n            let data = response.data[0];\r\n            setCategoryEditData(data);\r\n\r\n            setCateName(false);\r\n            setCateType(false);\r\n            setImagePath(response.data[0].image);\r\n            const arr = data.all_parent_id.split(\",\");\r\n            if (arr[0] === \"0\" && arr.length === 1) {\r\n            } else {\r\n              for (let i = 0; i < arr.length; i++) {\r\n                axios\r\n                  .get(\r\n                    `${process.env.REACT_APP_BASEURL_0}/category_details?id=${arr[i]}`\r\n                  )\r\n                  .then((response) => {\r\n                    let data = response.data[0];\r\n                    if (i === 0) {\r\n                      axios\r\n                        .get(\r\n                          `${process.env.REACT_APP_BASEURL_0}/category?category=${arr[i]}`\r\n                        )\r\n                        .then((response) => {\r\n                          setSubCategory(response.data);\r\n                          setCateName(false);\r\n                          setCateType(false);\r\n\r\n                        })\r\n                        .catch(function (error) {\r\n                          console.log(error);\r\n                        });\r\n                      setCategoryEditparent(data.category_name);\r\n                    } else if (i === 1) {\r\n                      axios\r\n                        .get(\r\n                          `${process.env.REACT_APP_BASEURL_0}/category?category=${arr[i]}`\r\n                        )\r\n                        .then((response) => {\r\n                          setchildCategory(response.data);\r\n                          setCateName(false);\r\n                          setCateType(false);\r\n\r\n                        })\r\n                        .catch(function (error) {\r\n                          console.log(error);\r\n                        });\r\n                      setCategoryEditSubparent(data.category_name);\r\n                    } else if (i === 2) {\r\n                      setCategoryEditChildparent(data.category_name);\r\n                      setCateName(false);\r\n                      setCateType(false);\r\n\r\n                    }\r\n                  })\r\n                  .catch(function (error) {\r\n                    console.log(error);\r\n                  });\r\n              }\r\n            }\r\n\r\n            setnewName(name);\r\n            setCid(e);\r\n            setParentid(parent_id);\r\n            setAllparentid(all_parent_id);\r\n            setlevel(level);\r\n            setType(category_type);\r\n            setShow(e);\r\n            setCategoryEditData(data);\r\n          });\r\n      } catch (err) { }\r\n    }\r\n  };\r\n\r\n  newImg = ImagePaht.replace(\"public\", \"\");\r\n  /*<---- Onchange function of category name---->*/\r\n  const handlChangeName = (e, id) => {\r\n    setnewName(e.target.value);\r\n    setCateName(false);\r\n    setnumrror(\"\");\r\n  };\r\n  /*<---- Onchange function of category type---->*/\r\n  const handlChangeType = (e, id) => {\r\n    setType(e.target.value);\r\n    setCateType(false);\r\n  };\r\n  /*<---- Onchange function of category sub category---->*/\r\n  const categoryFormChange = (e, id) => {\r\n    setIndVal(e.target.value);\r\n    setScategory({ ...scategory, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  let parentidddata = [];\r\n  parentidddata.push(scategory.category_name);\r\n\r\n  if (scategory.sub_category !== \"\") {\r\n    parentidddata.push(scategory.sub_category);\r\n  }\r\n  if (scategory.child_category !== \"\") {\r\n    parentidddata.push(scategory.child_category);\r\n  }\r\n\r\n  /*<---Function to get the all category list data---->*/\r\n  function getUser() {\r\n    try {\r\n      axios\r\n        .get(`${process.env.REACT_APP_BASEURL_0}/category?category=all`)\r\n        .then((response) => {\r\n          let data = response.data.filter((item) => item.is_active === \"1\");\r\n          setData(data);\r\n          setsearchData(data);\r\n          setapicall(false);\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n  }, [apicall]);\r\n\r\n  useEffect(() => {\r\n    addCategory();\r\n  }, [indVal, apicall]);\r\n\r\n  const addCategory = async (category, id) => {\r\n    if (id === \"\" || id === null || id === undefined || indVal !== \"\") {\r\n      try {\r\n        axios\r\n          .get(`${process.env.REACT_APP_BASEURL_0}/category?category=${indVal}`)\r\n          .then((response) => {\r\n            let cgory = response.data;\r\n            console.log(\"cgory\" + cgory)\r\n            // let specificValues = cgory.filter(\r\n            //   (obj) =>\r\n            //     obj.all_parent_id.substring(0, obj.all_parent_id.length - 2) ===\r\n            //     scategory.category_name\r\n            // );\r\n            // console.log(specificValues);\r\n\r\n            if (indVal === 0) {\r\n              setCategory(cgory);\r\n              setlevel(0);\r\n            }\r\n            if (indVal === scategory.category_name) {\r\n              setSubCategory(cgory);\r\n              setchildCategory(\"\");\r\n              setlevel(1);\r\n            } else if (indVal === scategory.sub_category) {\r\n              setchildCategory(cgory);\r\n              setgrandcCategory(\"\");\r\n              setlevel(2);\r\n            } else if (indVal === scategory.child_category) {\r\n              setgrandcCategory(cgory);\r\n              setlevel(3);\r\n            } else if (indVal === scategory.s_category) {\r\n              setgrandcCategory(cgory);\r\n              setlevel(4);\r\n            }\r\n          });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    setapicall(false);\r\n  };\r\n\r\n  /*<----data in table ---->*/\r\n  const columns = [\r\n    {\r\n      name: \"ID\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingLeft: \"0\",\r\n      },\r\n    },\r\n    {\r\n      name: \"all_parent_id\",\r\n      selector: (row) => row.all_parent_id,\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"#\",\r\n      width: \"250px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <div>\r\n          <img\r\n            height=\"90px\"\r\n            width=\"75px\"\r\n            alt={row.category_name}\r\n            src={\r\n              row.image === \"no image\"\r\n                ? \"https://t3.ftcdn.net/jpg/05/37/73/58/360_F_537735846_kufBp10E8L4iV7OLw1Kn3LpeNnOIWbvf.jpg\"\r\n                : row.image\r\n            }\r\n            style={{\r\n              borderRadius: 10,\r\n              paddingTop: 10,\r\n              paddingBottom: 10,\r\n              textAlign: \"right\",\r\n            }}\r\n            onClick={() => handleClick()}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Category Name\",\r\n      selector: (row) => (\r\n        <div className=\"productdescbox\">\r\n          <b>\r\n            <p className=\"mb-0\">{row.category_name}</p>\r\n          </b>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n      width: \"250px\",\r\n    },\r\n    {\r\n      name: \"Category Type\",\r\n      selector: (row) => row.category_type,\r\n      sortable: true,\r\n      width: \"160px\",\r\n    },\r\n    {\r\n      name: \"Level\",\r\n      selector: (row) => row.level,\r\n      sortable: true,\r\n      width: \"100px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    // {\r\n    //   name: \"Status\",\r\n    //   selector: (row) => (\r\n    //     <span\r\n    //       className={\r\n    //         row.is_active === \"1\"\r\n    //           ? \"badge bg-success\"\r\n    //           : row.is_active === \"0\"\r\n    //           ? \" badge bg-danger\"\r\n    //           : null\r\n    //       }\r\n    //     >\r\n    //       {row.is_active === \"1\" ? \"active\" : \"inactive\"}\r\n    //     </span>\r\n    //   ),\r\n    //   sortable: true,\r\n    //   width: \"105px\",\r\n    // },\r\n    {\r\n      name: \"Action\",\r\n      width: \"200px\",\r\n      style: {\r\n        paddingRight: \"12px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(\r\n              this,\r\n              row.id,\r\n              row.category_name,\r\n              row.all_parent_id,\r\n              row.parent_id,\r\n              row.level,\r\n              row.category_type\r\n            )}\r\n          />\r\n          <BsTrash\r\n            className=\" p-0 m-0 editiconn text-danger\"\r\n            onClick={handleAlert.bind(this, [\r\n              row.id,\r\n              row.level,\r\n              row.category_name,\r\n            ])}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  /*<---Function to add category--->*/\r\n  const AddCategoryClick = (e, id) => {\r\n    let regex_num = /^[^\\d]+$/;\r\n    let num = regex_num.test(newName);\r\n    e.preventDefault();\r\n    // const regex_spc = /^[^']+$/;\r\n    // let spc = regex_spc.test(newName);\r\n    if (newName === \"\" /*|| num === false  || spc === false*/) {\r\n      setCateName(true);\r\n    } else if (num === false) {\r\n      setnumrror(\"Number can't be a category\");\r\n    } else if (type === \"\") {\r\n      setCateType(true);\r\n    } else if (\r\n      vadi === \"jpeg\" ||\r\n      vadi === \"jpg\" ||\r\n      vadi === \"png\" ||\r\n      vadi === \"\"\r\n    ) {\r\n      const formData = new FormData();\r\n      formData.append(\"image\", file);\r\n      formData.append(\"filename\", fileName);\r\n      formData.append(\"parent_id\", indVal);\r\n      formData.append(\"level\", level);\r\n      formData.append(\"all_parent_id\", parentidddata);\r\n      formData.append(\"new_category\", newName);\r\n      formData.append(\"category_type\", type);\r\n      axios\r\n        .post(`${process.env.REACT_APP_BASEURL_0}/add_category`, formData, {\r\n          headers: { admin_token: `${token}` },\r\n        })\r\n        .then((response) => {\r\n          setnewName(\"\");\r\n          setFileName(\"\");\r\n          setType(\"\");\r\n          setCategoryEditparent(\"\");\r\n          setCategoryEditSubparent(\"\");\r\n          setCategoryEditChildparent(\"\");\r\n          setSubCategory([]);\r\n          setchildCategory([]);\r\n          setgrandcCategory([]);\r\n          setImagePath(\"\");\r\n          newImg = \"\";\r\n          setFile();\r\n          setShow(false);\r\n          setapicall(true);\r\n          setAddAlert(true);\r\n          formRef.current.reset();\r\n          setimgerror(\"\");\r\n          setnumrror(\"\");\r\n          setCateName(false);\r\n          setCateType(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      setimgerror(\"\");\r\n    } else {\r\n      setimgerror(\"This image is not accetable\");\r\n    }\r\n  };\r\n\r\n  /*<---Function to update the category--->*/\r\n  const UpdateCategoryClick = (show) => {\r\n    show.preventDefault();\r\n    let regex_num = /^[^\\d]+$/;\r\n    let num = regex_num.test(newName);\r\n    if (newName === \"\") {\r\n      setCateName(true);\r\n    } else if (num === false) {\r\n      setnumrror(\"Number can't be a category\");\r\n    } else if (type === \"\") {\r\n      setCateType(true);\r\n    } else if (\r\n      vadi === \"jpeg\" ||\r\n      vadi === \"jpg\" ||\r\n      vadi === \"png\" ||\r\n      vadi === \"\"\r\n    ) {\r\n      const formData = new FormData();\r\n      formData.append(\"id\", CategoryEditdata.id);\r\n      formData.append(\"image\", file);\r\n      formData.append(\"filename\", fileName);\r\n      formData.append(\"parent_id\", indVal);\r\n      formData.append(\"level\", level);\r\n      formData.append(\"all_parent_id\", parentidddata);\r\n      formData.append(\"new_category\", newName);\r\n      formData.append(\"category_type\", type);\r\n      axios\r\n        .put(`${process.env.REACT_APP_BASEURL_0}/update_category`, formData, {\r\n          headers: { admin_token: `${token}` },\r\n        })\r\n        .then((response) => {\r\n          setnewName(\"\");\r\n          setType(\"\");\r\n          setFileName(\"\");\r\n          setCategoryEditparent(\"\");\r\n          setCategoryEditSubparent(\"\");\r\n          setCategoryEditChildparent(\"\");\r\n          setSubCategory([]);\r\n          setchildCategory([]);\r\n          setgrandcCategory([]);\r\n          setImagePath(\"\");\r\n          setimgerror(\"\");\r\n          setnumrror(\"\");\r\n          newImg = \"\";\r\n          setFile();\r\n          setapicall(true);\r\n          setShow(false);\r\n          setUpdateAlert(true);\r\n          setCateName(false);\r\n          setCateType(false);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      formRef.current.reset();\r\n    } else {\r\n      setimgerror(\"This image is not accetable\");\r\n    }\r\n  };\r\n\r\n  /*Onchange function of category search feilds */\r\n  const onValueChange = (e) => {\r\n    setSearchCat({ ...SearchCat, [e.target.name]: e.target.value });\r\n    setsearchValidated(false);\r\n  };\r\n\r\n  /*<---Function to search by category--->*/\r\n  const SearchCategory = () => {\r\n    if (\r\n      SearchCat.category_name === \"\" &&\r\n      SearchCat.level === \"\" &&\r\n      SearchCat.category_type === \"\"\r\n    ) {\r\n      setsearchValidated(true);\r\n    } else {\r\n      axios\r\n        .post(`${process.env.REACT_APP_BASEURL_0}/search_category`, {\r\n          category_name: `${SearchCat.category_name}`,\r\n          category_type: `${SearchCat.category_type}`,\r\n          level: `${SearchCat.level}`,\r\n        })\r\n        .then((response) => {\r\n          let data = response.data.filter((item) => item.is_active === \"1\");\r\n          setData(data);\r\n          setsearchValidated(false);\r\n          // setSearchCat(\"\");\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n  /*<---Function to reset the search feild--->*/\r\n  const OnReset = () => {\r\n    setsearchValidated(false);\r\n    setSearchCat({\r\n      category_name: \"\",\r\n      category_type: \"\",\r\n      level: \"\",\r\n    });\r\n\r\n    setapicall(true);\r\n  };\r\n  const handleClick = () => { };\r\n  // const navigate = useNavigate();\r\n\r\n  const result1 = searchdata.filter(\r\n    (thing, index, self) =>\r\n      index === self.findIndex((t) => t.category_type === thing.category_type)\r\n  );\r\n  const result2 = searchdata.filter(\r\n    (thing, index, self) =>\r\n      index === self.findIndex((t) => t.level === thing.level)\r\n  );\r\n\r\n  /*<---Function to close the modal--->*/\r\n  const handleClose = () => {\r\n    formRef.current.reset();\r\n    setnewName(\"\");\r\n    setType(\"\");\r\n    setCategoryEditData(\"\");\r\n    setCategoryEditparent(\"\");\r\n    setCategoryEditSubparent(\"\");\r\n    setCategoryEditChildparent(\"\");\r\n    setSubCategory([]);\r\n    setchildCategory([]);\r\n    setgrandcCategory([]);\r\n    setImagePath(\"\");\r\n    newImg = \"\";\r\n    setCateName(false);\r\n    setCateType(false);\r\n    setValidated(false);\r\n    setShow(false);\r\n    // apicall(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App productlist_maindiv\">\r\n        <h2>Category</h2>\r\n\r\n        {/* search bar */}\r\n        <div className=\"card mt-3 p-3 \">\r\n          <div className=\" row\">\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <input\r\n                required\r\n                type=\"text\"\r\n                className=\"adminsideinput\"\r\n                placeholder={\"Search by category name\"}\r\n                value={SearchCat.category_name}\r\n                name={\"category_name\"}\r\n                onChange={(e) => onValueChange(e)}\r\n              />\r\n              {searchvalidated === true ? (\r\n                <p className=\"mt-1 ms-2 text-danger\" type=\"invalid\">\r\n                  Please fill this field\r\n                </p>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                name=\"category_type\"\r\n                onChange={(e) => onValueChange(e)}\r\n                value={SearchCat.category_type}\r\n              >\r\n                <option value={\"\"}>Search by category</option>\r\n                {(result1 || []).map((lvl, i) => {\r\n                  return (\r\n                    <option value={lvl.category_type} key={i}>\r\n                      {lvl.category_type}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <Form.Select\r\n                aria-label=\"Search by status\"\r\n                className=\"adminselectbox\"\r\n                name=\"level\"\r\n                onChange={(e) => onValueChange(e)}\r\n                value={SearchCat.level}\r\n              >\r\n                <option value={\"\"}>Search by level</option>\r\n                {(result2 || []).map((lvl, i) => {\r\n                  return (\r\n                    <option value={lvl.level} key={i}>\r\n                      {lvl.level}\r\n                    </option>\r\n                  );\r\n                })}\r\n              </Form.Select>\r\n            </div>\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              <button\r\n                className=\"button main_button w-100\"\r\n                onClick={() => SearchCategory()}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"col-md-3 col-sm-6 aos_input mb-2\">\r\n              {\" \"}\r\n              <button\r\n                className=\"button main_button w-100\"\r\n                onClick={() => OnReset()}\r\n              >\r\n                Reset\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* upload */}\r\n\r\n          <div className=\"product_page_uploadbox my-4\">\r\n            <Iconbutton\r\n              btntext={\"Add Category\"}\r\n              onClick={() => handleShow(\"add\")}\r\n              Iconname={<AiOutlinePlus />}\r\n              btnclass={\"button main_button adminmainbutton\"}\r\n            />\r\n          </div>\r\n\r\n          {/* datatable */}\r\n          <Modal\r\n            show={show}\r\n            onHide={() => handleClose()}\r\n            dialogClassName=\"addproductmainmodal\"\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            centered\r\n            backdrop={() => handleClose()}\r\n          >\r\n            <Form\r\n              className=\"\"\r\n              validated={validated}\r\n              ref={formRef}\r\n              onSubmit={\r\n                show === \"add\"\r\n                  ? (e) => AddCategoryClick(e, category.id)\r\n                  : (show) => UpdateCategoryClick(show)\r\n              }\r\n            >\r\n              <Modal.Header closeButton className=\"addproductheader\">\r\n                <Modal.Title id=\"example-custom-modal-styling-title\">\r\n                  {show === \"add\" ? \"Add Category\" : \" Update Category\"}\r\n                </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body className=\"addproductbody p-2\">\r\n                <div className=\"row p-3 m-0\">\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group\r\n                      className=\"mb-3 aos_input mb-2\"\r\n                      controlId=\"formBasicName\"\r\n                    >\r\n                      <Form.Label>Category Name</Form.Label>\r\n                      <Form.Control\r\n                        type=\"text\"\r\n                        placeholder=\"Category Name\"\r\n                        // required\r\n                        onChange={(e) => handlChangeName(e)}\r\n                        value={newName}\r\n                        name={\"new_category\"}\r\n                        maxLength={25}\r\n                      />\r\n                      {CateName === true ? (\r\n                        <p className=\"text-danger mt-2\">\r\n                          Category name is required\r\n                        </p>\r\n                      ) : null}\r\n                      <small className=\"text-danger\">{numrror}</small>\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group\r\n                      className=\"mb-3 aos_input\"\r\n                      controlId=\"formBasicCategory\"\r\n                    >\r\n                      <Form.Label>Category Type</Form.Label>\r\n                      <Form.Select\r\n                        aria-label=\"Select by category type\"\r\n                        className=\"adminselectbox\"\r\n                        onChange={(e) => handlChangeType(e)}\r\n                        defaultValue={CategoryEditdata.category_type}\r\n                        // required\r\n                        name={\"category_type\"}\r\n                      >\r\n                        <option value=\"\">Search by category type</option>\r\n                        {(categorytype.categorytype || []).map((data, i) => {\r\n                          return (\r\n                            <option\r\n                              key={i}\r\n                              // selected={\r\n                              //   (CategoryEditdata.category_type = \"Cloths\"\r\n                              //     ? true\r\n                              //     : false)\r\n                              // }\r\n                              value={data}\r\n                            >\r\n                              {data}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </Form.Select>\r\n                      {CateType === true ? (\r\n                        <p className=\"text-danger mt-2\">\r\n                          Category type is required\r\n                        </p>\r\n                      ) : null}\r\n                    </Form.Group>\r\n                  </div>\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group\r\n                      className=\"mb-3 aos_input\"\r\n                      controlId=\"formBasicParentCategory\"\r\n                    >\r\n                      <Form.Label>Parent Category</Form.Label>\r\n                      <Form.Select\r\n                        aria-label=\"Select by status\"\r\n                        className=\"adminselectbox\"\r\n                        onChange={(e, id) => categoryFormChange(e, id)}\r\n                        name={\"category_name\"}\r\n                        placeholder={\"Select by category\"}\r\n                      // value={indVal}\r\n                      >\r\n                        <option value={\"0\"}>Select Parent Category</option>\r\n                        {(category || []).map((cdata, i) => {\r\n                          return cdata.id === CategoryEditdata.id &&\r\n                            cdata.category_name ===\r\n                            CategoryEditdata.category_name ? null : (\r\n                            <option\r\n                              value={cdata.id}\r\n                              key={i}\r\n                              selected={\r\n                                CategoryEditparent === cdata.category_name\r\n                                  ? true\r\n                                  : false\r\n                              }\r\n                            >\r\n                              {cdata.category_name}{\" \"}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                      </Form.Select>\r\n                      <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                        Please fill category\r\n                      </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                  </div>\r\n                  {indVal === \"0\" ||\r\n                    subCategory[0] === \"\" ||\r\n                    subCategory[0] === null ||\r\n                    subCategory[0] === undefined ? null : (\r\n                    <div className=\"col-md-6\">\r\n                      <Form.Group\r\n                        className=\"mb-3 aos_input\"\r\n                        controlId=\"formBasicParentCategory\"\r\n                      >\r\n                        <Form.Label>Sub Category</Form.Label>\r\n                        <Form.Select\r\n                          aria-label=\"Search by status\"\r\n                          className=\"adminselectbox\"\r\n                          onChange={(e, id) => categoryFormChange(e, id)}\r\n                          name={\"sub_category\"}\r\n                        // value={CategoryEditdata.category_name}\r\n                        >\r\n                          <option value=\"1\">Select Sub category</option>\r\n                          {(subCategory || []).map((cdata, i) => {\r\n\r\n\r\n                            return cdata.id === CategoryEditdata.id &&\r\n                              cdata.category_name ===\r\n                              CategoryEditdata.category_name ? null : (\r\n                              <option\r\n                                value={cdata.id}\r\n                                key={i}\r\n                                selected={\r\n                                  CategoryEditSubparent === cdata.category_name\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              >\r\n                                {cdata.category_name}{\" \"}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Form.Select>\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please fill category\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                    </div>\r\n                  )}\r\n\r\n                  {indVal === \"1\" ||\r\n                    indVal === \"\" ||\r\n                    indVal === \"0\" ||\r\n                    childCategory[0] === \"\" ||\r\n                    childCategory[0] === null ||\r\n                    childCategory[0] === undefined ? null : (\r\n                    <div className=\"col-md-6\">\r\n                      <Form.Group\r\n                        className=\"mb-3 aos_input\"\r\n                        controlId=\"formBasicParentCategory\"\r\n                      >\r\n                        <Form.Label> Child Category</Form.Label>\r\n                        <Form.Select\r\n                          aria-label=\"Search by status\"\r\n                          className=\"adminselectbox\"\r\n                          onChange={(e, id) => categoryFormChange(e, id)}\r\n                          name={\"child_category\"}\r\n                        >\r\n                          {\" \"}\r\n                          <option value=\"\">Select Child category</option>\r\n                          {(childCategory || []).map((cdata, i) => {\r\n                            return cdata.id === CategoryEditdata.id &&\r\n                              cdata.category_name ===\r\n                              CategoryEditdata.category_name ? null : (\r\n                              <option\r\n                                value={cdata.id}\r\n                                key={i}\r\n                                selected={\r\n                                  CategoryEditChildparent ===\r\n                                    cdata.category_name\r\n                                    ? true\r\n                                    : false\r\n                                }\r\n                              >\r\n                                {cdata.category_name}{\" \"}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </Form.Select>\r\n                        <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                          Please fill category\r\n                        </Form.Control.Feedback>\r\n                      </Form.Group>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"col-md-6\">\r\n                    <Form.Group\r\n                      className=\"mb-3 aos_input\"\r\n                      controlId=\"formBasicImg\"\r\n                    >\r\n                      <Form.Label>\r\n                        Category Icon (In .jpg, .jpeg, .png format)\r\n                      </Form.Label>\r\n                      <div className=\"category_icon_box\">\r\n                        <Form.Control\r\n                          type=\"file\"\r\n                          placeholder=\"Category Icon\"\r\n                          onChange={(e) => saveFile(e)}\r\n                          name={\"category_icon\"}\r\n                          accept=\"image/png,image/jpeg,image/jpg\"\r\n                        // value={newImg}\r\n                        />\r\n                      </div>\r\n                      {newImg === \"\" || newImg === \"no image\" ? null : (\r\n                        <img\r\n                          src={newImg}\r\n                          alt={\"apna_organic\"}\r\n                          className={\"category_icon\"}\r\n                          width={\"100px\"}\r\n                          height={\"100px\"}\r\n                          style={{ marginTop: 10 }}\r\n                        />\r\n                      )}\r\n                    </Form.Group>\r\n                    <small className=\"text-danger\">{imgerror}</small>\r\n                  </div>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer className=\"addproductfooter\">\r\n                <Iconbutton\r\n                  type={\"button\"}\r\n                  btntext={\"Cancel\"}\r\n                  onClick={() => handleClose()}\r\n                  btnclass={\"button main_outline_button adminmainbutton px-2\"}\r\n                />\r\n                <Iconbutton\r\n                  type={\"submit\"}\r\n                  btntext={show === \"add\" ? \"Add Category\" : \"Update Category\"}\r\n                  btnclass={\"button main_button \"}\r\n                />\r\n              </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n          <DataTable\r\n            columns={columns}\r\n            data={data}\r\n            pagination\r\n            highlightOnHover\r\n            pointerOnHover\r\n            className={\"table_body category_table\"}\r\n          />\r\n          <SweetAlert\r\n            show={Alert}\r\n            title={newName}\r\n            text=\"Are you Sure you want to delete\"\r\n            onConfirm={hideAlert}\r\n            showCancelButton={true}\r\n            onCancel={closeAddAlert}\r\n          />\r\n          <SweetAlert\r\n            show={AddAlert}\r\n            title=\"Category Added successfully \"\r\n            onConfirm={closeAddAlert}\r\n          />\r\n          <SweetAlert\r\n            show={UpdateAlert}\r\n            title=\"Category Updated Successfully \"\r\n            onConfirm={closeUpdateAlert}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default CategoryList;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\revenue.js",["483"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport axios from \"axios\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport moment from \"moment/moment\";\r\nimport { BsCashCoin } from \"react-icons/bs\";\r\nimport { HiOutlineGift } from \"react-icons/hi\";\r\nimport { AiOutlineArrowRight } from \"react-icons/ai\";\r\nimport { GiPayMoney } from \"react-icons/gi\";\r\nimport { MdOutlineLocalShipping } from \"react-icons/md\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\n\r\nimport Select from \"react-select\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { downloadExcel } from \"react-export-table-to-excel\";\r\n\r\nconst RevenueReport = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [filterchange, setFilterchange] = useState(\"\");\r\n  const [previousStateChange, setpreviousStateChange] = useState(\" \");\r\n\r\n  const [getRevenue, setGetRevenue] = useState([]);\r\n\r\n  const [fromDate, setFromDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [toDate, setToDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [prevFromdate, setprevFromdate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n  const [prevTodate, setprevTodate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n\r\n  const [apicall, setapicall] = useState(false);\r\n  const [tabledate, setTabledata] = useState([]);\r\n  const [RevenueError, setRevenueError] = useState(\"\");\r\n  const [venderList, setVenderList] = useState([]);\r\n  const [vendorId, setVendorId] = useState(\"\");\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryId, setCategoryId] = useState(\"\");\r\n  const [brand, setBrand] = useState([]);\r\n  const [brandName, setBrandName] = useState([]);\r\n  const [location, setLocation] = useState([]);\r\n\r\n  var GrossAmmount = [];\r\n  var totalSales = [];\r\n  var totalGSt = [];\r\n  var TotalShipping = [];\r\n  var NetSales = [];\r\n  var Discount = [];\r\n\r\n  // pdf\r\n  const exportPDF = () => {\r\n    const unit = \"pt\";\r\n    const size = \"A4\"; // Use A1, A2, A3 or A4\r\n    const orientation = \"portrait\"; // portrait or landscape\r\n\r\n    const marginLeft = 40;\r\n\r\n    const doc = new jsPDF(orientation, unit, size);\r\n\r\n    doc.setFontSize(15);\r\n\r\n    const title = \"Revenue Report\";\r\n    const headers = [\r\n      [\r\n        \"Date\",\r\n        \"Gross Revenue\",\r\n        \"Total GST\",\r\n        \"Discount\",\r\n        \"shipping\",\r\n        \"Net Revenue\",\r\n        \"Total Revenue\",\r\n      ],\r\n    ];\r\n\r\n    const data = (tabledate || []).map((elt) => [\r\n      elt.uniquedates,\r\n      elt.gross_amount,\r\n      elt.total_gst,\r\n      elt.discount,\r\n      elt.total_shipping_charges,\r\n      elt.net_sales,\r\n      elt.total_sales,\r\n    ]);\r\n\r\n    let content = {\r\n      startY: 50,\r\n      head: headers,\r\n      body: data,\r\n    };\r\n\r\n    // doc.text(headers, backgroundColor, \"pink\");\r\n    doc.text(title, marginLeft, 40);\r\n    doc.autoTable(content);\r\n    doc.save(\"Revenue Report.pdf\");\r\n    // doc.setFillColor(\"Gray\" ,100)\r\n  };\r\n\r\n  // end pdf\r\n\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const header = [\r\n    \"Date\",\r\n    \"Gross Revenue\",\r\n    \"Total GST\",\r\n    \"Discount\",\r\n    \"shipping\",\r\n    \"Net Revenue\",\r\n    \"Total Revenue\",\r\n  ];\r\n\r\n  function handleDownloadExcel() {\r\n    downloadExcel({\r\n      fileName: \"Revenue Report -> downloadExcel method\",\r\n      sheet: \"Revenue Report\",\r\n      tablePayload: {\r\n        header,\r\n        // accept two different data structures\r\n        body: tabledate,\r\n      },\r\n    });\r\n  }\r\n\r\n  //----------------------------------------------------+++=++++++ excel-  end-------------------------------------------------->\r\n\r\n  // var Refund=[]\r\n\r\n  // const [fromDate, setFrom]\r\n\r\n  // const [option,setOption]=useState(\r\n  //   {\r\n\r\n  //   chart: {\r\n  //     height: 350,\r\n  //     type: 'line',\r\n  //     stacked: false,\r\n  //   },\r\n  //   stroke: {\r\n  //     width: [0, 2, 5],\r\n  //     curve: 'smooth'\r\n  //   },\r\n  //   plotOptions: {\r\n  //     bar: {\r\n  //       columnWidth: '50%'\r\n  //     }\r\n  //   },\r\n\r\n  //   fill: {\r\n  //     opacity: [0.85, 0.25, 1],\r\n  //     gradient: {\r\n  //       inverseColors: false,\r\n  //       shade: 'light',\r\n  //       type: \"vertical\",\r\n  //       opacityFrom: 0.85,\r\n  //       opacityTo: 0.55,\r\n  //       stops: [0, 100, 100, 100]\r\n  //     }\r\n  //   },\r\n  //   labels: []  ,\r\n  //   markers: {\r\n  //     size: 0\r\n  //   },\r\n  //   xaxis: {\r\n  //     type: ''\r\n  //   },\r\n  //   yaxis: {\r\n  //     title: {\r\n  //       text: 'Points',\r\n  //     },\r\n  //     min: 0\r\n  //   },\r\n  //   tooltip: {\r\n  //     shared: true,\r\n  //     intersect: false,\r\n  //     y: {\r\n  //       formatter: function (y) {\r\n  //         if (typeof y !== \"undefined\") {\r\n  //           return y.toFixed(0) + \" points\";\r\n  //         }\r\n  //         return y;\r\n\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n  // )\r\n\r\n  //   const [series,setSeries]=useState([\r\n\r\n  //    {\r\n  //     name: 'TEAM B',\r\n  //     type: 'area',\r\n  //     data: [44, 55, 41, 67, 22, 43, 21, 41, 56, 27, 43]\r\n  //   },\r\n  //   {\r\n  //     name: 'TEAM C',\r\n  //     type: 'line',\r\n  //     data: [30, 25, 36, 30, 70, 35, 64, 52, 45, 36, 39]\r\n  //   },\r\n\r\n  //   {\r\n  //     name: 'TEAM D',\r\n  //     type: 'line',\r\n  //     data: [30, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39]\r\n  //   }\r\n\r\n  // ])\r\n\r\n  // setSeries([\r\n\r\n  //   {\r\n  //    name: 'TEAM B',\r\n  //    type: 'area',\r\n  //    data: [44, 55, 41, 67, 22, 43, 21, 41, 56, 27, 43]\r\n  //  },\r\n  //  {\r\n  //    name: 'TEAM C',\r\n  //    type: 'line',\r\n  //    data: GrossAmmount\r\n  //  },\r\n\r\n  //  {\r\n  //    name: 'TEAM D',\r\n  //    type: 'line',\r\n  //    data: [30, 25, 36, 30, 45, 35, 64, 52, 59, 36, 39]\r\n  //  }\r\n\r\n  // ])\r\n\r\n  // setOption( {\r\n\r\n  //   chart: {\r\n  //     height: 350,\r\n  //     type: 'line',\r\n  //     stacked: false,\r\n  //   },\r\n  //   stroke: {\r\n  //     width: [0, 2, 5],\r\n  //     curve: 'smooth'\r\n  //   },\r\n  //   plotOptions: {\r\n  //     bar: {\r\n  //       columnWidth: '50%'\r\n  //     }\r\n  //   },\r\n\r\n  //   fill: {\r\n  //     opacity: [0.85, 0.25, 1],\r\n  //     gradient: {\r\n  //       inverseColors: false,\r\n  //       shade: 'light',\r\n  //       type: \"vertical\",\r\n  //       opacityFrom: 0.85,\r\n  //       opacityTo: 0.55,\r\n  //       stops: [0, 100, 100, 100]\r\n  //     }\r\n  //   },\r\n  //   labels: GrossAmmount,\r\n  //   markers: {\r\n  //     size: 0\r\n  //   },\r\n  //   xaxis: {\r\n  //     type: 'value'\r\n  //   },\r\n  //   yaxis: {\r\n  //     title: {\r\n  //       text: 'Points',\r\n  //     },\r\n  //     min: 0\r\n  //   },\r\n  //   tooltip: {\r\n  //     shared: true,\r\n  //     intersect: false,\r\n  //     y: {\r\n  //       formatter: function (y) {\r\n  //         if (typeof y !== \"undefined\") {\r\n  //           return y.toFixed(0) + \" points\";\r\n  //         }\r\n  //         return y;\r\n\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // })\r\n\r\n\r\n\r\n  const options = {\r\n    chart: {\r\n      type: \"spline\",\r\n      borderRadius: \"5\",\r\n      borderColor: \"#335cad\",\r\n    },\r\n    title: {\r\n      text: \" Figures\",\r\n      style: { color: \"green\", fontSize: \"22px\" },\r\n      align: \"left\",\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Gross Revenue\",\r\n        data: GrossAmmount,\r\n      },\r\n\r\n      {\r\n        name: \"Discount\",\r\n        data: Discount,\r\n      },\r\n      {\r\n        name: \"Total GST\",\r\n        data: totalGSt,\r\n      },\r\n      {\r\n        name: \"Net Revenue\",\r\n        data: NetSales,\r\n      },\r\n      {\r\n        name: \"shipping\",\r\n        data: TotalShipping,\r\n      },\r\n    ],\r\n    xAxis: {\r\n      categories: GrossAmmount,\r\n    },\r\n    yAxis: {\r\n      categories: totalSales,\r\n    },\r\n  };\r\n\r\n  /////////////////////////////////////////////////New Apexchart //////////////////////////////////////////////\r\n\r\n  // var  Chartoptions = {\r\n  //   series: [\r\n  //   {\r\n  //     name: \"High - 2013\",\r\n  //     data: [28, 29, 33, 36, 32, 32, 33]\r\n  //   },\r\n  //   {\r\n  //     name: \"Low - 2013\",\r\n  //     data: [12, 11, 14, 18, 17, 13, 13]\r\n  //   }\r\n  // ],\r\n  //   chart: {\r\n  //   height: 350,\r\n  //   type: 'line',\r\n  //   dropShadow: {\r\n  //     enabled: true,\r\n  //     color: '#000',\r\n  //     top: 18,\r\n  //     left: 7,\r\n  //     blur: 10,\r\n  //     opacity: 0.2\r\n  //   },\r\n  //   toolbar: {\r\n  //     show: false\r\n  //   }\r\n  // },\r\n  // colors: ['#77B6EA', '#545454'],\r\n  // dataLabels: {\r\n  //   enabled: true,\r\n  // },\r\n  // stroke: {\r\n  //   curve: 'smooth'\r\n  // },\r\n  // title: {\r\n  //   text: 'Average High & Low Temperature',\r\n  //   align: 'left'\r\n  // },\r\n  // grid: {\r\n  //   borderColor: '#e7e7e7',\r\n  //   row: {\r\n  //     colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n  //     opacity: 0.5\r\n  //   },\r\n  // },\r\n  // markers: {\r\n  //   size: 1\r\n  // },\r\n  // xaxis: {\r\n  //   categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\r\n  //   title: {\r\n  //     text: 'Month'\r\n  //   }\r\n  // },\r\n  // yaxis: {\r\n  //   title: {\r\n  //     text: 'Temperature'\r\n  //   },\r\n  //   min: 5,\r\n  //   max: 40\r\n  // },\r\n  // legend: {\r\n  //   position: 'top',\r\n  //   horizontalAlign: 'right',\r\n  //   floating: true,\r\n  //   offsetY: -25,\r\n  //   offsetX: -5\r\n  // }\r\n  // };\r\n\r\n  const optionss = {\r\n    chart: {\r\n      type: \"bar\",\r\n      borderRadius: \"5\",\r\n      borderColor: \"#335cad\",\r\n    },\r\n    title: {\r\n      text: \" Figures\",\r\n      style: { color: \"green\", fontSize: \"22px\" },\r\n      align: \"left\",\r\n    },\r\n    series: [\r\n      {\r\n        name: \" Total Revenue\",\r\n        data: [getRevenue.gross_total_amount],\r\n      },\r\n\r\n      {\r\n        name: \"Discount Ammont\",\r\n        data: [getRevenue.discount_amount],\r\n      },\r\n\r\n      {\r\n        name: \"Total GST\",\r\n        data: [getRevenue.total_gst],\r\n      },\r\n\r\n      {\r\n        name: \"Total Shopping Charge\",\r\n        data: [getRevenue.total_shipping_charges],\r\n      },\r\n    ],\r\n    xAxis: {\r\n      categories: [\r\n        \"1\",\r\n        \"3\",\r\n        \"5\",\r\n        \"7\",\r\n        \"9\",\r\n        \"11\",\r\n        \"13\",\r\n        \"15\",\r\n        \"17\",\r\n        \"19\",\r\n        \"21\",\r\n        \"23\",\r\n      ],\r\n    },\r\n    yAxis: {\r\n      categories: [\"0\", \"200\", \"400\", \"600\", \"800\", \"1000\"],\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Date\",\r\n      selector: (row) => moment(row.uniquedates).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n      width: \"170px\",\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Gross Revenue\",\r\n      selector: (row) => Number(row.gross_amount).toFixed(2),\r\n      sortable: true,\r\n      width: \"150px\",\r\n    },\r\n    {\r\n      name: \"Total GST\",\r\n      selector: (row) => Number(row.total_gst).toFixed(2),\r\n      sortable: true,\r\n      width: \"150px\",\r\n    },\r\n    {\r\n      name: \"Discount\",\r\n      selector: (row) => Number(row.discount).toFixed(2),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Shipping\",\r\n      selector: (row) => Number(row.total_shipping_charges).toFixed(2),\r\n      sortable: true,\r\n      width: \"160px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"Net Revenue\",\r\n      selector: (row) => Number(row.net_sales).toFixed(2),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Total Revenue\",\r\n      selector: (row) => Number(row.total_sales).toFixed(2),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n  ];\r\n\r\n  const TimeChange = (e) => {\r\n    setFilterchange(e.target.value);\r\n\r\n    let value = Number(e.target.value);\r\n    //today---------------------------------------------------------------------------\r\n    if (value === 1) {\r\n      let frommDate = moment().format(\"YYYY-MM-DD\");\r\n      setFromDate(frommDate);\r\n\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousTodate = moment(frommDate)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodate);\r\n      setprevFromdate(previousTodate);\r\n\r\n      setpreviousStateChange(1);\r\n    }\r\n    //yesterday------------------------------------------------------------------------\r\n    if (value === 2) {\r\n      let yesterday = moment()\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n\r\n      setFromDate(yesterday);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n\r\n      let previousTodatee = moment(yesterday)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodatee);\r\n      setprevFromdate(\r\n        moment(previousTodatee)\r\n          .subtract(1, \"days\")\r\n          .startOf(\"days\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(2);\r\n    }\r\n    //last week---------------------------------------------------------------\r\n    if (value === 3) {\r\n      let lastweek = moment()\r\n        .subtract(1, \"weeks\")\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(lastweek);\r\n\r\n      setToDate(\r\n        moment()\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      let previouslastweek = moment(lastweek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastweek);\r\n      setprevFromdate(\r\n        moment(previouslastweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(3);\r\n    }\r\n    //last month---------------------------------------------------------------\r\n    if (value === 4) {\r\n      let month = moment()\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(month);\r\n      let lastMonth = moment()\r\n        .subtract(1, \"month\")\r\n        .endOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setToDate(lastMonth);\r\n      let previouslastmont = moment(lastMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastmont);\r\n      setprevFromdate(\r\n        moment(previouslastmont)\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      // setPrevDate(moment(month).subtract(1, 'month').startOf('month').format('YYYY-MM-DD'))\r\n\r\n      setpreviousStateChange(4);\r\n    }\r\n    //  last six month---------------------------------------------------------\r\n    if (value === 5) {\r\n      let sixMonth = moment()\r\n        .subtract(6, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(sixMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let lastsixMonth = moment(sixMonth)\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(lastsixMonth);\r\n      setprevFromdate(\r\n        moment(lastsixMonth)\r\n          .subtract(5, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      // setPrevDate(moment(sixMonth).subtract(6, 'month').startOf('month').format('YYYY-MM-DD'))\r\n\r\n      setpreviousStateChange(5);\r\n    }\r\n\r\n    //this week-----------------------------------------------------------------------\r\n    if (value === 8) {\r\n      let ThisWeek = moment()\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisWeek);\r\n\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthisweek = moment(ThisWeek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthisweek);\r\n      setprevFromdate(\r\n        moment(previousthisweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      // setPrevDate(moment(ThisWeek).subtract(1, 'weeks').endOf('weeks').format('YYYY-MM-DD'))\r\n      setpreviousStateChange(8);\r\n    }\r\n    if (value === 9) {\r\n      let ThisMonth = moment()\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthismont = moment(ThisMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthismont);\r\n      setprevFromdate(\r\n        moment()\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(9);\r\n    }\r\n\r\n    fetchData();\r\n  };\r\n  const fetchData = () => {\r\n\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/revenue`,\r\n        {\r\n          from_date: fromDate,\r\n          to_date: toDate,\r\n          prev_from_date: prevFromdate,\r\n          prev_to_date: prevTodate,\r\n          vendors_id: vendorId,\r\n          categorys: categoryId,\r\n          user_locations: location,\r\n          brand: brandName,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n\r\n\r\n        if (response.data.message === \"no_data\") {\r\n          setRevenueError(response.data.message);\r\n\r\n          setGetRevenue([0]);\r\n          setTabledata([]);\r\n        } else {\r\n          setRevenueError(\"\");\r\n\r\n          setGetRevenue(response.data[0]);\r\n          setTabledata(response.data[0].ravenue_date_data);\r\n\r\n          setapicall(false);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const VenderData = async () => {\r\n    let result = await axios.post(\r\n      `${process.env.REACT_APP_BASEURL}/vendors`,\r\n      {\r\n        vendor_id: \"all\",\r\n      },\r\n      {\r\n        headers: {\r\n          admin_token: token,\r\n        },\r\n      }\r\n    );\r\n\r\n    if (result.data) {\r\n      const filterUnwanted = (arr) => {\r\n        const required = arr.filter((el) => {\r\n          return el.shop_name;\r\n        });\r\n        return required;\r\n      };\r\n\r\n      setVenderList(filterUnwanted(result.data));\r\n    }\r\n  };\r\n\r\n  const CategoryData = async () => {\r\n    let result = await axios.get(\r\n      `${process.env.REACT_APP_BASEURL}/category?category=all`\r\n    );\r\n\r\n    if (result.data) {\r\n      setCategory(result.data);\r\n    }\r\n  };\r\n\r\n  const BrandData = async () => {\r\n    let result = await axios.get(`${process.env.REACT_APP_BASEURL}/brand_list`);\r\n\r\n\r\n    if (result.data) {\r\n      setBrand(result.data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    VenderData();\r\n    CategoryData();\r\n    BrandData();\r\n  }, [apicall]);\r\n\r\n  const submitHandler = () => {\r\n    setapicall(true);\r\n    fetchData();\r\n  };\r\n\r\n  const OnReset = () => {\r\n    setFilterchange(\"\");\r\n    setpreviousStateChange(\"\");\r\n    setFromDate(moment().format(\"YYYY-MM-DD\"));\r\n    setToDate(moment().format(\"YYYY-MM-DD\"));\r\n    setprevFromdate(\r\n      moment()\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\")\r\n    );\r\n    setprevTodate(\r\n      moment()\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\")\r\n    );\r\n    setBrandName([]);\r\n    setLocation([]);\r\n    setCategoryId(\"\");\r\n    setVendorId(\"\");\r\n    fetchData();\r\n    setapicall(true);\r\n  };\r\n\r\n  (tabledate || []).map((item) => {\r\n    return (\r\n      GrossAmmount.push(item.gross_amount),\r\n      totalSales.push(item.total_sales),\r\n      totalGSt.push(item.total_gst),\r\n      TotalShipping.push(item.total_shipping_charges),\r\n      NetSales.push(item.net_sales),\r\n      Discount.push(item.discount)\r\n    )\r\n\r\n  });\r\n\r\n  const options1 = [\r\n    (brand || []).map((item) => ({ value: `${item.brand}`, label: `${item.brand}` })),\r\n  ];\r\n\r\n  let arrr = [];\r\n\r\n  const brandHandler = (e) => {\r\n    arrr = [];\r\n    e.map((item) => {\r\n      return (\r\n        arrr.push(item.value)\r\n\r\n      )\r\n    });\r\n    setBrandName(arrr);\r\n  };\r\n\r\n  const options2 = [\r\n    (venderList || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.shop_name}`,\r\n    })),\r\n  ];\r\n\r\n  let vendorArray = [];\r\n\r\n  const VendorHandler = (e) => {\r\n    vendorArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        vendorArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setVendorId(vendorArray);\r\n  };\r\n\r\n  const options3 = [\r\n    (category || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.category_name}`,\r\n    })),\r\n  ];\r\n\r\n  let CategoryArray = [];\r\n\r\n  const categoryHandler = (e) => {\r\n    CategoryArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        CategoryArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setCategoryId(CategoryArray);\r\n  };\r\n\r\n  const options4 = [\r\n    { value: \"indore\", label: \"Indore\" },\r\n    { value: \"bhopal\", label: \"Bhopal\" },\r\n    { value: \"dhar\", label: \"Dhar\" },\r\n    { value: \"khandwa\", label: \"Khandwa\" },\r\n    { value: \"khargone\", label: \"Khargone\" },\r\n  ];\r\n  var SearchArray = [];\r\n  const SearchHandler = (e) => {\r\n    SearchArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        SearchArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setLocation(SearchArray);\r\n  };\r\n\r\n  //-------------gross amount comparission---------------------------\r\n  var getgrossAmmount = Number(getRevenue.gross_total_amount);\r\n  var getPreviousGrossAmmount = Number(getRevenue.prev_gross_total_amount);\r\n  var resultAmmount = (\r\n    ((getgrossAmmount - getPreviousGrossAmmount) / getPreviousGrossAmmount) *\r\n    100\r\n  ).toFixed(2);\r\n  resultAmmount !== \"Infinity\" ? console.log() : (resultAmmount = 0);\r\n  //-----------------------return total comparission--------------------------------------------------------\r\n  var Getreturntotal = Number(getRevenue.return_total);\r\n  var getPreviousreturnTotal = Number(getRevenue.prev_return_total);\r\n  var resultReturn = (\r\n    ((Getreturntotal - getPreviousreturnTotal) / getPreviousreturnTotal) *\r\n    100\r\n  ).toFixed(2);\r\n  resultReturn !== \"Infinity\" ? console.log() : (resultReturn = 0);\r\n  //--------------------total gst------------------------------------------\r\n\r\n  var GetTotalGST = Number(getRevenue.total_gst);\r\n  var getPreviousTotalGST = Number(getRevenue.prev_total_gst);\r\n  var resultGST = (\r\n    ((GetTotalGST - getPreviousTotalGST) / getPreviousTotalGST) *\r\n    100\r\n  ).toFixed(2);\r\n  resultGST !== \"Infinity\" ? console.log() : (resultGST = 0);\r\n  //--------------------total shipping------------------------------------------\r\n\r\n  var GetTotalSHipping = Number(getRevenue.total_shipping_charges);\r\n  var getPreviousTotalShipping = Number(getRevenue.prev_total_shipping_charges);\r\n  var resultShipping = (\r\n    ((GetTotalSHipping - getPreviousTotalShipping) / getPreviousTotalShipping) *\r\n    100\r\n  ).toFixed(2);\r\n  resultShipping !== \"Infinity\" ? console.log() : (resultShipping = 0);\r\n  return (\r\n    <div>\r\n      <h2>Revenue Report</h2>\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\"row pb-3\">\r\n          <div className=\"col-md-3 col-sm-6   aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by category\"\r\n              className=\"adminselectbox\"\r\n              placeholder=\"Search by category\"\r\n              onChange={TimeChange}\r\n            >\r\n              <option>Search by Dates</option>\r\n              <option name=\"today\" value={1}>\r\n                Today\r\n              </option>\r\n              <option name=\"yesterday\" value={2}>\r\n                yesterday\r\n              </option>\r\n              <option name=\"this_week\" value={8}>\r\n                this week\r\n              </option>\r\n              <option name=\"last_week\" value={3}>\r\n                Last week\r\n              </option>\r\n              <option name=\"this_week\" value={9}>\r\n                This month\r\n              </option>\r\n              <option name=\"last_month\" value={4}>\r\n                last month\r\n              </option>\r\n              <option name=\"last_6_month\" value={5}>\r\n                last 6 month\r\n              </option>\r\n              {/* <option name=\"custom_month\" value=\"6\">custom month</option> */}\r\n              <option name=\"custom_date\" value=\"7\">\r\n                custom date\r\n              </option>\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Vendor\"\r\n              onChange={VendorHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options2[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Brand\"\r\n              onChange={brandHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options1[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Category\"\r\n              onChange={categoryHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options3[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input mt-3\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Location\"\r\n              onChange={SearchHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options4}\r\n            />\r\n          </div>\r\n\r\n          {filterchange === \"7\" ? (\r\n            <div className=\"col-md-3 col-sm-6 d-flex mt-3  aos_input\">\r\n              <div className=\"col-6 pe-2 aos_input\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setFromDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-6 aos_input\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setToDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : filterchange === \"6\" ? (\r\n            <div className=\"col-md-3 mt-2 col-sm-6 aos_input\">\r\n              <Input type={\"month\"} plchldr={\"Search by month\"} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"col-md-auto col-sm-6 mt-3  aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button\"}\r\n              onClick={submitHandler}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-auto col-sm-6 mt-3 aos_input\">\r\n            <MainButton\r\n              btntext={\"Reset\"}\r\n              btnclass={\"button main_button\"}\r\n              type=\"reset\"\r\n              onClick={OnReset}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-auto col-sm-6 mt-3 aos_input\">\r\n            <DropdownButton\r\n              id=\"dropdown-variant-success\"\r\n              title=\"Download\"\r\n              variant=\"button main_button\"\r\n            >\r\n              <Dropdown.Item onClick={handleDownloadExcel}>Excel</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => exportPDF()}>Pdf</Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* upload */}\r\n\r\n        {/*  */}\r\n        {/* box */}\r\n        <div className=\"col-12 px-3\">\r\n          {/* card */}\r\n          <div className=\" row main_dashboard_row1 d-flex mb-3 \">\r\n            {/* revenue */}\r\n            <div className=\"card p-2 col-2 rounded-left shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <BsCashCoin className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Gross Revenue </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {RevenueError === \"no_data\" ||\r\n                        getRevenue.gross_total_amount === null ||\r\n                        getRevenue.gross_total_amount === undefined ||\r\n                        getRevenue.gross_total_amount === \"\" ? (\r\n                        <h3>₹0</h3>\r\n                      ) : (\r\n                        <h3>\r\n                          ₹{Number(getRevenue.gross_total_amount).toFixed(2)}\r\n                        </h3>\r\n                      )}\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultAmmount > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultAmmount}%\r\n                          </p>\r\n                        ) : resultAmmount < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultAmmount}%\r\n                          </p>\r\n                        ) : resultAmmount === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultAmmount}%\r\n                          </p>\r\n                        ) : resultAmmount === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultAmmount}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {RevenueError === \"no_data\" ||\r\n                        getRevenue.prev_gross_total_amount === null ||\r\n                        getRevenue.prev_gross_total_amount === undefined ||\r\n                        getRevenue.prev_gross_total_amount === \"\" ? (\r\n                        <p className=\"h5\"> ₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹\r\n                          {Number(getRevenue.prev_gross_total_amount).toFixed(\r\n                            2\r\n                          )}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* end */}\r\n            {/* Refund */}\r\n            {/* <div className=\"card p-2 col-2 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <HiOutlineReceiptRefund className=\"text-success h1 mx-2\" />\r\n                <h5 className=\"text-success\">Discount Ammount </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                  <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                  { (RevenueError)==\"no_data\"||(getRevenue.discount_amount)==null||(getRevenue.discount_amount)==undefined||(getRevenue.discount_amount)==\"\"? <h3>No Record</h3>:  <h3>{getRevenue.discount_amount}</h3> }  \r\n                    <div className=\"d-flex align-items-center justify-content-center\">\r\n                     <AiOutlineArrowRight className=\"h5 mb-0 mx-2\"/>\r\n                     <p className=\"mb-0 h5\">0%</p>\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        <h5>Previous Year:</h5>\r\n                    { (RevenueError)==\"no_data\"||(getRevenue.prev_gross_total_amount)==null||(getRevenue.prev_gross_total_amount)==undefined||(getRevenue.prev_gross_total_amount)==\"\"? <p className=\"h5\"> ₹0</p>:  <p className=\"h5\">₹{getRevenue.prev_gross_total_amount} </p>} \r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                \r\n              </div>\r\n            </div> */}\r\n            {/* refund end */}\r\n            {/* coupon */}\r\n            <div className=\"card p-2 col-2 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <HiOutlineGift className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Return Total</h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {RevenueError === \"no_data\" ||\r\n                        getRevenue.return_total === null ||\r\n                        getRevenue.return_total === undefined ||\r\n                        getRevenue.return_total === \"\" ? (\r\n                        <h3>₹0</h3>\r\n                      ) : (\r\n                        <h3>₹{Number(getRevenue.return_total).toFixed(2)}</h3>\r\n                      )}\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultReturn > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultReturn}%\r\n                          </p>\r\n                        ) : resultReturn < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultReturn}%\r\n                          </p>\r\n                        ) : resultReturn === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultReturn}%\r\n                          </p>\r\n                        ) : resultReturn === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultReturn}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n                      {RevenueError === \"no_data\" ||\r\n                        getRevenue.prev_return_total === null ||\r\n                        getRevenue.prev_return_total === undefined ||\r\n                        getRevenue.prev_return_total === \"\" ? (\r\n                        <p className=\"h5\"> ₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹{Number(getRevenue.prev_return_total).toFixed(2)}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/*  */}\r\n            {/* tax */}\r\n            <div className=\"card p-2 col-2 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <GiPayMoney className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Taxes </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {RevenueError === \"no_data\" ||\r\n                        getRevenue.total_gst === null ||\r\n                        getRevenue.total_gst === undefined ||\r\n                        getRevenue.total_gst === \"\" ? (\r\n                        <h3>₹0</h3>\r\n                      ) : (\r\n                        <h3>₹{Number(getRevenue.total_gst).toFixed(2)}</h3>\r\n                      )}\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultGST > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultGST}%\r\n                          </p>\r\n                        ) : resultGST < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultGST}%\r\n                          </p>\r\n                        ) : resultGST === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultGST}%\r\n                          </p>\r\n                        ) : resultGST === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultGST}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n                      {RevenueError === \"no_data\" ||\r\n                        getRevenue.prev_total_gst === null ||\r\n                        getRevenue.prev_total_gst === undefined ||\r\n                        getRevenue.prev_total_gst === \"\" ? (\r\n                        <p className=\"h5\"> ₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹{Number(getRevenue.prev_total_gst).toFixed(2)}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/*  */}\r\n            {/* shipping */}\r\n            <div className=\"card p-2 col-2 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <MdOutlineLocalShipping className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Shipping </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {RevenueError === \"no_data\" ||\r\n                        getRevenue.total_shipping_charges === null ||\r\n                        getRevenue.total_shipping_charges === undefined ||\r\n                        getRevenue.total_shipping_charges === \"\" ? (\r\n                        <h3>₹0</h3>\r\n                      ) : (\r\n                        <h3>\r\n                          {Number(getRevenue.total_shipping_charges).toFixed(2)}\r\n                        </h3>\r\n                      )}\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultShipping > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultShipping}%\r\n                          </p>\r\n                        ) : resultShipping < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultShipping}%\r\n                          </p>\r\n                        ) : resultShipping === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultShipping}%\r\n                          </p>\r\n                        ) : resultShipping === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultShipping}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n                      {RevenueError === \"no_data\" ||\r\n                        getRevenue.prev_total_shipping_charges === null ||\r\n                        getRevenue.prev_total_shipping_charges === undefined ||\r\n                        getRevenue.prev_total_shipping_charges === \"\" ? (\r\n                        <p className=\"h5\"> ₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹\r\n                          {Number(\r\n                            getRevenue.prev_total_shipping_charges\r\n                          ).toFixed(2)}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* net */}\r\n\r\n            {/*  */}\r\n          </div>\r\n        </div>\r\n        {/*  */}\r\n\r\n        {/* graph */}\r\n        {getRevenue.gross_total_amount ||\r\n          getRevenue.discount_amount ||\r\n          getRevenue.return_total ||\r\n          getRevenue.total_gst ? (\r\n          <HighchartsReact highcharts={Highcharts} options={optionss} />\r\n        ) : null}\r\n\r\n        {getRevenue.gross_total_amount ||\r\n          getRevenue.discount_amount ||\r\n          getRevenue.return_total ||\r\n          getRevenue.total_gst ? (\r\n          <HighchartsReact highcharts={Highcharts} options={options} />\r\n        ) : null}\r\n        {/* <div id=\"chart\">\r\n  <ReactApexChart options={option} series={series} type=\"line\" height={350} />\r\n</div> */}\r\n\r\n        {/*  */}\r\n\r\n        {/* datatable */}\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={tabledate}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body revenue_table\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RevenueReport;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\order.js",["484"],[],"import React, { useState, useEffect } from \"react\";\r\nimport Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport axios from \"axios\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { BsBagPlus, BsFileBarGraph } from \"react-icons/bs\";\r\nimport { AiOutlineArrowRight } from \"react-icons/ai\";\r\nimport { GiTakeMyMoney, GiStorkDelivery } from \"react-icons/gi\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport moment from \"moment/moment\";\r\nimport Select from \"react-select\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { downloadExcel } from \"react-export-table-to-excel\";\r\n\r\nconst OrderReport = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [filterchange, setFilterchange] = useState(\"\");\r\n\r\n  const [ordersreport, setordersreport] = useState([]);\r\n  const [Prevordersreport, setPrevordersreport] = useState([]);\r\n\r\n  const [orderTable, setorderTable] = useState([]);\r\n  const [previousStateChange, setpreviousStateChange] = useState(\" \");\r\n  const [prevFromdate, setprevFromdate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n  const [prevTodate, setprevTodate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n  const [fromDate, setFromDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [toDate, setToDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [apicall, setapicall] = useState(false);\r\n  const [OrderError, setOrderError] = useState(\"\");\r\n  const [venderList, setVenderList] = useState([]);\r\n  const [vendorId, setVendorId] = useState(\"\");\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryId, setCategoryId] = useState(\"\");\r\n  const [brand, setBrand] = useState([]);\r\n  const [brandName, setBrandName] = useState([]);\r\n  const [location, setLocation] = useState([]);\r\n  const fetchData = () => {\r\n\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/orders_report`,\r\n        {\r\n          from_date: fromDate,\r\n          to_date: toDate,\r\n          prev_from_date: prevFromdate,\r\n          prev_to_date: prevTodate,\r\n          vendors_id: vendorId,\r\n          categorys: categoryId,\r\n          user_locations: location,\r\n          brand: brandName,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n\r\n        if (response.data.message === \"No_Data\") {\r\n          setOrderError(response.data.message);\r\n          setordersreport([0]);\r\n          setorderTable([0]);\r\n          setPrevordersreport([0]);\r\n        } else {\r\n          setOrderError(\"\");\r\n\r\n          setordersreport(response.data[0][0]);\r\n          setPrevordersreport(response.data[1][0]);\r\n          setorderTable(response.data[2]);\r\n          setapicall(false);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const VenderData = async () => {\r\n    let result = await axios.post(\r\n      `${process.env.REACT_APP_BASEURL}/vendors`,\r\n      {\r\n        vendor_id: \"all\",\r\n      },\r\n      {\r\n        headers: {\r\n          admin_token: token,\r\n        },\r\n      }\r\n    );\r\n\r\n    if (result.data) {\r\n      setVenderList(result.data);\r\n    }\r\n  };\r\n\r\n  const CategoryData = async () => {\r\n    let result = await axios.get(\r\n      `${process.env.REACT_APP_BASEURL}/category?category=all`\r\n    );\r\n    if (result.data) {\r\n      setCategory(result.data);\r\n    }\r\n  };\r\n\r\n  const BrandData = async () => {\r\n    let result = await axios.get(`${process.env.REACT_APP_BASEURL}/brand_list`);\r\n\r\n    if (result.data) {\r\n      setBrand(result.data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    VenderData();\r\n    CategoryData();\r\n    BrandData();\r\n  }, [apicall]);\r\n\r\n  const TimeChange = (e) => {\r\n    setFilterchange(e.target.value);\r\n    let value = Number(e.target.value);\r\n\r\n    //today---------------------------------------------------------------------------\r\n    if (value === 1) {\r\n      let frommDate = moment().format(\"YYYY-MM-DD\");\r\n      setFromDate(frommDate);\r\n\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousTodate = moment(frommDate)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodate);\r\n      setprevFromdate(previousTodate);\r\n\r\n      setpreviousStateChange(1);\r\n    }\r\n    //yesterday------------------------------------------------------------------------\r\n    if (value === 2) {\r\n      let yesterday = moment()\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n\r\n      setFromDate(yesterday);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n\r\n      let previousTodatee = moment(yesterday)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodatee);\r\n      setprevFromdate(\r\n        moment(previousTodatee)\r\n          .subtract(1, \"days\")\r\n          .startOf(\"days\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(2);\r\n    }\r\n    //last week---------------------------------------------------------------\r\n    if (value === 3) {\r\n      let lastweek = moment()\r\n        .subtract(1, \"weeks\")\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(lastweek);\r\n\r\n      setToDate(\r\n        moment()\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      let previouslastweek = moment(lastweek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastweek);\r\n      setprevFromdate(\r\n        moment(previouslastweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(3);\r\n    }\r\n    //last month---------------------------------------------------------------\r\n    if (value === 4) {\r\n      let month = moment()\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(month);\r\n      let lastMonth = moment()\r\n        .subtract(1, \"month\")\r\n        .endOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setToDate(lastMonth);\r\n      let previouslastmont = moment(lastMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastmont);\r\n      setprevFromdate(\r\n        moment(previouslastmont)\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      // setPrevDate(moment(month).subtract(1, 'month').startOf('month').format('YYYY-MM-DD'))\r\n\r\n      setpreviousStateChange(4);\r\n    }\r\n    //  last six month---------------------------------------------------------\r\n    if (value === 5) {\r\n      let sixMonth = moment()\r\n        .subtract(6, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(sixMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let lastsixMonth = moment(sixMonth)\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(lastsixMonth);\r\n      setprevFromdate(\r\n        moment(lastsixMonth)\r\n          .subtract(5, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      // setPrevDate(moment(sixMonth).subtract(6, 'month').startOf('month').format('YYYY-MM-DD'))\r\n\r\n      setpreviousStateChange(5);\r\n    }\r\n\r\n    //this week-----------------------------------------------------------------------\r\n    if (value === 8) {\r\n      let ThisWeek = moment()\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisWeek);\r\n\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthisweek = moment(ThisWeek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthisweek);\r\n      setprevFromdate(\r\n        moment(previousthisweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      // setPrevDate(moment(ThisWeek).subtract(1, 'weeks').endOf('weeks').format('YYYY-MM-DD'))\r\n      setpreviousStateChange(8);\r\n    }\r\n    if (value === 9) {\r\n      let ThisMonth = moment()\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisMonth);\r\n\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthismont = moment(ThisMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthismont);\r\n      setprevFromdate(\r\n        moment()\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(9);\r\n    }\r\n\r\n    fetchData();\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    setapicall(true);\r\n    fetchData();\r\n  };\r\n\r\n  var Order = ordersreport.order_count;\r\n  var NetSales = ordersreport.net_sales;\r\n  var AvarageOrderValue = ordersreport.avg_order_value;\r\n  var AvarageItemPerOrder = ordersreport.avg_item_per_order;\r\n\r\n  const options = {\r\n    chart: {\r\n      type: \"bar\",\r\n      borderRadius: \"5\",\r\n      borderColor: \"#335cad\",\r\n    },\r\n    title: {\r\n      text: \" Figures\",\r\n      style: { color: \"green\", fontSize: \"22px\" },\r\n      align: \"left\",\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Orders\",\r\n        data: [Order],\r\n      },\r\n      {\r\n        name: \"Net Revenue\",\r\n        data: [NetSales],\r\n      },\r\n      {\r\n        name: \"Average Order Value\",\r\n        data: [AvarageOrderValue],\r\n      },\r\n      {\r\n        name: \"Average Items Per Order\",\r\n        data: [AvarageItemPerOrder],\r\n      },\r\n    ],\r\n    xAxis: {\r\n      categories: [\r\n        \"1\",\r\n        \"3\",\r\n        \"5\",\r\n        \"7\",\r\n        \"9\",\r\n        \"11\",\r\n        \"13\",\r\n        \"15\",\r\n        \"17\",\r\n        \"19\",\r\n        \"21\",\r\n        \"23\",\r\n      ],\r\n    },\r\n    yAxis: {\r\n      categories: [\"0\", \"200\", \"400\", \"600\", \"800\", \"1000\"],\r\n    },\r\n  };\r\n\r\n  //----------------------------------------------------------------- pdf----------------------------------------------------->\r\n  const exportPDF = () => {\r\n    const unit = \"pt\";\r\n    const size = \"A4\"; // Use A1, A2, A3 or A4\r\n    const orientation = \"portrait\"; // portrait or landscape\r\n\r\n    const marginLeft = 40;\r\n\r\n    const doc = new jsPDF(orientation, unit, size);\r\n\r\n    doc.setFontSize(15);\r\n\r\n    const title = \"Order Report\";\r\n    const headers = [\r\n      [\r\n        \"Date\",\r\n        \"Order ID\",\r\n        \"Status\",\r\n        \"Customer ID\",\r\n        \"Product ID\",\r\n        \"Net Revenue\",\r\n      ],\r\n    ];\r\n\r\n    const data = (orderTable || []).map((elt) => [\r\n      elt.created_on,\r\n      elt.order_id,\r\n      elt.status,\r\n      elt.user_id,\r\n      elt.p_id,\r\n      elt.total_order_amount,\r\n    ]);\r\n\r\n    let content = {\r\n      startY: 50,\r\n      head: headers,\r\n      body: data,\r\n    };\r\n\r\n    // doc.text(headers, backgroundColor, \"pink\");\r\n    doc.text(title, marginLeft, 40);\r\n    doc.autoTable(content);\r\n    doc.Gave(\"Order Report.pdf\");\r\n    // doc.setFillColor(\"Gray\" ,100)\r\n  };\r\n\r\n  //-------------------------------------------- end pdf----------------------------------------------------------------->\r\n\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const header = [\r\n    \"Order ID\",\r\n    \"Date\",\r\n    \"Status\",\r\n    \"Customer ID\",\r\n    \"Product ID\",\r\n    \"Net Revenue\",\r\n  ];\r\n\r\n  function handleDownloadExcel() {\r\n    downloadExcel({\r\n      fileName: \"Order Report -> downloadExcel method\",\r\n      sheet: \"Order Report\",\r\n      tablePayload: {\r\n        header,\r\n        // accept two different data structures\r\n        body: orderTable,\r\n      },\r\n    });\r\n  }\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const columns = [\r\n    {\r\n      name: \"Date\",\r\n      selector: (row) => moment(row.uniquedates).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n      width: \"170px\",\r\n      center: true,\r\n    },\r\n\r\n    {\r\n      name: \"Order ID\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n      width: \"170px\",\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => row.status,\r\n      sortable: true,\r\n      width: \"170px\",\r\n    },\r\n    {\r\n      name: \"Customer ID\",\r\n      selector: (row) => row.user_id,\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Products\",\r\n      selector: (row) => row.p_id,\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Net Revenue\",\r\n      selector: (row) => Number(row.total_order_amount).toFixed(2),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n  ];\r\n\r\n\r\n\r\n  const options1 = [\r\n    (brand || []).map((item) => ({ value: `${item.brand}`, label: `${item.brand}` })),\r\n  ];\r\n\r\n  let arrr = [];\r\n\r\n  const brandHandler = (e) => {\r\n    arrr = [];\r\n    e.map((item) => {\r\n      return (\r\n        arrr.push(item.value)\r\n\r\n      )\r\n    });\r\n    setBrandName(arrr);\r\n  };\r\n\r\n\r\n  const options2 = [\r\n    (venderList || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.shop_name}`,\r\n    })),\r\n  ];\r\n\r\n  let vendorArray = [];\r\n\r\n  const VendorHandler = (e) => {\r\n    vendorArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        vendorArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setVendorId(vendorArray);\r\n  };\r\n\r\n\r\n\r\n  const options3 = [\r\n    (category || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.category_name}`,\r\n    })),\r\n  ];\r\n\r\n  let CategoryArray = [];\r\n\r\n  const categoryHandler = (e) => {\r\n    CategoryArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        CategoryArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setCategoryId(CategoryArray);\r\n  };\r\n\r\n  const options4 = [\r\n    { value: \"indore\", label: \"Indore\" },\r\n    { value: \"bhopal\", label: \"Bhopal\" },\r\n    { value: \"dhar\", label: \"Dhar\" },\r\n    { value: \"khandwa\", label: \"Khandwa\" },\r\n    { value: \"khargone\", label: \"Khargone\" },\r\n  ];\r\n  var SearchArray = [];\r\n  const SearchHandler = (e) => {\r\n    SearchArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        SearchArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setLocation(SearchArray);\r\n  };\r\n\r\n  // //-------------order---------------------------\r\n  var getorderCount = Number(ordersreport.order_count);\r\n  var getPreviousorderCount = Number(Prevordersreport.prev_order_count);\r\n  var resultCount = (\r\n    ((getorderCount - getPreviousorderCount) / getPreviousorderCount) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultCount !== \"Infinity\" ? console.log() : (resultCount = 0);\r\n\r\n  // //-----------------------Avg order --------------------------------------------------------\r\n  var getorderAvg = Number(ordersreport.avg_order_value);\r\n  var getPreviousorderAvg = Number(Prevordersreport.prev_avg_order_value);\r\n  var resultAVG = (\r\n    ((getorderAvg - getPreviousorderAvg) / getPreviousorderAvg) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultAVG !== \"Infinity\" ? console.log() : (resultAVG = 0);\r\n\r\n  // //-----------------------Avg item order count---------------------------------------\r\n\r\n  var getorderAvgItem = Number(ordersreport.avg_item_per_order);\r\n  var getPreviousorderAvgItem = Number(\r\n    Prevordersreport.prev_avg_item_per_order\r\n  );\r\n  var resultAVGITEM = (\r\n    ((getorderAvgItem - getPreviousorderAvgItem) / getPreviousorderAvgItem) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultAVGITEM !== \"Infinity\" ? console.log() : (resultAVGITEM = 0);\r\n\r\n  //  //--------------------Nets sales------------------------------------------\r\n\r\n  var getNetSales = Number(ordersreport.net_sales);\r\n  var getPreviouNetSales = Number(Prevordersreport.prev_net_sales);\r\n  var resultNetSales = (\r\n    ((getNetSales - getPreviouNetSales) / getPreviouNetSales) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultNetSales !== \"Infinity\" ? console.log() : (resultNetSales = 0);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Order Report</h2>\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\"row pb-3\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by category\"\r\n              className=\"adminselectbox\"\r\n              placeholder=\"Search by category\"\r\n              onChange={TimeChange}\r\n            >\r\n              <option>Search by Dates</option>\r\n              <option name=\"today\" value={1}>\r\n                Today\r\n              </option>\r\n              <option name=\"yesterday\" value={2}>\r\n                yesterday\r\n              </option>\r\n              <option name=\"this_week\" value={8}>\r\n                this week\r\n              </option>\r\n              <option name=\"last_week\" value={3}>\r\n                Last week\r\n              </option>\r\n              <option name=\"this_week\" value={9}>\r\n                This month\r\n              </option>\r\n              <option name=\"last_month\" value={4}>\r\n                last month\r\n              </option>\r\n              <option name=\"last_6_month\" value={5}>\r\n                last 6 month\r\n              </option>\r\n              {/* <option name=\"custom_month\" value=\"6\">custom month</option> */}\r\n              <option name=\"custom_date\" value=\"7\">\r\n                custom date\r\n              </option>\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Vendor\"\r\n              onChange={VendorHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options2[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Brand\"\r\n              onChange={brandHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options1[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Category\"\r\n              onChange={categoryHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options3[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 mt-3 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Location\"\r\n              onChange={SearchHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options4}\r\n            />\r\n          </div>\r\n\r\n          {filterchange === \"7\" ? (\r\n            <div className=\"col-md-3 col-sm-6 d-flex mt-3 aos_input\">\r\n              <div className=\"col-6  pe-2 col-sm-6 aos_input\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setFromDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-6 col-sm-6 aos_input\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setToDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : filterchange === \"6\" ? (\r\n            <div className=\"col-md-3 col-sm-6 mt-3 aos_input\">\r\n              <Input type={\"month\"} plchldr={\"Search by month\"} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"col-md-auto col-sm-6 mt-3 aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button\"}\r\n              onClick={submitHandler}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-auto col-sm-6 mt-3 aos_input\">\r\n            <DropdownButton\r\n              id=\"dropdown-variant-success\"\r\n              title=\"Download\"\r\n              variant=\"button main_button\"\r\n            >\r\n              <Dropdown.Item onClick={handleDownloadExcel}>Excel</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => exportPDF()}>Pdf</Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* upload */}\r\n\r\n        {/*  */}\r\n        {/* box */}\r\n        <div className=\"col-12 px-3\">\r\n          {/* card */}\r\n          <div className=\" row main_dashboard_row1 d-flex mb-3 \">\r\n            {/* order */}\r\n            <div className=\"card p-2 col-3 rounded-left shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <BsBagPlus className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Orders </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n\r\n                      {OrderError === \"No_Data\" ||\r\n                        ordersreport.order_count === null ||\r\n                        ordersreport.order_count === undefined ||\r\n                        ordersreport.order_count === \"\" ? (\r\n                        <h3>0</h3>\r\n                      ) : (\r\n                        <h3>{ordersreport.order_count}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultCount > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultCount}%\r\n                          </p>\r\n                        ) : resultCount < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultCount}%\r\n                          </p>\r\n                        ) : resultCount === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultCount}%\r\n                          </p>\r\n                        ) : resultCount === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultCount}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {OrderError === \"no_data\" ||\r\n                        Prevordersreport.prev_order_count === null ||\r\n                        Prevordersreport.prev_order_count === undefined ||\r\n                        Prevordersreport.prev_order_count === \"\" ? (\r\n                        <p className=\"h5\"> 0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          {Prevordersreport.prev_order_count}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* end */}\r\n            {/* avg order */}\r\n            <div className=\"card p-2 col-3 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <GiStorkDelivery className=\"text-success h1 mx-2\" />\r\n                <h5 className=\"text-success\">Average Order Value </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {OrderError === \"No_Data\" ||\r\n                        ordersreport.avg_order_value === null ||\r\n                        ordersreport.avg_order_value === undefined ||\r\n                        ordersreport.avg_order_value === \"\" ? (\r\n                        <h3>0</h3>\r\n                      ) : (\r\n                        <h3>₹{ordersreport.avg_order_value.toFixed(2)}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultAVG > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultAVG}%\r\n                          </p>\r\n                        ) : resultAVG < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultAVG}%\r\n                          </p>\r\n                        ) : resultAVG === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultAVG}%\r\n                          </p>\r\n                        ) : resultAVG === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultAVG}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {OrderError === \"no_data\" ||\r\n                        Prevordersreport.prev_avg_order_value === null ||\r\n                        Prevordersreport.prev_avg_order_value === undefined ||\r\n                        Prevordersreport.prev_avg_order_value === \"\" ? (\r\n                        <p className=\"h5\"> ₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹{Prevordersreport.prev_avg_order_value.toFixed(2)}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* refund end */}\r\n            {/* avg item */}\r\n            <div className=\"card p-2 col-3 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <BsFileBarGraph className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Average Item Per Order </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {OrderError === \"No_Data\" ||\r\n                        ordersreport.avg_item_per_order === null ||\r\n                        ordersreport.avg_item_per_order === undefined ||\r\n                        ordersreport.avg_item_per_order === \"\" ? (\r\n                        <h3>0</h3>\r\n                      ) : (\r\n                        <h3>{ordersreport.avg_item_per_order.toFixed(2)}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultAVGITEM > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultAVGITEM}%\r\n                          </p>\r\n                        ) : resultAVGITEM < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultAVGITEM}%\r\n                          </p>\r\n                        ) : resultAVG === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultAVGITEM}%\r\n                          </p>\r\n                        ) : resultAVGITEM === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultAVGITEM}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {OrderError === \"no_data\" ||\r\n                        Prevordersreport.prev_avg_item_per_order === null ||\r\n                        Prevordersreport.prev_avg_item_per_order === undefined ||\r\n                        Prevordersreport.prev_avg_item_per_order === \"\" ? (\r\n                        <p className=\"h5\"> 0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          {Prevordersreport.prev_avg_item_per_order.toFixed(2)}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/*  */}\r\n\r\n            {/*  */}\r\n            {/* net */}\r\n            <div className=\"card p-2 col-3 rounded-right shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <GiTakeMyMoney className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Net Revenue </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n\r\n                      {OrderError === \"No_Data\" ||\r\n                        ordersreport.net_sales === null ||\r\n                        ordersreport.net_sales === undefined ||\r\n                        ordersreport.net_sales === \"\" ? (\r\n                        <h3>₹0</h3>\r\n                      ) : (\r\n                        <h3>₹{ordersreport.net_sales.toFixed(2)}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultNetSales > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultNetSales}%\r\n                          </p>\r\n                        ) : resultNetSales < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultNetSales}%\r\n                          </p>\r\n                        ) : resultAVG === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultNetSales}%\r\n                          </p>\r\n                        ) : resultNetSales === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultNetSales}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {OrderError === \"no_data\" ||\r\n                        Prevordersreport.prev_net_sales === null ||\r\n                        Prevordersreport.prev_net_sales === undefined ||\r\n                        Prevordersreport.prev_net_sales === \"\" ? (\r\n                        <p className=\"h5\"> ₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹{Prevordersreport.prev_net_sales.toFixed(2)}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/*  */}\r\n          </div>\r\n        </div>\r\n        {/*  */}\r\n\r\n        {/* graph */}\r\n        {ordersreport.order_count ||\r\n          ordersreport.avg_order_value ||\r\n          ordersreport.avg_item_per_order ||\r\n          ordersreport.net_sales ? (\r\n          <HighchartsReact highcharts={Highcharts} options={options} />\r\n        ) : null}\r\n\r\n        {/*  */}\r\n\r\n        {/* datatable */}\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={orderTable}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body orderreport_table\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrderReport;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\product.js",["485"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { BsBagPlus } from \"react-icons/bs\";\r\nimport { AiOutlineArrowRight } from \"react-icons/ai\";\r\nimport { GiTakeMyMoney, GiSellCard } from \"react-icons/gi\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment/moment\";\r\nimport Select from \"react-select\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { downloadExcel } from \"react-export-table-to-excel\";\r\n\r\nconst ProductReport = () => {\r\n  // var NetSales = [];\r\n  // var Order = [];\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [filterchange, setFilterchange] = useState(\"\");\r\n\r\n  const [getProduct, setGetProduct] = useState([]);\r\n  const [tableProduct, setGetTableProduct] = useState([]);\r\n\r\n  const [fromDate, setFromDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [toDate, setToDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n\r\n  const [PrevProductreport, setPrevProductreport] = useState([]);\r\n\r\n  const [previousStateChange, setpreviousStateChange] = useState(\" \");\r\n  const [prevFromdate, setprevFromdate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n  const [prevTodate, setprevTodate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n\r\n  const [apicall, setapicall] = useState(false);\r\n  const [ProductError, setProductError] = useState(\"\");\r\n  const [venderList, setVenderList] = useState([]);\r\n  const [vendorId, setVendorId] = useState(\"\");\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryId, setCategoryId] = useState(\"\");\r\n  const [brand, setBrand] = useState([]);\r\n  const [brandName, setBrandName] = useState([]);\r\n  const [location, setLocation] = useState([]);\r\n\r\n  const TimeChange = (e) => {\r\n    setFilterchange(e.target.value);\r\n\r\n    let value = Number(e.target.value);\r\n    //today---------------------------------------------------------------------------\r\n    if (value === 1) {\r\n      let frommDate = moment().format(\"YYYY-MM-DD\");\r\n      setFromDate(frommDate);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousTodate = moment(frommDate)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodate);\r\n      setprevFromdate(previousTodate);\r\n      setpreviousStateChange(1);\r\n    }\r\n    //yesterday------------------------------------------------------------------------\r\n    if (value === 2) {\r\n      let yesterday = moment()\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n\r\n      setFromDate(yesterday);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n\r\n      let previousTodatee = moment(yesterday)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodatee);\r\n      setprevFromdate(\r\n        moment(previousTodatee)\r\n          .subtract(1, \"days\")\r\n          .startOf(\"days\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(2);\r\n    }\r\n    //last week---------------------------------------------------------------\r\n    if (value === 3) {\r\n      let lastweek = moment()\r\n        .subtract(1, \"weeks\")\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(lastweek);\r\n\r\n      setToDate(\r\n        moment()\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      let previouslastweek = moment(lastweek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastweek);\r\n      setprevFromdate(\r\n        moment(previouslastweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(3);\r\n    }\r\n    //last month---------------------------------------------------------------\r\n    if (value === 4) {\r\n      let month = moment()\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(month);\r\n      let lastMonth = moment()\r\n        .subtract(1, \"month\")\r\n        .endOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setToDate(lastMonth);\r\n      let previouslastmont = moment(lastMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastmont);\r\n      setprevFromdate(\r\n        moment(previouslastmont)\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(4);\r\n    }\r\n    //  last six month---------------------------------------------------------\r\n    if (value === 5) {\r\n      let sixMonth = moment()\r\n        .subtract(6, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(sixMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let lastsixMonth = moment(sixMonth)\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(lastsixMonth);\r\n      setprevFromdate(\r\n        moment(lastsixMonth)\r\n          .subtract(5, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(5);\r\n    }\r\n\r\n    //this week-----------------------------------------------------------------------\r\n    if (value === 8) {\r\n      let ThisWeek = moment()\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisWeek);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthisweek = moment(ThisWeek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthisweek);\r\n      setprevFromdate(\r\n        moment(previousthisweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(8);\r\n    }\r\n    if (value === 9) {\r\n      let ThisMonth = moment()\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthismont = moment(ThisMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthismont);\r\n      setprevFromdate(\r\n        moment()\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(9);\r\n    }\r\n    fetchData();\r\n  };\r\n\r\n  const fetchData = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/products_report`,\r\n        {\r\n          from_date: fromDate,\r\n          to_date: toDate,\r\n          prev_from_date: prevFromdate,\r\n          prev_to_date: prevTodate,\r\n          vendors_id: vendorId,\r\n          categorys: categoryId,\r\n          user_locations: location,\r\n          brand: brandName,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.message === \"No_Data\") {\r\n          setProductError(response.data.message);\r\n          setGetProduct([0]);\r\n          setGetTableProduct([0]);\r\n          setPrevProductreport([0]);\r\n        } else {\r\n          setProductError(\"\");\r\n          setGetProduct(response.data[0][0]);\r\n          setPrevProductreport(response.data[1][0]);\r\n          setGetTableProduct(response.data[2]);\r\n          setapicall(false);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const VenderData = async () => {\r\n    let result = await axios.post(\r\n      `${process.env.REACT_APP_BASEURL}/vendors`,\r\n      {\r\n        vendor_id: \"all\",\r\n      },\r\n      {\r\n        headers: {\r\n          admin_token: token,\r\n        },\r\n      }\r\n    );\r\n    if (result.data) {\r\n      setVenderList(result.data);\r\n    }\r\n  };\r\n\r\n  const CategoryData = async () => {\r\n    let result = await axios.get(\r\n      `${process.env.REACT_APP_BASEURL}/category?category=all`\r\n    );\r\n    if (result.data) {\r\n      setCategory(result.data);\r\n    }\r\n  };\r\n\r\n  const BrandData = async () => {\r\n    let result = await axios.get(`${process.env.REACT_APP_BASEURL}/brand_list`);\r\n    if (result.data) {\r\n      setBrand(result.data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    VenderData();\r\n    CategoryData();\r\n    BrandData();\r\n  }, [apicall]);\r\n\r\n  const submitHandler = () => {\r\n    setapicall(true);\r\n    fetchData();\r\n  };\r\n\r\n  var ItemSold = getProduct.product_count;\r\n  var NetSales = getProduct.net_sales;\r\n  var Order = getProduct.order_count;\r\n\r\n  const options = {\r\n    chart: {\r\n      type: \"bar\",\r\n      borderRadius: \"5\",\r\n      borderColor: \"#335cad\",\r\n    },\r\n    title: {\r\n      text: \" Figures\",\r\n      style: { color: \"green\", fontSize: \"22px\" },\r\n      align: \"left\",\r\n    },\r\n\r\n    series: [\r\n      {\r\n        name: \"Item Sold\",\r\n        data: [ItemSold],\r\n      },\r\n      {\r\n        name: \"Orders\",\r\n        data: [Order],\r\n      },\r\n      {\r\n        name: \"Net Sales\",\r\n        data: [NetSales],\r\n      },\r\n    ],\r\n    xAxis: {\r\n      categories: [\r\n        \"1\",\r\n        \"3\",\r\n        \"5\",\r\n        \"7\",\r\n        \"9\",\r\n        \"11\",\r\n        \"13\",\r\n        \"15\",\r\n        \"17\",\r\n        \"19\",\r\n        \"21\",\r\n        \"23\",\r\n      ],\r\n    },\r\n    yAxis: {\r\n      categories: [\"0\", \"200\", \"400\", \"600\", \"800\", \"1000\"],\r\n    },\r\n  };\r\n\r\n  //----------------------------------------------------------------- pdf----------------------------------------------------->\r\n  const exportPDF = () => {\r\n    const unit = \"pt\";\r\n    const size = \"A4\"; // Use A1, A2, A3 or A4\r\n    const orientation = \"portrait\"; // portrait or landscape\r\n\r\n    const marginLeft = 40;\r\n\r\n    const doc = new jsPDF(orientation, unit, size);\r\n\r\n    doc.setFontSize(15);\r\n\r\n    const title = \"Product Report\";\r\n    const headers = [\r\n      [\r\n        \"Product ID\",\r\n        \"Product Name\",\r\n        \"Category\",\r\n        \"Net Revenue\",\r\n        \"Orders\",\r\n        \"Stock\",\r\n      ],\r\n    ];\r\n\r\n    const data = (tableProduct || []).map((elt) => [\r\n      elt.product_id,\r\n      elt.product_name,\r\n      elt.category_name,\r\n      elt.net_sales,\r\n      elt.order_count,\r\n      elt.product_count,\r\n    ]);\r\n\r\n    let content = {\r\n      startY: 50,\r\n      head: headers,\r\n      body: data,\r\n      blankrows: \"No Record\",\r\n    };\r\n\r\n    // doc.text(headers, backgroundColor, \"pink\");\r\n    doc.text(title, marginLeft, 40);\r\n    doc.autoTable(content);\r\n    doc.save(\"Product Report.pdf\");\r\n  };\r\n\r\n  //-------------------------------------------- end pdf----------------------------------------------------------------->\r\n\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const header = [\r\n    \"Product ID\",\r\n    \"Order\",\r\n    \"Stock\",\r\n    \"Net Revenue\",\r\n    \"Product Name\",\r\n    \"Category\",\r\n  ];\r\n\r\n  function handleDownloadExcel() {\r\n    downloadExcel({\r\n      fileName: \"Product Report -> downloadExcel method\",\r\n      sheet: \"Product Report\",\r\n      tablePayload: {\r\n        header,\r\n        // accept two different data structures\r\n        body: tableProduct,\r\n        blankrows: \"No Record\",\r\n      },\r\n    });\r\n  }\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Product ID\",\r\n      selector: (row) => row.product_id,\r\n      sortable: true,\r\n      width: \"150px\",\r\n    },\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) =>\r\n        row.product_name == null ? \"No Record\" : row.product_name,\r\n      sortable: true,\r\n      width: \"160px\",\r\n    },\r\n\r\n    {\r\n      name: \"Category\",\r\n      selector: (row) =>\r\n        row.category_name == null ? \"No Record\" : row.category_name,\r\n      sortable: true,\r\n      width: \"190px\",\r\n    },\r\n    {\r\n      name: \"Net Revenue\",\r\n      selector: (row) =>\r\n        row.net_sales == null ? \"No Record\" : Number(row.net_sales).toFixed(2),\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n\r\n    {\r\n      name: \"Orders\",\r\n      selector: (row) =>\r\n        row.order_count == null ? \"No Record\" : row.order_count,\r\n      sortable: true,\r\n      width: \"150px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n    {\r\n      name: \"product count\",\r\n      selector: (row) =>\r\n        row.product_count == null ? \"No Record\" : row.product_count,\r\n      sortable: true,\r\n      width: \"140px\",\r\n      center: true,\r\n      style: {\r\n        paddingRight: \"32px\",\r\n        paddingLeft: \"0px\",\r\n      },\r\n    },\r\n  ];\r\n\r\n  const options1 = [\r\n    (brand || []).map((item) => ({ value: `${item.brand}`, label: `${item.brand}` })),\r\n  ];\r\n\r\n  let arrr = [];\r\n\r\n  const brandHandler = (e) => {\r\n    arrr = [];\r\n    e.map((item) => {\r\n      return (arrr.push(item.value))\r\n\r\n    });\r\n    setBrandName(arrr);\r\n  };\r\n\r\n  const options2 = [\r\n    (venderList || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.shop_name}`,\r\n    })),\r\n  ];\r\n\r\n  let vendorArray = [];\r\n\r\n  const VendorHandler = (e) => {\r\n    vendorArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        vendorArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setVendorId(vendorArray);\r\n  };\r\n\r\n  const options3 = [\r\n    (category || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.category_name}`,\r\n    })),\r\n  ];\r\n\r\n  let CategoryArray = [];\r\n\r\n  const categoryHandler = (e) => {\r\n    CategoryArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        CategoryArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setCategoryId(CategoryArray);\r\n  };\r\n\r\n  const options4 = [\r\n    { value: \"indore\", label: \"Indore\" },\r\n    { value: \"bhopal\", label: \"Bhopal\" },\r\n    { value: \"dhar\", label: \"Dhar\" },\r\n    { value: \"khandwa\", label: \"Khandwa\" },\r\n    { value: \"khargone\", label: \"Khargone\" },\r\n  ];\r\n  var SearchArray = [];\r\n  const SearchHandler = (e) => {\r\n    SearchArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        SearchArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setLocation(SearchArray);\r\n  };\r\n\r\n  // // //-------------Item sold---------------------------\r\n  var getProductCount = Number(getProduct.product_count);\r\n\r\n  var getPreviousProductCount = Number(PrevProductreport.prev_order_count);\r\n\r\n  var resultCount = (\r\n    ((getProductCount - getPreviousProductCount) / getPreviousProductCount) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultCount !== \"Infinity\" ? console.log() : (resultCount = 0);\r\n\r\n  // // //-----------------------Net sales--------------------------------------------------------\r\n  var getNetSold = Number(getProduct.net_sales);\r\n\r\n  var getPreviousgetNetSold = Number(PrevProductreport.prev_net_sales);\r\n\r\n  var resultNetSold = (\r\n    ((getNetSold - getPreviousgetNetSold) / getPreviousgetNetSold) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultNetSold !== \"Infinity\" ? console.log() : (resultNetSold = 0);\r\n\r\n  // // //-----------------------order count---------------------------------------\r\n  var getorderCount = Number(getProduct.order_count);\r\n\r\n  var getPreviousorderCount = Number(PrevProductreport.prev_order_count);\r\n\r\n  var resultOrderCount = (\r\n    ((getorderCount - getPreviousorderCount) / getPreviousorderCount) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultOrderCount !== \"Infinity\" ? console.log() : (resultOrderCount = 0);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Product Report</h2>\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\"row pb-3\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by category\"\r\n              className=\"adminselectbox\"\r\n              placeholder=\"Search by category\"\r\n              onChange={TimeChange}\r\n            >\r\n              <option>Search by Dates</option>\r\n              <option name=\"today\" value={1}>\r\n                Today\r\n              </option>\r\n              <option name=\"yesterday\" value={2}>\r\n                yesterday\r\n              </option>\r\n              <option name=\"this_week\" value={8}>\r\n                this week\r\n              </option>\r\n              <option name=\"last_week\" value={3}>\r\n                Last week\r\n              </option>\r\n              <option name=\"this_week\" value={9}>\r\n                This month\r\n              </option>\r\n              <option name=\"last_month\" value={4}>\r\n                last month\r\n              </option>\r\n              <option name=\"last_6_month\" value={5}>\r\n                last 6 month\r\n              </option>\r\n              <option name=\"custom_date\" value=\"7\">\r\n                custom date\r\n              </option>\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Vendor\"\r\n              onChange={VendorHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options2[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Brand\"\r\n              onChange={brandHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options1[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Category\"\r\n              onChange={categoryHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options3[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 mt-3 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Location\"\r\n              onChange={SearchHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options4}\r\n            />\r\n          </div>\r\n\r\n          {filterchange === \"7\" ? (\r\n            <div className=\"col-md-3 col-sm-6 mt-3 d-flex aos_input\">\r\n              <div className=\"col-6  aos_input\">\r\n                <input\r\n                  type={\"date\"}\r\n                  plchldr={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setFromDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-6 aos_input\">\r\n                <input\r\n                  type={\"date\"}\r\n                  plchldr={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setToDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : filterchange === \"6\" ? (\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <Input type={\"month\"} plchldr={\"Search by month\"} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"col-md-auto col-sm-6 mt-3 aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button\"}\r\n              onClick={submitHandler}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-auto col-sm-6 mt-3 aos_input\">\r\n            <DropdownButton\r\n              id=\"dropdown-variant-success\"\r\n              title=\"Download\"\r\n              variant=\"button main_button\"\r\n            >\r\n              <Dropdown.Item onClick={handleDownloadExcel}>Excel</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => exportPDF()}>Pdf</Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* upload */}\r\n\r\n        {/*  */}\r\n        {/* box */}\r\n        <div className=\"col-12 px-3\">\r\n          {/* card */}\r\n          <div className=\" row main_dashboard_row1 d-flex mb-3 \">\r\n            {/* item sold */}\r\n            <div className=\"card py-2 px-4 col-4 rounded-left shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <GiSellCard className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Item Sold</h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      <h3>\r\n\r\n                        {ProductError === \"No_Data\" ||\r\n                          getProduct.product_count == null ||\r\n                          getProduct.product_count === undefined ||\r\n                          getProduct.product_count === \"\" ? (\r\n                          <h3> 0</h3>\r\n                        ) : (\r\n                          <h3>{getProduct.product_count}</h3>\r\n                        )}\r\n                      </h3>\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultCount > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultCount}%\r\n                          </p>\r\n                        ) : resultCount < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultCount}%\r\n                          </p>\r\n                        ) : resultCount === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultCount}%\r\n                          </p>\r\n                        ) : resultCount === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultCount}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {ProductError === \"no_data\" ||\r\n                        PrevProductreport.prev_product_count == null ||\r\n                        PrevProductreport.prev_product_count === undefined ||\r\n                        PrevProductreport.prev_product_count === \"\" ? (\r\n                        <p className=\"h5\"> 0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          {PrevProductreport.prev_product_count}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* end */}\r\n            {/* net */}\r\n            <div className=\"card py-2 px-4 col-4 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <GiTakeMyMoney className=\"text-success h1 mx-2\" />\r\n                <h5 className=\"text-success\">Net Sales </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {ProductError === \"No_Data\" ||\r\n                        getProduct.net_sales == null ||\r\n                        getProduct.net_sales === undefined ||\r\n                        getProduct.net_sales === \"\" ? (\r\n                        <h3>₹0</h3>\r\n                      ) : (\r\n                        <h3>₹{getProduct.net_sales.toFixed(2)}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultNetSold > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultNetSold}%\r\n                          </p>\r\n                        ) : resultNetSold < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultNetSold}%\r\n                          </p>\r\n                        ) : resultNetSold === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultNetSold}%\r\n                          </p>\r\n                        ) : resultNetSold === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultNetSold}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {ProductError === \"no_data\" ||\r\n                        PrevProductreport.prev_net_sales === null ||\r\n                        PrevProductreport.prev_net_sales === undefined ||\r\n                        PrevProductreport.prev_net_sales === \"\" ? (\r\n                        <p className=\"h5\"> ₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹{PrevProductreport.prev_net_sales.toFixed(2)}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* net end */}\r\n            {/* order */}\r\n            <div className=\"card py-2 px-4 col-4 rounded-right shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <BsBagPlus className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Orders </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {ProductError === \"No_Data\" ||\r\n                        getProduct.order_count == null ||\r\n                        getProduct.order_count === undefined ||\r\n                        getProduct.order_count === \"\" ? (\r\n                        <h3>0</h3>\r\n                      ) : (\r\n                        <h3>{getProduct.order_count}</h3>\r\n                      )}\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultOrderCount > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultOrderCount}%\r\n                          </p>\r\n                        ) : resultOrderCount < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultOrderCount}%\r\n                          </p>\r\n                        ) : resultOrderCount === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultOrderCount}%\r\n                          </p>\r\n                        ) : resultOrderCount === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultOrderCount}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {ProductError === \"no_data\" ||\r\n                        PrevProductreport.prev_order_count == null ||\r\n                        PrevProductreport.prev_order_count === undefined ||\r\n                        PrevProductreport.prev_order_count === \"\" ? (\r\n                        <p className=\"h5\"> 0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          {PrevProductreport.prev_order_count}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/*  */}\r\n\r\n            {/*  */}\r\n          </div>\r\n        </div>\r\n        {/*  */}\r\n\r\n        {/* graph */}\r\n        {getProduct.product_count ||\r\n          getProduct.net_sales ||\r\n          getProduct.order_count ? (\r\n          <HighchartsReact highcharts={Highcharts} options={options} />\r\n        ) : null}\r\n\r\n        {/*  */}\r\n\r\n        {/* datatable */}\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={tableProduct}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body productreport_table\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductReport;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\coupon.js",["486"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { AiOutlineArrowRight } from \"react-icons/ai\";\r\nimport { GiStorkDelivery, GiMoneyStack } from \"react-icons/gi\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment/moment\";\r\nimport Select from \"react-select\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { downloadExcel } from \"react-export-table-to-excel\";\r\n\r\nconst CouponReport = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [filterchange, setFilterchange] = useState(\"\");\r\n\r\n  const [getCoupon, setGetCoupon] = useState([]);\r\n\r\n  const [fromDate, setFromDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [toDate, setToDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n\r\n  const [previousStateChange, setpreviousStateChange] = useState(\" \");\r\n  const [PrevCouponreport, setPrevCouponreport] = useState([]);\r\n  const [prevFromdate, setprevFromdate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n  const [prevTodate, setprevTodate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n\r\n  const [apicall, setapicall] = useState(false);\r\n  const [tabledate, setTabledata] = useState([]);\r\n  const [couponError, setCouponError] = useState(\"\");\r\n  const [venderList, setVenderList] = useState([]);\r\n  const [vendorId, setVendorId] = useState(\"\");\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryId, setCategoryId] = useState(\"\");\r\n  const [brand, setBrand] = useState([]);\r\n  const [brandName, setBrandName] = useState([]);\r\n  const [location, setLocation] = useState([]);\r\n\r\n\r\n  const TimeChange = (e) => {\r\n    setFilterchange(e.target.value);\r\n\r\n    let value = Number(e.target.value);\r\n    if (value === 1) {\r\n      let frommDate = moment().format(\"YYYY-MM-DD\");\r\n      setFromDate(frommDate);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousTodate = moment(frommDate)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodate);\r\n      setprevFromdate(previousTodate);\r\n\r\n      setpreviousStateChange(1);\r\n    }\r\n    //yesterday------------------------------------------------------------------------\r\n    if (value === 2) {\r\n      let yesterday = moment()\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n\r\n      setFromDate(yesterday);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n\r\n      let previousTodatee = moment(yesterday)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodatee);\r\n      setprevFromdate(\r\n        moment(previousTodatee)\r\n          .subtract(1, \"days\")\r\n          .startOf(\"days\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(2);\r\n    }\r\n    //last week---------------------------------------------------------------\r\n    if (value === 3) {\r\n      let lastweek = moment()\r\n        .subtract(1, \"weeks\")\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(lastweek);\r\n\r\n      setToDate(\r\n        moment()\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      let previouslastweek = moment(lastweek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastweek);\r\n      setprevFromdate(\r\n        moment(previouslastweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(3);\r\n    }\r\n    //last month---------------------------------------------------------------\r\n    if (value === 4) {\r\n      let month = moment()\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(month);\r\n      let lastMonth = moment()\r\n        .subtract(1, \"month\")\r\n        .endOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setToDate(lastMonth);\r\n      let previouslastmont = moment(lastMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastmont);\r\n      setprevFromdate(\r\n        moment(previouslastmont)\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(4);\r\n    }\r\n    //  last six month---------------------------------------------------------\r\n    if (value === 5) {\r\n      let sixMonth = moment()\r\n        .subtract(6, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(sixMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let lastsixMonth = moment(sixMonth)\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(lastsixMonth);\r\n      setprevFromdate(\r\n        moment(lastsixMonth)\r\n          .subtract(5, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(5);\r\n    }\r\n\r\n    //this week-----------------------------------------------------------------------\r\n    if (value === 8) {\r\n      let ThisWeek = moment()\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisWeek);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthisweek = moment(ThisWeek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthisweek);\r\n      setprevFromdate(\r\n        moment(previousthisweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(8);\r\n    }\r\n    if (value === 9) {\r\n      let ThisMonth = moment()\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthismont = moment(ThisMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthismont);\r\n      setprevFromdate(\r\n        moment()\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(9);\r\n    }\r\n    fetchData();\r\n  };\r\n  const fetchData = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/coupons_report`,\r\n        {\r\n          from_date: fromDate,\r\n          to_date: toDate,\r\n          prev_from_date: prevFromdate,\r\n          prev_to_date: prevTodate,\r\n          vendors_id: vendorId,\r\n          categorys: categoryId,\r\n          user_locations: location,\r\n          brand: brandName,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.message === \"no_data\") {\r\n          setCouponError(response.data.message);\r\n\r\n          setGetCoupon([0]);\r\n          setTabledata([0]);\r\n          setPrevCouponreport([0]);\r\n        } else {\r\n          setCouponError(\"\");\r\n          setapicall(false);\r\n          setGetCoupon(response.data[0]);\r\n          setPrevCouponreport(response.data[1]);\r\n          setTabledata(response.data[2]);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const VenderData = async () => {\r\n    let result = await axios.post(\r\n      `${process.env.REACT_APP_BASEURL}/vendors`,\r\n      {\r\n        vendor_id: \"all\",\r\n      },\r\n      {\r\n        headers: {\r\n          admin_token: token,\r\n        },\r\n      }\r\n    );\r\n    if (result.data) {\r\n      setVenderList(result.data);\r\n    }\r\n  };\r\n  const CategoryData = async () => {\r\n    let result = await axios.get(\r\n      `${process.env.REACT_APP_BASEURL}/category?category=all`\r\n    );\r\n    if (result.data) {\r\n      setCategory(result.data);\r\n    }\r\n  };\r\n\r\n  const BrandData = async () => {\r\n    let result = await axios.get(`${process.env.REACT_APP_BASEURL}/brand_list`);\r\n\r\n    if (result.data) {\r\n      setBrand(result.data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    VenderData();\r\n    CategoryData();\r\n    BrandData();\r\n  }, [apicall]);\r\n\r\n  const submitHandler = () => {\r\n    setapicall(true);\r\n    fetchData();\r\n  };\r\n\r\n  var OrderCount = getCoupon.orders_count;\r\n  var DiscountAmmount = getCoupon.discount_amount;\r\n\r\n  const options = {\r\n    chart: {\r\n      type: \"bar\",\r\n      borderRadius: \"5\",\r\n      borderColor: \"#335cad\",\r\n    },\r\n    title: {\r\n      text: \" Figures\",\r\n      style: { color: \"green\", fontSize: \"22px\" },\r\n      align: \"left\",\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Discounted Orders\",\r\n        data: [OrderCount],\r\n      },\r\n      {\r\n        name: \"Amount\",\r\n        data: [DiscountAmmount],\r\n      },\r\n    ],\r\n    xAxis: {\r\n      categories: [],\r\n    },\r\n    yAxis: {\r\n      categories: [],\r\n    },\r\n  };\r\n\r\n  //----------------------------------------------------------------- pdf----------------------------------------------------->\r\n  const exportPDF = () => {\r\n    const unit = \"pt\";\r\n    const size = \"A4\"; // Use A1, A2, A3 or A4\r\n    const orientation = \"portrait\"; // portrait or landscape\r\n\r\n    const marginLeft = 40;\r\n\r\n    const doc = new jsPDF(orientation, unit, size);\r\n\r\n    doc.setFontSize(15);\r\n\r\n    const title = \"Coupon Report\";\r\n    const headers = [\r\n      [\r\n        \" Discount Coupon\",\r\n        \"Amount Discounted\",\r\n        \"Orders\",\r\n        \"Created\",\r\n        \"Coupon Code\",\r\n      ],\r\n    ];\r\n\r\n    const data = (tabledate || []).map((elt) => [\r\n      elt.discount_coupon,\r\n      elt.amount_discounted,\r\n      elt.order_count,\r\n      elt.created_date,\r\n      elt.coupons_code,\r\n    ]);\r\n\r\n    let content = {\r\n      startY: 50,\r\n      head: headers,\r\n      body: data,\r\n    };\r\n\r\n    doc.text(title, marginLeft, 40);\r\n    doc.autoTable(content);\r\n    doc.save(\"Coupon Report.pdf\");\r\n  };\r\n\r\n  //-------------------------------------------- end pdf----------------------------------------------------------------->\r\n\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const header = [\r\n    \" Discount Coupon\",\r\n    \"Orders\",\r\n    \"Coupon Code\",\r\n    \"Amount Discounted\",\r\n    \"Created\",\r\n  ];\r\n\r\n  function handleDownloadExcel() {\r\n    downloadExcel({\r\n      fileName: \"Coupon Report -> downloadExcel method\",\r\n      sheet: \"Coupon Report\",\r\n      tablePayload: {\r\n        header,\r\n        // accept two different data structures\r\n        body: tabledate,\r\n      },\r\n    });\r\n  }\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const columns = [\r\n    {\r\n      name: \"Coupon Code\",\r\n      selector: (row) => row.coupons_code,\r\n      sortable: true,\r\n      width: \"260px\",\r\n    },\r\n    {\r\n      name: \" Discount Coupon\",\r\n      selector: (row) => row.discount_coupon,\r\n      sortable: true,\r\n      width: \"260px\",\r\n    },\r\n    {\r\n      name: \"Amount Discounted\",\r\n      selector: (row) => Number(row.amount_discounted).toFixed(2),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Created\",\r\n      selector: (row) => row.created_date,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Orders\",\r\n      selector: (row) => row.order_count,\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  const options1 = [\r\n    (brand || []).map((item) => ({ value: `${item.brand}`, label: `${item.brand}` })),\r\n  ];\r\n\r\n  let arrr = [];\r\n\r\n  const brandHandler = (e) => {\r\n    arrr = [];\r\n    e.map((item) => {\r\n      return (arrr.push(item.value))\r\n\r\n    });\r\n    setBrandName(arrr);\r\n  };\r\n\r\n  const options2 = [\r\n    (venderList || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.shop_name}`,\r\n    })),\r\n  ];\r\n\r\n  let vendorArray = [];\r\n\r\n  const VendorHandler = (e) => {\r\n    vendorArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        vendorArray.push(item.value)\r\n      )\r\n\r\n    });\r\n    setVendorId(vendorArray);\r\n  };\r\n  const options3 = [\r\n    (category || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.category_name}`,\r\n    })),\r\n  ];\r\n\r\n  let CategoryArray = [];\r\n\r\n  const categoryHandler = (e) => {\r\n    CategoryArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        CategoryArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setCategoryId(CategoryArray);\r\n  };\r\n\r\n  const options4 = [\r\n    { value: \"indore\", label: \"Indore\" },\r\n    { value: \"bhopal\", label: \"Bhopal\" },\r\n    { value: \"dhar\", label: \"Dhar\" },\r\n    { value: \"khandwa\", label: \"Khandwa\" },\r\n    { value: \"khargone\", label: \"Khargone\" },\r\n  ];\r\n  var SearchArray = [];\r\n  const SearchHandler = (e) => {\r\n    SearchArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        SearchArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setLocation(SearchArray);\r\n  };\r\n\r\n  // // //-------------Discount Ammount---------------------------\r\n  var getDiscountAmmount = Number(getCoupon.discount_amount);\r\n\r\n  var getPreviousDiscountAmmount = Number(\r\n    PrevCouponreport.prev_discount_amount\r\n  );\r\n\r\n  var resultAmmount = (\r\n    ((getDiscountAmmount - getPreviousDiscountAmmount) /\r\n      getPreviousDiscountAmmount) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultAmmount !== \"Infinity\" ? console.log() : (resultAmmount = 0);\r\n\r\n  // // // //----------------------Discount Order--------------------------------------------------------\r\n  var getDiscountOrder = Number(getCoupon.orders_count);\r\n\r\n  var getPreviousDiscountOrder = Number(PrevCouponreport.prev_orders_count);\r\n\r\n  var resultOrder = (\r\n    ((getDiscountOrder - getPreviousDiscountOrder) / getPreviousDiscountOrder) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultOrder !== \"Infinity\" ? console.log() : (resultOrder = 0);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Coupon Report</h2>\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\"row pb-3\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by category\"\r\n              className=\"adminselectbox\"\r\n              placeholder=\"Search by category\"\r\n              onChange={TimeChange}\r\n            >\r\n              <option>Search by Dates</option>\r\n              <option name=\"today\" value={1}>\r\n                Today\r\n              </option>\r\n              <option name=\"yesterday\" value={2}>\r\n                yesterday\r\n              </option>\r\n              <option name=\"this_week\" value={8}>\r\n                this week\r\n              </option>\r\n              <option name=\"last_week\" value={3}>\r\n                Last week\r\n              </option>\r\n              <option name=\"this_week\" value={9}>\r\n                This month\r\n              </option>\r\n              <option name=\"last_month\" value={4}>\r\n                last month\r\n              </option>\r\n              <option name=\"last_6_month\" value={5}>\r\n                last 6 month\r\n              </option>\r\n              <option name=\"custom_date\" value=\"7\">\r\n                custom date\r\n              </option>\r\n            </Form.Select>\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Vendor\"\r\n              onChange={VendorHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options2[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Brand\"\r\n              onChange={brandHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options1[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Category\"\r\n              onChange={categoryHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options3[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 mt-2 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Location\"\r\n              onChange={SearchHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options4}\r\n            />\r\n          </div>\r\n\r\n          {filterchange === \"7\" ? (\r\n            <div className=\"col-md-3 col-sm-6 d-flex mt-2 aos_input\">\r\n              <div className=\"col-6 ps-2\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setFromDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-6 ps-2\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setToDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : filterchange === \"6\" ? (\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <Input type={\"month\"} plchldr={\"Search by month\"} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"col-md-auto col-sm-6 mt-2  aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button\"}\r\n              onClick={submitHandler}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-auto col-sm-6 mt-2 aos_input\">\r\n            <DropdownButton\r\n              id=\"dropdown-variant-success\"\r\n              title=\"Download\"\r\n              variant=\"button main_button\"\r\n            >\r\n              <Dropdown.Item onClick={handleDownloadExcel}>Excel</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => exportPDF()}>Pdf</Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n        {/* upload */}\r\n\r\n        {/*  */}\r\n        {/* box */}\r\n        <div className=\"col-12 px-3\">\r\n          {/* card */}\r\n          <div className=\" row main_dashboard_row1 d-flex mb-3 \">\r\n            {/* discount order */}\r\n            <div className=\"card p-2 col-6 rounded-left shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <GiStorkDelivery className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Discounted Orders </h5>\r\n              </div>\r\n              <div className=\"row mt-3 px-2\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {couponError === \"no_data\" ||\r\n                        getCoupon.orders_count == null ||\r\n                        getCoupon.orders_count === undefined ? (\r\n                        <h3>0</h3>\r\n                      ) : (\r\n                        <h3>{getCoupon.orders_count}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultOrder > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultOrder}%\r\n                          </p>\r\n                        ) : resultOrder < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultOrder}%\r\n                          </p>\r\n                        ) : resultOrder === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultOrder}%\r\n                          </p>\r\n                        ) : resultOrder === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultOrder}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {couponError === \"no_data\" ||\r\n                        PrevCouponreport.prev_orders_count === null ||\r\n                        PrevCouponreport.prev_orders_count === undefined ||\r\n                        PrevCouponreport.prev_orders_count === \"\" ? (\r\n                        <p className=\"h5\"> 0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          {PrevCouponreport.prev_orders_count}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* end */}\r\n            {/* amt */}\r\n            <div className=\"card p-2 col-6 rounded-right shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <GiMoneyStack className=\"text-success h1 mx-2\" />\r\n                <h5 className=\"text-success\">Amount </h5>\r\n              </div>\r\n              <div className=\"row mt-3 px-2\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {couponError === \"no_data\" ||\r\n                        getCoupon.discount_amount === null ||\r\n                        getCoupon.discount_amount === undefined ||\r\n                        getCoupon.discount_amount === \"\" ? (\r\n                        <h3>₹0</h3>\r\n                      ) : (\r\n                        <h3>{getCoupon.discount_amount.toFixed(2)}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n                        {resultAmmount > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultAmmount}%\r\n                          </p>\r\n                        ) : resultAmmount < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultAmmount}%\r\n                          </p>\r\n                        ) : resultAmmount === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultAmmount}%\r\n                          </p>\r\n                        ) : resultAmmount === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultAmmount}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {couponError === \"no_data\" ||\r\n                        PrevCouponreport.prev_discount_amount === null ||\r\n                        PrevCouponreport.prev_discount_amount === undefined ||\r\n                        PrevCouponreport.prev_discount_amount === \"\" ? (\r\n                        <p className=\"h5\"> ₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹{PrevCouponreport.prev_discount_amount.toFixed(2)}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* amt end */}\r\n          </div>\r\n        </div>\r\n        {/*  */}\r\n\r\n        {/* graph */}\r\n\r\n        {getCoupon.discount_amount !== undefined ||\r\n          getCoupon.orders_count !== undefined ? (\r\n          <HighchartsReact highcharts={Highcharts} options={options} />\r\n        ) : null}\r\n\r\n        {/*  */}\r\n\r\n        {/* datatable */}\r\n\r\n        {/* datatable */}\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={tabledate}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body couponreport_table\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CouponReport;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\store.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\customer.js",["487"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport axios from \"axios\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { downloadExcel } from \"react-export-table-to-excel\";\r\nimport moment from \"moment\";\r\n\r\nconst CustomerReport = () => {\r\n  //----------------------------------------------------------------- pdf----------------------------------------------------->\r\n  const exportPDF = () => {\r\n    const unit = \"pt\";\r\n    const size = \"A3\"; // Use A1, A2, A3 or A4\r\n    const orientation = \"portrait\"; // portrait or landscape\r\n\r\n    const marginLeft = 40;\r\n\r\n    const doc = new jsPDF(orientation, unit, size);\r\n\r\n    doc.setFontSize(15);\r\n    doc.setLineWidth(10);\r\n\r\n    const title = \"Customer Report\";\r\n    const headers = [\r\n      [\r\n        \"First Name\",\r\n        \"Last Name\",\r\n        \"UserID\",\r\n        \"Email\",\r\n        \"Address\",\r\n        \"Order\",\r\n        \"Total Ammount\",\r\n        \"Average Ammount\",\r\n      ],\r\n    ];\r\n\r\n    const data = (tableCoustomer || []).map((elt) => [\r\n      elt.first_name,\r\n      elt.last_name,\r\n      elt.user_id,\r\n      elt.email,\r\n      elt.address,\r\n      elt.order_count,\r\n      elt.total_amount,\r\n      elt.avg_value,\r\n    ]);\r\n\r\n    let content = {\r\n      startY: 50,\r\n      head: headers,\r\n      body: data,\r\n    };\r\n\r\n    doc.text(title, marginLeft, 40);\r\n\r\n    doc.autoTable(content);\r\n    doc.save(\"Customer Report.pdf\");\r\n  };\r\n\r\n  //-------------------------------------------- end pdf----------------------------------------------------------------->\r\n\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const header = [\r\n    \"First Name\",\r\n    \"Last Name\",\r\n    \" User ID\",\r\n    \"Email\",\r\n    \"Address\",\r\n    \"Order\",\r\n    \"Total Ammount\",\r\n    \" Average Ammount\",\r\n    \"Created On\",\r\n  ];\r\n\r\n  function handleDownloadExcel() {\r\n    downloadExcel({\r\n      fileName: \"Customer Report -> downloadExcel method\",\r\n      sheet: \"Customer Report\",\r\n      tablePayload: {\r\n        header,\r\n        // accept two different data structures\r\n        body: tableCoustomer,\r\n      },\r\n    });\r\n  }\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n\r\n  const columns = [\r\n    {\r\n      name: \"ID\",\r\n      selector: (row) => row.user_id,\r\n      sortable: true,\r\n      width: \"70px\",\r\n    },\r\n    {\r\n      name: \"First Name\",\r\n      selector: (row) => row.first_name,\r\n      sortable: true,\r\n      width: \"170px\",\r\n    },\r\n    {\r\n      name: \"Last Name\",\r\n      selector: (row) => row.last_name,\r\n      sortable: true,\r\n      width: \"150px\",\r\n    },\r\n\r\n    {\r\n      name: \"Email\",\r\n      selector: (row) => row.email,\r\n      sortable: true,\r\n      width: \"170px\",\r\n    },\r\n    {\r\n      name: \"Order\",\r\n      selector: (row) => row.order_count,\r\n      sortable: true,\r\n      width: \"100px\",\r\n    },\r\n    {\r\n      name: \"Created On\",\r\n      selector: (row) => moment(row.created_on).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n      width: \"150px\",\r\n    },\r\n    {\r\n      name: \"Total Ammount\",\r\n      selector: (row) => row.total_amount,\r\n      sortable: true,\r\n      width: \"130px\",\r\n    },\r\n\r\n    {\r\n      name: \" Average Ammount\",\r\n      selector: (row) => row.avg_value,\r\n      sortable: true,\r\n      width: \"130px\",\r\n    },\r\n    {\r\n      name: \"Address\",\r\n      selector: (row) => row.address,\r\n      sortable: true,\r\n      width: \"400px\",\r\n    },\r\n  ];\r\n\r\n  const token = localStorage.getItem(\"token\");\r\n  const [filterchange, setFilterchange] = useState(\"\");\r\n\r\n  const [tableCoustomer, setGetTableCoustomer] = useState([]);\r\n  const [user, setUser] = useState([]);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [CustomerError, setCustomerError] = useState(\"\");\r\n  console.log(\"---\" + CustomerError)\r\n  const TimeChange = (e) => {\r\n    setFilterchange(e.target.value);\r\n    setUser(e.target.value);\r\n  };\r\n\r\n  const fetchData = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/customers_report`,\r\n        {\r\n          user_search: user,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.message === \"No_Data\") {\r\n          setCustomerError(response.data.message);\r\n          setGetTableCoustomer([]);\r\n          setapicall(false);\r\n        } else {\r\n          setCustomerError(\"\");\r\n          setGetTableCoustomer(response.data);\r\n          setapicall(false);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [apicall]);\r\n\r\n  const submitHandler = () => {\r\n    setapicall(true);\r\n  };\r\n\r\n  const OnReset = () => {\r\n    setUser(\"\");\r\n    setapicall(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Customer Report</h2>\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\"row pb-3\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Search by name\"\r\n                onChange={TimeChange}\r\n                value={user}\r\n              />\r\n            </Form.Group>\r\n          </div>\r\n          {filterchange === \"7\" ? (\r\n            <>\r\n              <div className=\"col-md-3 col-sm-6 aos_input\">\r\n                <Input type={\"date\"} plchldr={\"Search by date\"} />\r\n              </div>\r\n\r\n              <div className=\"col-md-3 col-sm-6 aos_input\">\r\n                <Input type={\"date\"} plchldr={\"Search by date\"} />\r\n              </div>\r\n            </>\r\n          ) : filterchange === \"6\" ? (\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <Input type={\"month\"} plchldr={\"Search by month\"} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"col-md-auto col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button\"}\r\n              onClick={submitHandler}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-auto col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Reset\"}\r\n              btnclass={\"button main_button\"}\r\n              type=\"reset\"\r\n              onClick={OnReset}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-auto col-sm-6 aos_input\">\r\n            <DropdownButton\r\n              id=\"dropdown-variant-success\"\r\n              title=\"Download\"\r\n              variant=\"button main_button\"\r\n            >\r\n              <Dropdown.Item onClick={handleDownloadExcel}>Excel</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => exportPDF()}>Pdf</Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n        {/* datatable */}\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={tableCoustomer}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body customerreport_table\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerReport;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\stock.js",["488"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport axios from \"axios\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { downloadExcel } from \"react-export-table-to-excel\";\r\n\r\nconst StockReport = () => {\r\n  //----------------------------------------------------------------- pdf----------------------------------------------------->\r\n  const exportPDF = () => {\r\n    const unit = \"pt\";\r\n    const size = \"A4\"; // Use A1, A2, A3 or A4\r\n    const orientation = \"portrait\"; // portrait or landscape\r\n\r\n    const marginLeft = 40;\r\n\r\n    const doc = new jsPDF(orientation, unit, size);\r\n\r\n    doc.setFontSize(15);\r\n\r\n    const title = \"Stock Report\";\r\n    const headers = [[\"Product Name\", \"Status\", \"Stock\"]];\r\n\r\n    const data = (getTableStock || []).map((elt) => [\r\n      elt.product_title_name,\r\n      elt.product_status,\r\n      elt.quantity,\r\n    ]);\r\n\r\n    let content = {\r\n      startY: 50,\r\n      head: headers,\r\n      body: data,\r\n    };\r\n\r\n    // doc.text(headers, backgroundColor, \"pink\");\r\n    doc.text(title, marginLeft, 40);\r\n    doc.autoTable(content);\r\n    doc.save(\"Stock Report.pdf\");\r\n    // doc.setFillColor(\"Gray\" ,100)\r\n  };\r\n\r\n  //-------------------------------------------- end pdf----------------------------------------------------------------->\r\n\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const header = [\"Product Name\", \"Status\", \"Stock\"];\r\n\r\n  function handleDownloadExcel() {\r\n    downloadExcel({\r\n      fileName: \"Stock Report -> downloadExcel method\",\r\n      sheet: \"Stock Report\",\r\n      tablePayload: {\r\n        header,\r\n        // accept two different data structures\r\n        body: getTableStock,\r\n      },\r\n    });\r\n  }\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const columns = [\r\n    {\r\n      name: \"Product Name\",\r\n      selector: (row) => row.product_title_name,\r\n      sortable: true,\r\n      width: \"260px\",\r\n    },\r\n\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => row.product_status,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Stock\",\r\n      selector: (row) => row.quantity,\r\n      sortable: true,\r\n    },\r\n  ];\r\n  const token = localStorage.getItem(\"token\");\r\n  const [filterchange, setFilterchange] = useState(\"\");\r\n  const [getTableStock, setGetTableStock] = useState([]);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [StockStatus, setStockStatus] = useState(\"\");\r\n\r\n  const TimeChange = (e) => {\r\n    setFilterchange(e.target.value);\r\n    const value = e.target.value;\r\n    if (value === \"\") {\r\n      setStockStatus(\"\");\r\n    }\r\n    if (value === \"in stock\") {\r\n      setStockStatus(\"in stock\");\r\n    }\r\n    if (value === \"low stock\") {\r\n      setStockStatus(\"low stock\");\r\n    }\r\n    if (value === \"out of stock\") {\r\n      setStockStatus(\"out of stock\");\r\n    }\r\n  };\r\n\r\n  const fetchData = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/stock_report`,\r\n        {\r\n          values: StockStatus,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.message === \"No_Data\") {\r\n          setGetTableStock([]);\r\n        } else {\r\n          setGetTableStock(response.data);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [apicall]);\r\n\r\n  const submitHandler = () => {\r\n    setapicall(true);\r\n    fetchData();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Stock Report</h2>\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\"row pb-3\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by category\"\r\n              className=\"adminselectbox\"\r\n              placeholder=\"Search by category\"\r\n              onChange={TimeChange}\r\n            >\r\n              <option value=\"\">Our Stock Status</option>\r\n              <option value=\"\">All Product</option>\r\n              <option value=\"in stock\">In Stock</option>\r\n              <option value=\"low stock\">Low Stock</option>\r\n              <option value=\"out of stock\">Out of Stock</option>\r\n            </Form.Select>\r\n          </div>\r\n          {filterchange === \"7\" ? (\r\n            <>\r\n              <div className=\"col-md-3 col-sm-6 aos_input\">\r\n                <Input type={\"date\"} plchldr={\"Search by date\"} />\r\n              </div>\r\n\r\n              <div className=\"col-md-3 col-sm-6 aos_input\">\r\n                <Input type={\"date\"} plchldr={\"Search by date\"} />\r\n              </div>\r\n            </>\r\n          ) : filterchange === \"6\" ? (\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <Input type={\"month\"} plchldr={\"Search by month\"} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"col-md-auto col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button\"}\r\n              onClick={submitHandler}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-auto col-sm-6 aos_input\">\r\n            <DropdownButton\r\n              id=\"dropdown-variant-success\"\r\n              title=\"Download\"\r\n              variant=\"button main_button\"\r\n            >\r\n              <Dropdown.Item onClick={handleDownloadExcel}>Excel</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => exportPDF()}>Pdf</Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* upload */}\r\n\r\n        {/*  */}\r\n        {/* box */}\r\n        <div className=\"col-12 px-3\">\r\n          {/* card */}\r\n          <div className=\" row main_dashboard_row1 d-flex mb-3 \">\r\n            {/* totltax */}\r\n            {/* <div className=\"card p-2 col-3 rounded-left shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <MdOutlineMoney className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Total Tax </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                  <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                    <h3>2,356</h3>\r\n                    <div className=\"d-flex align-items-center justify-content-center\">\r\n                     <AiOutlineArrowRight className=\"h5 mb-0 mx-2\"/>\r\n                     <p className=\"mb-0 h5\">0%</p>\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        <h5>Previous Year:</h5>\r\n                        <p className=\"h5\">$0.00</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                \r\n              </div>\r\n            </div> */}\r\n            {/* end */}\r\n            {/* otax */}\r\n            {/* <div className=\"card p-2 col-3 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <BsBagDash className=\"text-success h1 mx-2\" />\r\n                <h5 className=\"text-success\">Order Tax </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                  <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                    <h3>2,356</h3>\r\n                    <div className=\"d-flex align-items-center justify-content-center\">\r\n                     <AiOutlineArrowRight className=\"h5 mb-0 mx-2\"/>\r\n                     <p className=\"mb-0 h5\">0%</p>\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        <h5>Previous Year:</h5>\r\n                        <p className=\"h5\">$0.00</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                \r\n              </div>\r\n            </div> */}\r\n            {/* otax end */}\r\n            {/* stax */}\r\n            {/* <div className=\"card p-2 col-3 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <RiShip2Line className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Shipping Tax </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                  <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                    <h3>2,356</h3>\r\n                    <div className=\"d-flex align-items-center justify-content-center\">\r\n                     <AiOutlineArrowRight className=\"h5 mb-0 mx-2\"/>\r\n                     <p className=\"mb-0 h5\">0%</p>\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        <h5>Previous Year:</h5>\r\n                        <p className=\"h5\">$0.00</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                \r\n              </div>\r\n            </div> */}\r\n            {/*  */}\r\n            {/* Order */}\r\n            {/* <div className=\"card p-2 col-3 rounded-right shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <BsBagPlus className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Orders </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                  <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                    <h3>2,356</h3>\r\n                    <div className=\"d-flex align-items-center justify-content-center\">\r\n                     <AiOutlineArrowRight className=\"h5 mb-0 mx-2\"/>\r\n                     <p className=\"mb-0 h5\">0%</p>\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        <h5>Previous Year:</h5>\r\n                        <p className=\"h5\">$0.00</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                \r\n              </div>\r\n            </div> */}\r\n            {/*  */}\r\n            {/*  */}\r\n          </div>\r\n        </div>\r\n        {/*  */}\r\n\r\n        {/* graph */}\r\n        {/* <HighchartsReact highcharts={Highcharts} options={options}  /> */}\r\n\r\n        {/*  */}\r\n\r\n        {/* datatable */}\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={getTableStock}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body stock_table\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StockReport;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\category.js",["489"],[],"import React, { useState } from \"react\";\r\nimport Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { BsBagPlus } from \"react-icons/bs\";\r\nimport { AiOutlineArrowRight } from \"react-icons/ai\";\r\nimport { GiTakeMyMoney, GiSellCard } from \"react-icons/gi\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport moment from \"moment/moment\";\r\nimport Select from \"react-select\";\r\nimport axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { downloadExcel } from \"react-export-table-to-excel\";\r\n\r\nconst CategoryReport = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [filterchange, setFilterchange] = useState(\"\");\r\n  const [Categoryreport, setCategoryreport] = useState([]);\r\n  const [tableCategory, setGetTableCategory] = useState([]);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [CategoryError, setCategoryError] = useState(\"\");\r\n\r\n  const [PrevCategoryreport, setPrevCategoryreport] = useState([]);\r\n\r\n  const [previousStateChange, setpreviousStateChange] = useState(\" \");\r\n  const [prevFromdate, setprevFromdate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n  const [prevTodate, setprevTodate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n  const [fromDate, setFromDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [toDate, setToDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [venderList, setVenderList] = useState([]);\r\n  const [brand, setBrand] = useState([]);\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryId, setCategoryId] = useState(\"\");\r\n  const [vendorId, setVendorId] = useState(\"\");\r\n  const [brandName, setBrandName] = useState([]);\r\n  const [location, setLocation] = useState([]);\r\n\r\n  const fetchData = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/categories_report`,\r\n        {\r\n          from_date: fromDate,\r\n          to_date: toDate,\r\n          prev_from_date: prevFromdate,\r\n          prev_to_date: prevTodate,\r\n          parent_category: categoryId,\r\n          vendors_id: vendorId,\r\n\r\n          user_locations: location,\r\n          brand: brandName,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.message === \"no_data\") {\r\n          setCategoryError(response.data.message);\r\n          setCategoryreport([0]);\r\n          setGetTableCategory([0]);\r\n          setPrevCategoryreport([0]);\r\n        } else {\r\n          setCategoryError(\"\");\r\n\r\n          setCategoryreport(response.data[0][0]);\r\n          setPrevCategoryreport(response.data[1][0]);\r\n          setGetTableCategory(response.data[2]);\r\n          setapicall(false);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const VenderData = async () => {\r\n    let result = await axios.post(\r\n      `${process.env.REACT_APP_BASEURL}/vendors`,\r\n      {\r\n        vendor_id: \"all\",\r\n      },\r\n      {\r\n        headers: {\r\n          admin_token: token,\r\n        },\r\n      }\r\n    );\r\n    if (result.data) {\r\n      setVenderList(result.data);\r\n    }\r\n  };\r\n\r\n  const BrandData = async () => {\r\n    let result = await axios.get(`${process.env.REACT_APP_BASEURL}/brand_list`);\r\n    if (result.data) {\r\n      setBrand(result.data);\r\n    }\r\n  };\r\n\r\n  const CategoryData = async () => {\r\n    let result = await axios.get(\r\n      `${process.env.REACT_APP_BASEURL}/category?category=all`\r\n    );\r\n    if (result.data) {\r\n      setCategory(result.data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    VenderData();\r\n    BrandData();\r\n    CategoryData();\r\n  }, [apicall]);\r\n\r\n  const TimeChange = (e) => {\r\n    setFilterchange(e.target.value);\r\n    let value = Number(e.target.value);\r\n    if (value === 1) {\r\n      let frommDate = moment().format(\"YYYY-MM-DD\");\r\n      setFromDate(frommDate);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousTodate = moment(frommDate)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodate);\r\n      setprevFromdate(previousTodate);\r\n      setpreviousStateChange(1);\r\n    }\r\n    //yesterday------------------------------------------------------------------------\r\n    if (value === 2) {\r\n      let yesterday = moment()\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n\r\n      setFromDate(yesterday);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n\r\n      let previousTodatee = moment(yesterday)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodatee);\r\n      setprevFromdate(\r\n        moment(previousTodatee)\r\n          .subtract(1, \"days\")\r\n          .startOf(\"days\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(2);\r\n    }\r\n    //last week---------------------------------------------------------------\r\n    if (value === 3) {\r\n      let lastweek = moment()\r\n        .subtract(1, \"weeks\")\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(lastweek);\r\n\r\n      setToDate(\r\n        moment()\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      let previouslastweek = moment(lastweek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastweek);\r\n      setprevFromdate(\r\n        moment(previouslastweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(3);\r\n    }\r\n    //last month---------------------------------------------------------------\r\n    if (value === 4) {\r\n      let month = moment()\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(month);\r\n      let lastMonth = moment()\r\n        .subtract(1, \"month\")\r\n        .endOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setToDate(lastMonth);\r\n      let previouslastmont = moment(lastMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastmont);\r\n      setprevFromdate(\r\n        moment(previouslastmont)\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(4);\r\n    }\r\n    //  last six month---------------------------------------------------------\r\n    if (value === 5) {\r\n      let sixMonth = moment()\r\n        .subtract(6, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(sixMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let lastsixMonth = moment(sixMonth)\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(lastsixMonth);\r\n      setprevFromdate(\r\n        moment(lastsixMonth)\r\n          .subtract(5, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(5);\r\n    }\r\n\r\n    //this week-----------------------------------------------------------------------\r\n    if (value === 8) {\r\n      let ThisWeek = moment()\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisWeek);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthisweek = moment(ThisWeek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthisweek);\r\n      setprevFromdate(\r\n        moment(previousthisweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(8);\r\n    }\r\n    if (value === 9) {\r\n      let ThisMonth = moment()\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthismont = moment(ThisMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthismont);\r\n      setprevFromdate(\r\n        moment()\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(9);\r\n    }\r\n\r\n    fetchData();\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    setapicall(true);\r\n    fetchData();\r\n  };\r\n  const options1 = [\r\n    (brand || []).map((item) => ({ value: `${item.brand}`, label: `${item.brand}` })),\r\n  ];\r\n\r\n  let arrr = [];\r\n\r\n  const brandHandler = (e) => {\r\n    arrr = [];\r\n    e.map((item) => {\r\n      return (\r\n        arrr.push(item.value)\r\n\r\n      )\r\n    });\r\n    setBrandName(arrr);\r\n  };\r\n  const options2 = [\r\n    (venderList || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.shop_name}`,\r\n    })),\r\n  ];\r\n\r\n  let vendorArray = [];\r\n\r\n  const VendorHandler = (e) => {\r\n    vendorArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        vendorArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setVendorId(vendorArray);\r\n  };\r\n  const options3 = [\r\n    (category || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.category_name}`,\r\n    })),\r\n  ];\r\n\r\n  let CategoryArray = [];\r\n\r\n  const categoryHandler = (e) => {\r\n    CategoryArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        CategoryArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setCategoryId(CategoryArray);\r\n  };\r\n\r\n  const options4 = [\r\n    { value: \"indore\", label: \"Indore\" },\r\n    { value: \"bhopal\", label: \"Bhopal\" },\r\n    { value: \"dhar\", label: \"Dhar\" },\r\n    { value: \"khandwa\", label: \"Khandwa\" },\r\n    { value: \"khargone\", label: \"Khargone\" },\r\n  ];\r\n  var SearchArray = [];\r\n  const SearchHandler = (e) => {\r\n    SearchArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        SearchArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setLocation(SearchArray);\r\n  };\r\n  var itemSold = Categoryreport.total_sold_product_count;\r\n  var NetSales = Categoryreport.total_sold_product_amount;\r\n  var order = Categoryreport.order_count;\r\n\r\n  const options = {\r\n    chart: {\r\n      type: \"bar\",\r\n      borderRadius: \"5\",\r\n      borderColor: \"#335cad\",\r\n    },\r\n    title: {\r\n      text: \" Figures\",\r\n      style: { color: \"green\", fontSize: \"22px\" },\r\n      align: \"left\",\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Item Sold\",\r\n        data: [itemSold],\r\n      },\r\n      {\r\n        name: \"Net Sales\",\r\n        data: [NetSales],\r\n      },\r\n      {\r\n        name: \"Orders\",\r\n        data: [order],\r\n      },\r\n    ],\r\n    xAxis: {\r\n      categories: [\r\n        \"1\",\r\n        \"3\",\r\n        \"5\",\r\n        \"7\",\r\n        \"9\",\r\n        \"11\",\r\n        \"13\",\r\n        \"15\",\r\n        \"17\",\r\n        \"19\",\r\n        \"21\",\r\n        \"23\",\r\n      ],\r\n    },\r\n    yAxis: {\r\n      categories: [\"0\", \"200\", \"400\", \"600\", \"800\", \"1000\"],\r\n    },\r\n  };\r\n  const columns = [\r\n    {\r\n      name: \"Category\",\r\n      selector: (row) => (row.cat_name == null ? \"No Record\" : row.cat_name),\r\n      sortable: true,\r\n      width: \"260px\",\r\n    },\r\n    {\r\n      name: \"Item Sold\",\r\n      selector: (row) =>\r\n        row.product_count == null ? \"No Record\" : row.product_count,\r\n      sortable: true,\r\n      center: true,\r\n    },\r\n    {\r\n      name: \"Net Revenue\",\r\n      selector: (row) =>\r\n        row.total_sales == null\r\n          ? \"No Record\"\r\n          : Number(row.total_sales).toFixed(2),\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Orders\",\r\n      selector: (row) =>\r\n        row.order_count == null ? \"No Record\" : row.order_count,\r\n      sortable: true,\r\n    },\r\n  ];\r\n  //----------------------------------------------------------------- pdf----------------------------------------------------->\r\n  const exportPDF = () => {\r\n    const unit = \"pt\";\r\n    const size = \"A4\"; // Use A1, A2, A3 or A4\r\n    const orientation = \"portrait\"; // portrait or landscape\r\n\r\n    const marginLeft = 40;\r\n\r\n    const doc = new jsPDF(orientation, unit, size);\r\n\r\n    doc.setFontSize(15);\r\n\r\n    const title = \"Category Report\";\r\n    const headers = [[\"Category\", \"Item sold\", \"Net Revenue\", \"Orders\"]];\r\n\r\n    const data = tableCategory.map((elt) => [\r\n      elt.cat_name,\r\n      elt.product_count,\r\n      elt.total_sales,\r\n      elt.order_count,\r\n    ]);\r\n\r\n    let content = {\r\n      startY: 50,\r\n      head: headers,\r\n      body: data,\r\n      blankrows: \"No Record\",\r\n    };\r\n\r\n    doc.text(title, marginLeft, 40);\r\n    doc.autoTable(content);\r\n    doc.save(\"Category Report.pdf\");\r\n  };\r\n\r\n  //-------------------------------------------- end pdf----------------------------------------------------------------->\r\n\r\n  //  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const header = [\"Category\", \"Item sold\", \"Orders\", \"Net Revenue\"];\r\n\r\n  function handleDownloadExcel() {\r\n    downloadExcel({\r\n      fileName: \"Category Report -> downloadExcel method\",\r\n      sheet: \"Category Report\",\r\n      tablePayload: {\r\n        header,\r\n        body: tableCategory,\r\n        blankrows: \"No Record\",\r\n      },\r\n    });\r\n  }\r\n\r\n  // // // //-------------Item sold product ammount---------------------------\r\n  var getSoldProductAmmount = Number(Categoryreport.total_sold_product_amount);\r\n\r\n  var getPreviousSoldProductAmmount = Number(\r\n    PrevCategoryreport.prev_total_sold_product_amount\r\n  );\r\n\r\n  var resultProductAmmount = (\r\n    ((getSoldProductAmmount - getPreviousSoldProductAmmount) /\r\n      getPreviousSoldProductAmmount) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultProductAmmount !== \"Infinity\"\r\n    ? console.log()\r\n    : (resultProductAmmount = 0);\r\n\r\n  // // // //----------------------sold product count--------------------------------------------------------\r\n  var getSoldProductCount = Number(Categoryreport.total_sold_product_count);\r\n\r\n  var getPreviousSoldProductCount = Number(\r\n    PrevCategoryreport.prev_total_sold_product_count\r\n  );\r\n\r\n  var resultProductCount = (\r\n    ((getSoldProductCount - getPreviousSoldProductCount) /\r\n      getPreviousSoldProductCount) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultProductCount !== \"Infinity\" ? console.log() : (resultProductCount = 0);\r\n\r\n  // // // //-----------------------order count---------------------------------------\r\n  var getSoldorder = Number(Categoryreport.order_count);\r\n\r\n  var getPreviousSoldorder = Number(PrevCategoryreport.prev_order_count);\r\n\r\n  var resultorder = (\r\n    ((getSoldorder - getPreviousSoldorder) / getPreviousSoldorder) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultorder !== \"Infinity\" ? console.log() : (resultorder = 0);\r\n  return (\r\n    <div>\r\n      <h2>Category Report</h2>\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\"row pb-3\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by category\"\r\n              className=\"adminselectbox\"\r\n              placeholder=\"Search by category\"\r\n              onChange={TimeChange}\r\n            >\r\n              <option>Search by Dates</option>\r\n              <option name=\"today\" value={1}>\r\n                Today\r\n              </option>\r\n              <option name=\"yesterday\" value={2}>\r\n                yesterday\r\n              </option>\r\n              <option name=\"this_week\" value={8}>\r\n                this week\r\n              </option>\r\n              <option name=\"last_week\" value={3}>\r\n                Last week\r\n              </option>\r\n              <option name=\"this_week\" value={9}>\r\n                This month\r\n              </option>\r\n              <option name=\"last_month\" value={4}>\r\n                last month\r\n              </option>\r\n              <option name=\"last_6_month\" value={5}>\r\n                last 6 month\r\n              </option>\r\n              <option name=\"custom_date\" value=\"7\">\r\n                custom date\r\n              </option>\r\n            </Form.Select>\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Vendor\"\r\n              onChange={VendorHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options2[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Brand\"\r\n              onChange={brandHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options1[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Category\"\r\n              onChange={categoryHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options3[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 mt-2 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Location\"\r\n              onChange={SearchHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options4}\r\n            />\r\n          </div>\r\n          {filterchange === \"7\" ? (\r\n            <div className=\"col-md-3 col-sm-6 aos_input d-flex\">\r\n              <div className=\"col-6 aos_input pe-2\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setFromDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-6\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setToDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : filterchange === \"6\" ? (\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <Input type={\"month\"} plchldr={\"Search by month\"} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"col-md-auto mt-2 col-sm-6 aos_input\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button\"}\r\n              onClick={submitHandler}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-auto mt-2 col-sm-6 aos_input\">\r\n            <DropdownButton\r\n              id=\"dropdown-variant-success\"\r\n              title=\"Download\"\r\n              variant=\"button main_button\"\r\n            >\r\n              <Dropdown.Item onClick={handleDownloadExcel}>Excel</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => exportPDF()}>Pdf</Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* upload */}\r\n\r\n        {/*  */}\r\n        {/* box */}\r\n        <div className=\"col-12 px-3\">\r\n          {/* card */}\r\n          <div className=\" row main_dashboard_row1 d-flex mb-3 \">\r\n            {/* item sold */}\r\n            <div className=\"card py-2 px-4 col-4 rounded-left shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <GiSellCard className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Item Sold</h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {CategoryError === \"no_data\" ||\r\n                        Categoryreport.total_sold_product_count === null ||\r\n                        Categoryreport.total_sold_product_count === undefined ||\r\n                        Categoryreport.total_sold_product_count === \"\" ? (\r\n                        <h3>0</h3>\r\n                      ) : (\r\n                        <h3>{Categoryreport.total_sold_product_count}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultProductCount > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultProductCount}%\r\n                          </p>\r\n                        ) : resultProductCount < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultProductCount}%\r\n                          </p>\r\n                        ) : resultProductCount === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultProductCount}%\r\n                          </p>\r\n                        ) : resultProductCount === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultProductCount}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {CategoryError === \"no_data\" ||\r\n                        PrevCategoryreport.prev_total_sold_product_count ===\r\n                        null ||\r\n                        PrevCategoryreport.prev_total_sold_product_count ===\r\n                        undefined ||\r\n                        PrevCategoryreport.prev_total_sold_product_count === \"\" ? (\r\n                        <p className=\"h5\"> 0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          {PrevCategoryreport.prev_total_sold_product_count}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* end */}\r\n            {/* net */}\r\n            <div className=\"card py-2 px-4 col-4 rounded-0 shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-center\">\r\n                <GiTakeMyMoney className=\"text-success h1 mx-2\" />\r\n                <h5 className=\"text-success\">Net Sales </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {CategoryError === \"no_data\" ||\r\n                        Categoryreport.total_sold_product_amount === null ||\r\n                        Categoryreport.total_sold_product_amount === undefined ||\r\n                        Categoryreport.total_sold_product_amount === \"\" ? (\r\n                        <h3>₹0</h3>\r\n                      ) : (\r\n                        <h3>\r\n                          ₹{Categoryreport.total_sold_product_amount.toFixed(2)}\r\n                        </h3>\r\n                      )}\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n                        {resultProductAmmount > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultProductAmmount}%\r\n                          </p>\r\n                        ) : resultProductAmmount < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultProductAmmount}%\r\n                          </p>\r\n                        ) : resultProductAmmount === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultProductAmmount}%\r\n                          </p>\r\n                        ) : resultProductAmmount === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultProductAmmount}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {CategoryError === \"no_data\" ||\r\n                        PrevCategoryreport.prev_total_sold_product_amount ===\r\n                        null ||\r\n                        PrevCategoryreport.prev_total_sold_product_amount ===\r\n                        undefined ||\r\n                        PrevCategoryreport.prev_total_sold_product_amount ===\r\n                        \"\" ? (\r\n                        <p className=\"h5\"> ₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹\r\n                          {PrevCategoryreport.prev_total_sold_product_amount.toFixed(\r\n                            2\r\n                          )}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* net end */}\r\n            {/* order */}\r\n            <div className=\"card py-2 px-4 col-4 rounded-right shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <BsBagPlus className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Orders </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {CategoryError === \"no_data\" ||\r\n                        Categoryreport.order_count === null ||\r\n                        Categoryreport.order_count === undefined ||\r\n                        Categoryreport.order_count === \"\" ? (\r\n                        <h3>0</h3>\r\n                      ) : (\r\n                        <h3>{Categoryreport.order_count}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultorder > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultorder}%\r\n                          </p>\r\n                        ) : resultorder < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultorder}%\r\n                          </p>\r\n                        ) : resultorder === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultorder}%\r\n                          </p>\r\n                        ) : resultorder === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultorder}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {CategoryError === \"no_data\" ||\r\n                        PrevCategoryreport.prev_order_count === null ||\r\n                        PrevCategoryreport.prev_order_count === undefined ||\r\n                        PrevCategoryreport.prev_order_count === \"\" ? (\r\n                        <p className=\"h5\"> 0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          {PrevCategoryreport.prev_order_count}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/*  */}\r\n          </div>\r\n        </div>\r\n        {/*  */}\r\n\r\n        {/* graph */}\r\n        {Categoryreport.total_sold_product_count ||\r\n          Categoryreport.total_sold_product_amount ||\r\n          Categoryreport.order_count ? (\r\n          <HighchartsReact highcharts={Highcharts} options={options} />\r\n        ) : null}\r\n\r\n        {/*  */}\r\n\r\n        {/* datatable */}\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={tableCategory}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body categoryreport_table\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoryReport;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\report\\taxes.js",["490"],[],"import React, { useState } from \"react\";\r\nimport Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport MainButton from \"../common/button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { BsBagPlus } from \"react-icons/bs\";\r\n// import { RiShip2Line } from \"react-icons/ri\";\r\nimport { AiOutlineArrowRight } from \"react-icons/ai\";\r\nimport { GiPayMoney } from \"react-icons/gi\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment/moment\";\r\nimport Select from \"react-select\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport { downloadExcel } from \"react-export-table-to-excel\";\r\n\r\nconst TaxesReport = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [filterchange, setFilterchange] = useState(\"\");\r\n  const [Taxesreport, setTaxesreport] = useState([]);\r\n  const [TaxesTable, setTaxesTable] = useState([]);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [TaxesError, setTaxesError] = useState(\"\");\r\n  const [fromDate, setFromDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [toDate, setToDate] = useState(moment().format(\"YYYY-MM-DD\"));\r\n  const [previousStateChange, setpreviousStateChange] = useState(\" \");\r\n  const [PrevTaxesreport, setPrevTaxesreport] = useState([]);\r\n  const [prevFromdate, setprevFromdate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n  const [prevTodate, setprevTodate] = useState(\r\n    moment()\r\n      .subtract(1, \"days\")\r\n      .startOf(\"days\")\r\n      .format(\"YYYY-MM-DD\")\r\n  );\r\n  const [venderList, setVenderList] = useState([]);\r\n  const [vendorId, setVendorId] = useState(\"\");\r\n  const [category, setCategory] = useState([]);\r\n  const [categoryId, setCategoryId] = useState(\"\");\r\n  const [brand, setBrand] = useState([]);\r\n  const [brandName, setBrandName] = useState([]);\r\n  const [location, setLocation] = useState([]);\r\n\r\n  const fetchData = () => {\r\n\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/taxes_report`,\r\n        {\r\n          from_date: fromDate,\r\n          to_date: toDate,\r\n          prev_from_date: prevFromdate,\r\n          prev_to_date: prevTodate,\r\n          vendors_id: vendorId,\r\n          categorys: categoryId,\r\n          user_locations: location,\r\n          brand: brandName,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.message === \"No_Data\") {\r\n          setTaxesError(response.data.message);\r\n          setTaxesreport([0]);\r\n          setTaxesTable([0]);\r\n        } else {\r\n          setTaxesError(\"\");\r\n\r\n          setTaxesreport(response.data[0][0]);\r\n          setTaxesTable(response.data[2]);\r\n          setPrevTaxesreport(response.data[1][0]);\r\n          setapicall(false);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const VenderData = async () => {\r\n    let result = await axios.post(\r\n      `${process.env.REACT_APP_BASEURL}/vendors`,\r\n      {\r\n        vendor_id: \"all\",\r\n      },\r\n      {\r\n        headers: {\r\n          admin_token: token,\r\n        },\r\n      }\r\n    );\r\n    if (result.data) {\r\n      setVenderList(result.data);\r\n    }\r\n  };\r\n\r\n  const CategoryData = async () => {\r\n    let result = await axios.get(\r\n      `${process.env.REACT_APP_BASEURL}/category?category=all`\r\n    );\r\n    if (result.data) {\r\n      setCategory(result.data);\r\n    }\r\n  };\r\n\r\n  const BrandData = async () => {\r\n    let result = await axios.get(`${process.env.REACT_APP_BASEURL}/brand_list`);\r\n\r\n    if (result.data) {\r\n      setBrand(result.data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    VenderData();\r\n    CategoryData();\r\n    BrandData();\r\n  }, [apicall]);\r\n\r\n  const TimeChange = (e) => {\r\n    setFilterchange(e.target.value);\r\n    let value = Number(e.target.value);\r\n    if (value === 1) {\r\n      let frommDate = moment().format(\"YYYY-MM-DD\");\r\n      setFromDate(frommDate);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousTodate = moment(frommDate)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodate);\r\n      setprevFromdate(previousTodate);\r\n\r\n      setpreviousStateChange(1);\r\n    }\r\n    //yesterday------------------------------------------------------------------------\r\n    if (value === 2) {\r\n      let yesterday = moment()\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n\r\n      setFromDate(yesterday);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n\r\n      let previousTodatee = moment(yesterday)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousTodatee);\r\n      setprevFromdate(\r\n        moment(previousTodatee)\r\n          .subtract(1, \"days\")\r\n          .startOf(\"days\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(2);\r\n    }\r\n    //last week---------------------------------------------------------------\r\n    if (value === 3) {\r\n      let lastweek = moment()\r\n        .subtract(1, \"weeks\")\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(lastweek);\r\n\r\n      setToDate(\r\n        moment()\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      let previouslastweek = moment(lastweek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastweek);\r\n      setprevFromdate(\r\n        moment(previouslastweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(3);\r\n    }\r\n    //last month---------------------------------------------------------------\r\n    if (value === 4) {\r\n      let month = moment()\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(month);\r\n      let lastMonth = moment()\r\n        .subtract(1, \"month\")\r\n        .endOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setToDate(lastMonth);\r\n      let previouslastmont = moment(lastMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previouslastmont);\r\n      setprevFromdate(\r\n        moment(previouslastmont)\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(4);\r\n    }\r\n    //  last six month---------------------------------------------------------\r\n    if (value === 5) {\r\n      let sixMonth = moment()\r\n        .subtract(6, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(sixMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let lastsixMonth = moment(sixMonth)\r\n        .subtract(1, \"month\")\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(lastsixMonth);\r\n      setprevFromdate(\r\n        moment(lastsixMonth)\r\n          .subtract(5, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(5);\r\n    }\r\n\r\n    //this week-----------------------------------------------------------------------\r\n    if (value === 8) {\r\n      let ThisWeek = moment()\r\n        .startOf(\"weeks\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisWeek);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthisweek = moment(ThisWeek)\r\n        .subtract(1, \"days\")\r\n        .endOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthisweek);\r\n      setprevFromdate(\r\n        moment(previousthisweek)\r\n          .subtract(1, \"weeks\")\r\n          .endOf(\"weeks\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(8);\r\n    }\r\n    if (value === 9) {\r\n      let ThisMonth = moment()\r\n        .startOf(\"month\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setFromDate(ThisMonth);\r\n      setToDate(moment().format(\"YYYY-MM-DD\"));\r\n      let previousthismont = moment(ThisMonth)\r\n        .subtract(1, \"days\")\r\n        .startOf(\"days\")\r\n        .format(\"YYYY-MM-DD\");\r\n      setprevTodate(previousthismont);\r\n      setprevFromdate(\r\n        moment()\r\n          .subtract(1, \"month\")\r\n          .startOf(\"month\")\r\n          .format(\"YYYY-MM-DD\")\r\n      );\r\n      setpreviousStateChange(9);\r\n    }\r\n\r\n    fetchData();\r\n  };\r\n\r\n  const submitHandler = () => {\r\n    setapicall(true);\r\n    fetchData();\r\n  };\r\n\r\n  const options1 = [\r\n    (brand || []).map((item) => ({ value: `${item.brand}`, label: `${item.brand}` })),\r\n  ];\r\n\r\n  let arrr = [];\r\n\r\n  const brandHandler = (e) => {\r\n    arrr = [];\r\n    e.map((item) => {\r\n      return (\r\n        arrr.push(item.value)\r\n\r\n      )\r\n    });\r\n    setBrandName(arrr);\r\n  };\r\n\r\n  const options2 = [\r\n    (venderList || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.shop_name}`,\r\n    })),\r\n  ];\r\n\r\n  let vendorArray = [];\r\n\r\n  const VendorHandler = (e) => {\r\n    vendorArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        vendorArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setVendorId(vendorArray);\r\n  };\r\n\r\n  const options3 = [\r\n    (category || []).map((item) => ({\r\n      value: `${item.id}`,\r\n      label: `${item.category_name}`,\r\n    })),\r\n  ];\r\n\r\n  let CategoryArray = [];\r\n\r\n  const categoryHandler = (e) => {\r\n    CategoryArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        CategoryArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setCategoryId(CategoryArray);\r\n  };\r\n\r\n  const options4 = [\r\n    { value: \"indore\", label: \"Indore\" },\r\n    { value: \"bhopal\", label: \"Bhopal\" },\r\n    { value: \"dhar\", label: \"Dhar\" },\r\n    { value: \"khandwa\", label: \"Khandwa\" },\r\n    { value: \"khargone\", label: \"Khargone\" },\r\n  ];\r\n  var SearchArray = [];\r\n  const SearchHandler = (e) => {\r\n    SearchArray = [];\r\n    e.map((item) => {\r\n      return (\r\n        SearchArray.push(item.value)\r\n\r\n      )\r\n    });\r\n    setLocation(SearchArray);\r\n  };\r\n\r\n  var OrderTax = Taxesreport.order_tax;\r\n  var OrderCount = Taxesreport.order_count;\r\n\r\n  const options = {\r\n    chart: {\r\n      type: \"bar\",\r\n      borderRadius: \"5\",\r\n      borderColor: \"#335cad\",\r\n    },\r\n    title: {\r\n      text: \" Figures\",\r\n      style: { color: \"green\", fontSize: \"22px\" },\r\n      align: \"left\",\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Order\",\r\n        data: [OrderCount],\r\n      },\r\n      {\r\n        name: \"Order Tax\",\r\n        data: [OrderTax],\r\n      },\r\n    ],\r\n    xAxis: {\r\n      categories: [\r\n        \"1\",\r\n        \"3\",\r\n        \"5\",\r\n        \"7\",\r\n        \"9\",\r\n        \"11\",\r\n        \"13\",\r\n        \"15\",\r\n        \"17\",\r\n        \"19\",\r\n        \"21\",\r\n        \"23\",\r\n      ],\r\n    },\r\n    yAxis: {\r\n      categories: [\"0\", \"200\", \"400\", \"600\", \"800\", \"1000\"],\r\n    },\r\n  };\r\n\r\n  //----------------------------------------------------------------- pdf----------------------------------------------------->\r\n  const exportPDF = () => {\r\n    const unit = \"pt\";\r\n    const size = \"A4\"; // Use A1, A2, A3 or A4\r\n    const orientation = \"portrait\"; // portrait or landscape\r\n\r\n    const marginLeft = 40;\r\n\r\n    const doc = new jsPDF(orientation, unit, size);\r\n\r\n    doc.setFontSize(15);\r\n\r\n    const title = \"Taxes Report\";\r\n    const headers = [[\" GST\", \"Order Taxes\", \"Orders\"]];\r\n\r\n    const data = TaxesTable.map((elt) => [\r\n      elt.gst,\r\n      elt.order_taxes,\r\n      elt.order_count,\r\n    ]);\r\n\r\n    let content = {\r\n      startY: 50,\r\n      head: headers,\r\n      body: data,\r\n    };\r\n\r\n    // doc.text(headers, backgroundColor, \"pink\");\r\n    doc.text(title, marginLeft, 40);\r\n    doc.autoTable(content);\r\n    doc.save(\"Taxes Report.pdf\");\r\n    // doc.setFillColor(\"Gray\" ,100)\r\n  };\r\n\r\n  //-------------------------------------------- end pdf----------------------------------------------------------------->\r\n\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n  const header = [\" GST\", \"Order Taxes\", \"Orders\"];\r\n\r\n  function handleDownloadExcel() {\r\n    downloadExcel({\r\n      fileName: \"Taxes Report -> downloadExcel method\",\r\n      sheet: \"Taxes Report\",\r\n      tablePayload: {\r\n        header,\r\n        // accept two different data structures\r\n        body: TaxesTable,\r\n      },\r\n    });\r\n  }\r\n  //----------------------------------------------------+++=++++++ excel--------------------------------------------------->\r\n\r\n  const columns = [\r\n\r\n    {\r\n      name: \"Order Date \",\r\n      selector: (row) => moment(row.order_date).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Total SGST \",\r\n      selector: (row) => Number(row.total_sgst).toFixed(2),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Total CGST \",\r\n      selector: (row) => Number(row.total_cgst).toFixed(2),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Total  Taxes\",\r\n      selector: (row) => Number(row.total_gst).toFixed(2),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Order\",\r\n      selector: (row) => row.id,\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  // // //-------------Order tax---------------------------\r\n  var getOrderTax = Number(Taxesreport.order_tax);\r\n\r\n  var getPreviousOrderTax = Number(PrevTaxesreport.prev_order_tax);\r\n\r\n  var resultOrderTax = (\r\n    ((getOrderTax - getPreviousOrderTax) / getPreviousOrderTax) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultOrderTax !== \"Infinity\" ? console.log() : (resultOrderTax = 0);\r\n\r\n  // // //-------------Order count---------------------------\r\n  var getOrderCount = Number(Taxesreport.order_count);\r\n\r\n  var getPreviousOrderCount = Number(PrevTaxesreport.prev_order_count);\r\n\r\n  var resultOrderCount = (\r\n    ((getOrderCount - getPreviousOrderCount) / getPreviousOrderCount) *\r\n    100\r\n  ).toFixed(2);\r\n\r\n  resultOrderCount !== \"Infinity\" ? console.log() : (resultOrderCount = 0);\r\n  return (\r\n    <div>\r\n      <h2>Taxes Report</h2>\r\n      {/* search bar */}\r\n      <div className=\"card mt-3 p-3 \">\r\n        <div className=\"row pb-3\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by category\"\r\n              className=\"adminselectbox\"\r\n              placeholder=\"Search by category\"\r\n              onChange={TimeChange}\r\n            >\r\n              <option>Search by Dates</option>\r\n              <option name=\"today\" value={1}>\r\n                Today\r\n              </option>\r\n              <option name=\"yesterday\" value={2}>\r\n                yesterday\r\n              </option>\r\n              <option name=\"this_week\" value={8}>\r\n                this week\r\n              </option>\r\n              <option name=\"last_week\" value={3}>\r\n                Last week\r\n              </option>\r\n              <option name=\"this_week\" value={9}>\r\n                This month\r\n              </option>\r\n              <option name=\"last_month\" value={4}>\r\n                last month\r\n              </option>\r\n              <option name=\"last_6_month\" value={5}>\r\n                last 6 month\r\n              </option>\r\n              {/* <option name=\"custom_month\" value=\"6\">custom month</option> */}\r\n              <option name=\"custom_date\" value=\"7\">\r\n                custom date\r\n              </option>\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Vendor\"\r\n              onChange={VendorHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options2[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Brand\"\r\n              onChange={brandHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options1[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Category\"\r\n              onChange={categoryHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options3[0]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 mt-3 aos_input\">\r\n            <Select\r\n              className=\" basic-multi-select\"\r\n              placeholder=\"Search by Location\"\r\n              onChange={SearchHandler}\r\n              classNamePrefix=\"select\"\r\n              isMulti\r\n              options={options4}\r\n            />\r\n          </div>\r\n\r\n          {filterchange === \"7\" ? (\r\n            <div className=\"col-md-3 d-flex mt-3 col-sm-6 aos_input\">\r\n              <div className=\"col-6 pe-2 aos_input\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setFromDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"col-6\">\r\n                <input\r\n                  type={\"date\"}\r\n                  placeholder={\"Search by date\"}\r\n                  onChange={(e) => {\r\n                    setToDate(e.target.value);\r\n                  }}\r\n                  className={\"adminsideinput\"}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                />\r\n              </div>\r\n            </div>\r\n          ) : filterchange === \"6\" ? (\r\n            <div className=\"col-md-3 col-sm-6 aos_input\">\r\n              <Input type={\"month\"} plchldr={\"Search by month\"} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"col-md-auto col-sm-6 aos_input mt-3\">\r\n            <MainButton\r\n              btntext={\"Search\"}\r\n              btnclass={\"button main_button\"}\r\n              onClick={submitHandler}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-auto col-sm-6 aos_input mt-3\">\r\n            <DropdownButton\r\n              id=\"dropdown-variant-success\"\r\n              title=\"Download\"\r\n              variant=\"button main_button\"\r\n            >\r\n              <Dropdown.Item onClick={handleDownloadExcel}>Excel</Dropdown.Item>\r\n              <Dropdown.Item onClick={() => exportPDF()}>Pdf</Dropdown.Item>\r\n            </DropdownButton>\r\n          </div>\r\n        </div>\r\n\r\n        {/* upload */}\r\n\r\n        {/*  */}\r\n        {/* box */}\r\n        <div className=\"col-12 px-3\">\r\n          {/* card */}\r\n          <div className=\" row main_dashboard_row1 d-flex mb-3 \">\r\n            {/* totltax */}\r\n            <div className=\"card p-2 col-3 rounded-left shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <GiPayMoney className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Order Tax </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {TaxesError === \"No_Data\" ||\r\n                        Taxesreport.order_tax === null ||\r\n                        Taxesreport.order_tax === undefined ||\r\n                        Taxesreport.order_tax === \"\" ? (\r\n                        <h3>₹0</h3>\r\n                      ) : (\r\n                        <h3>₹{Taxesreport.order_tax.toFixed(2)}</h3>\r\n                      )}\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultOrderTax > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultOrderTax}%\r\n                          </p>\r\n                        ) : resultOrderTax < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultOrderTax}%\r\n                          </p>\r\n                        ) : resultOrderTax === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultOrderTax}%\r\n                          </p>\r\n                        ) : resultOrderTax === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultOrderTax}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {TaxesError === \"no_data\" ||\r\n                        PrevTaxesreport.prev_order_tax === null ||\r\n                        PrevTaxesreport.prev_order_tax === undefined ||\r\n                        PrevTaxesreport.prev_order_tax === \"\" ? (\r\n                        <p className=\"h5\">₹0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          ₹{PrevTaxesreport.prev_order_tax.toFixed(2)}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* end */}\r\n            {/* otax */}\r\n\r\n            {/* otax end */}\r\n            {/* stax */}\r\n\r\n            {/*  */}\r\n            {/* Order */}\r\n            <div className=\"card p-2 col-3 rounded-right shadow-none\">\r\n              <div className=\" d-flex mt-0 align-items-end\">\r\n                <BsBagPlus className=\"text-success h1 mb-0 mx-2\" />\r\n                <h5 className=\"text-success\">Orders </h5>\r\n              </div>\r\n              <div className=\"row mt-3\">\r\n                <div className=\"col-12\">\r\n                  <div className=\"row  d-flex flex-column align-items-center\">\r\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\r\n                      {TaxesError === \"No_Data\" ||\r\n                        Taxesreport.order_count === null ||\r\n                        Taxesreport.order_count === undefined ||\r\n                        Taxesreport.order_count === \"\" ? (\r\n                        <h3>0</h3>\r\n                      ) : (\r\n                        <h3>{Taxesreport.order_count}</h3>\r\n                      )}\r\n\r\n                      <div className=\"d-flex align-items-center justify-content-center\">\r\n                        <AiOutlineArrowRight className=\"h5 mb-0 mx-2\" />\r\n\r\n                        {resultOrderCount > 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            {resultOrderCount}%\r\n                          </p>\r\n                        ) : resultOrderCount < 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"red\" }}>\r\n                            {\" \"}\r\n                            {resultOrderCount}%\r\n                          </p>\r\n                        ) : resultOrderCount === 0 ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"blue\" }}>\r\n                            {\" \"}\r\n                            {resultOrderCount}%\r\n                          </p>\r\n                        ) : resultOrderCount === \"NaN\" ? (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"grey\" }}>\r\n                            {\" \"}\r\n                            0%\r\n                          </p>\r\n                        ) : (\r\n                          <p className=\"mb-0 h5\" style={{ color: \"brown\" }}>\r\n                            {\" \"}\r\n                            {resultOrderCount}%\r\n                          </p>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      {previousStateChange === 1 ? (\r\n                        <h5>Today :</h5>\r\n                      ) : previousStateChange === 2 ? (\r\n                        <h5>Previous Yesterday :</h5>\r\n                      ) : previousStateChange === 3 ? (\r\n                        <h5>Previous Last week :</h5>\r\n                      ) : previousStateChange === 4 ? (\r\n                        <h5>Previous Last Month :</h5>\r\n                      ) : previousStateChange === 5 ? (\r\n                        <h5>Previous Last 6 Months:</h5>\r\n                      ) : previousStateChange === 8 ? (\r\n                        <h5>Previous week :</h5>\r\n                      ) : previousStateChange === 9 ? (\r\n                        <h5>Previous Month :</h5>\r\n                      ) : (\r\n                        <h5>Today :</h5>\r\n                      )}\r\n\r\n                      {TaxesError === \"no_data\" ||\r\n                        PrevTaxesreport.prev_order_count === null ||\r\n                        PrevTaxesreport.prev_order_count === undefined ||\r\n                        PrevTaxesreport.prev_order_count === \"\" ? (\r\n                        <p className=\"h5\"> 0</p>\r\n                      ) : (\r\n                        <p className=\"h5\">\r\n                          {PrevTaxesreport.prev_order_count}{\" \"}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/*  */}\r\n            {/*  */}\r\n          </div>\r\n        </div>\r\n        {/*  */}\r\n\r\n        {/* graph */}\r\n        {Taxesreport.order_tax ? (\r\n          <HighchartsReact highcharts={Highcharts} options={options} />\r\n        ) : null}\r\n\r\n        {/*  */}\r\n\r\n        {/* datatable */}\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          data={TaxesTable}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n          className={\"table_body taxes_table\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaxesReport;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\delivery\\delivery.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\blog\\add_blog.js",["491"],[],"import React, { useState, useRef } from \"react\";\r\n// import Input from \"../common/input\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport SAlert from \"../common/salert\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport { useEffect } from \"react\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\nimport axios from \"axios\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst BlogList = () => {\r\n\r\n  const formRef = useRef();\r\n  const [changstatus, setchangstatus] = useState(\"\");\r\n  console.log(changstatus)\r\n  const [apicall, setapicall] = useState(false);\r\n  const [validated, setValidated] = useState(false);\r\n  const [show, setShow] = useState(\"\");\r\n  const [Alert, setAlert] = useState(false);\r\n  const [file, setFile] = useState();\r\n  const [fileName, setFileName] = useState(\"\");\r\n  // const [image, setImage] = useState();\r\n  // const [DocuImgarray, setDocuImgArray] = useState([]);\r\n  const [id, setId] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [AddAlert, setAddAlert] = useState(false);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  let [condition, setCondition] = useState(false);\r\n  const [blog, setBlog] = useState([]);\r\n  const [addblog, setaddBlog] = useState({\r\n    admin_id: \"\",\r\n    image: \"\",\r\n    title: \"\",\r\n    description: \"\",\r\n    category: \"\",\r\n    product_tag: \"\",\r\n    publish_date: \"\",\r\n  });\r\n  const [searchdata, setsearchData] = useState([]);\r\n  console.log(searchdata)\r\n\r\n  const [recent, setRecent] = useState(\"\");\r\n  const [categorySearch, setCategorySearch] = useState(\"\");\r\n  const [productTagSearch, setProductTagSearch] = useState(\"\");\r\n  let [blogName, setBlogName] = useState(\"\");\r\n\r\n  // Function of cancel add success alert:-\r\n  const closeAddAlert = () => {\r\n    setAddAlert(false);\r\n    setProductTagSearch(\"\")\r\n  };\r\n  //Blog Categoty Json//\r\n  const CategoryJson = {\r\n    categorytype: [\r\n      \"Food blogs\",\r\n      \"Cloths blogs\",\r\n      \"Travel blogs\",\r\n      \"Health blogs\",\r\n      \"Grocery blogs\",\r\n      \"Fashion blogs\",\r\n      \"Beauty & Personal care blogs\",\r\n      \"Home Applience blogs\",\r\n      \"Personal blogs\",\r\n    ],\r\n  };\r\n\r\n\r\n\r\n  // Function of cancel update success alert:-\r\n  const closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n\r\n  // const OnCtegorySearch = (e) => {\r\n  //   setCategorySearch(e.target.value);\r\n  // };\r\n  const onRecentSearch = (e) => {\r\n    setRecent(e.target.value);\r\n    if (recent) {\r\n      setapicall(true);\r\n    }\r\n  };\r\n  const onSearchClick = () => {\r\n    // let categoryArray = [];\r\n\r\n    axios\r\n      .post(`${process.env.REACT_APP_BASEURL}/blogs`, {\r\n        id: \"\",\r\n        for_: \"admin\",\r\n        recent: recent,\r\n        category: [categorySearch],\r\n        product_tag: productTagSearch,\r\n      })\r\n      .then((response) => {\r\n        // let data = response.data;\r\n        setBlog(response.data);\r\n        setCondition(false);\r\n        // setsearchBlog('')\r\n        //  let categoryArray = [];\r\n        setapicall(false);\r\n      });\r\n  };\r\n  const ImgFormChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n    setFileName(e.target.files[0].name);\r\n  };\r\n\r\n  const handleFormChange = (e) => {\r\n    setaddBlog({ ...addblog, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleClose = (e) => {\r\n    formRef.current.reset();\r\n    setaddBlog(\"\")\r\n    setValidated(false);\r\n    setShow(false);\r\n    setCategorySearch(\"\")\r\n\r\n  };\r\n\r\n  const handleShow = (e, id) => {\r\n    if (e === \"add\") {\r\n      setShow(e);\r\n\r\n    } else {\r\n      function getBlog() {\r\n        try {\r\n          axios\r\n            .post(`${process.env.REACT_APP_BASEURL}/blogs`, {\r\n              id: e,\r\n              for_: \"admin\",\r\n              recent: \"\",\r\n              category: [],\r\n              product_tag: \"\",\r\n            })\r\n            .then((response) => {\r\n              let data = response.data[0];\r\n              setaddBlog(data);\r\n              setsearchData(response.data);\r\n              setId(data.id);\r\n              setapicall(false);\r\n            });\r\n        } catch (err) { }\r\n      }\r\n      getBlog();\r\n      setShow(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    function getBlogList() {\r\n      try {\r\n        axios\r\n          .post(`${process.env.REACT_APP_BASEURL}/blogs`, {\r\n            id: \"\",\r\n            for_: \"admin\",\r\n            recent: \"\",\r\n            category: [],\r\n            product_tag: \"\",\r\n          })\r\n          .then((response) => {\r\n            let data = response.data[0];\r\n            // if (data.message !== \"No blogs Data\") {\r\n\r\n            //   setBlog(data);\r\n            //   setapicall(false);\r\n            // }\r\n\r\n            setBlog(data);\r\n            setaddBlog(response.data);\r\n            setsearchData(data);\r\n            setCondition(false);\r\n          });\r\n      } catch (err) { }\r\n    }\r\n\r\n    getBlogList();\r\n  }, [apicall]);\r\n\r\n\r\n\r\n  const AddBlog = (e, id) => {\r\n    const adminid = localStorage.getItem(\"encryptadminid\");\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      setValidated(true);\r\n    }\r\n    if (form.checkValidity() === true) {\r\n      e.preventDefault();\r\n      const formData = new FormData();\r\n\r\n      formData.append(\"image\", file);\r\n      formData.append(\"filename\", fileName);\r\n      formData.append(\"admin_id\", adminid);\r\n      formData.append(\"title\", addblog.title);\r\n      formData.append(\"description\", addblog.description);\r\n      formData.append(\"category\", addblog.category);\r\n      formData.append(\"product_tag\", addblog.product_tag);\r\n      formData.append(\"publish_date\", addblog.publish_date);\r\n      axios\r\n        .post(`${process.env.REACT_APP_BASEURL}/add_blog`, formData)\r\n        .then((response) => {\r\n          // let data = response.data;\r\n          setShow(false);\r\n          setapicall(true);\r\n          setAddAlert(true);\r\n          formRef.current.reset();\r\n\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      formRef.current.reset();\r\n      setValidated(false);\r\n    }\r\n  };\r\n  const UpdateBlog = (e, show) => {\r\n    const adminid = localStorage.getItem(\"encryptadminid\");\r\n    const formData = new FormData();\r\n    e.preventDefault();\r\n\r\n    formData.append(\"image\", file);\r\n    formData.append(\"filename\", fileName);\r\n    formData.append(\"admin_id\", adminid);\r\n    formData.append(\"title\", addblog.title);\r\n    formData.append(\"description\", addblog.description);\r\n    formData.append(\"category\", addblog.category);\r\n    formData.append(\"product_tag\", addblog.product_tag);\r\n    formData.append(\"publish_date\", addblog.publish_date);\r\n    formData.append(\"id\", `${id}`);\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/update_blog`, formData)\r\n      .then((response) => {\r\n        // let data = response.data;\r\n        setapicall(true);\r\n        setShow(false);\r\n        setUpdateAlert(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    formRef.current.reset();\r\n    setValidated(false);\r\n    show.preventDefault();\r\n  };\r\n  const handleAlert = (id, title) => {\r\n    setId(id);\r\n    setBlogName(title);\r\n    setAlert(true);\r\n  };\r\n\r\n  const hideAlert = () => {\r\n    axios.put(`${process.env.REACT_APP_BASEURL}/delete_blog`, {\r\n      is_delete: \"0\",\r\n      id: `${id}`,\r\n    });\r\n    setapicall(true);\r\n    setAlert(false);\r\n  };\r\n\r\n  // To cancel in the delete alert :-\r\n\r\n  const CancelAlert = () => {\r\n    setAlert(false);\r\n  };\r\n  const columns = [\r\n    {\r\n      name: \"Admin_id\",\r\n      selector: (row) => row.admin_id,\r\n      sortable: true,\r\n      width: \"100px\",\r\n\r\n    },\r\n    {\r\n      name: \"id\",\r\n      selector: (row) => row.id,\r\n      width: \"100px\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Logo\",\r\n      width: \"100px\",\r\n      center: true,\r\n      cell: (row) => (\r\n        <>\r\n          <img\r\n            height=\"90px\"\r\n            width=\"75px\"\r\n            alt={row.owner_name}\r\n            src={row.image}\r\n            style={{\r\n              borderRadius: 10,\r\n              paddingTop: 10,\r\n              paddingBottom: 10,\r\n              textAlign: \"right\",\r\n            }}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      name: \"Title\",\r\n      selector: (row) => row.title,\r\n      sortable: true,\r\n      width: \"100px\",\r\n\r\n    },\r\n    {\r\n      name: \"Category\",\r\n      selector: (row) => row.category,\r\n      sortable: true,\r\n      width: \"100px\"\r\n\r\n\r\n    },\r\n    {\r\n      name: \"Product_tag\",\r\n      selector: (row) => row.product_tag,\r\n      sortable: true,\r\n      width: \"100px\"\r\n    },\r\n    {\r\n      name: \"Description\",\r\n      selector: (row) => row.description,\r\n      sortable: true,\r\n      width: \"100px\"\r\n    },\r\n    {\r\n      name: \"Publish_date\",\r\n      selector: (row) => moment(row.publish_date).format(\"YYYY-MM-DD\"),\r\n      sortable: true,\r\n      center: true,\r\n      width: \"100px\"\r\n    },\r\n    {\r\n      name: \"Status\",\r\n      selector: (row) => (\r\n        <Badge\r\n          bg={\r\n            row.status === \"approved\"\r\n              ? \"success\"\r\n              : row.status === \"pending\"\r\n                ? \"warning\"\r\n                : row.status === \"published\"\r\n                  ? \"info\"\r\n                  : null\r\n          }\r\n        >\r\n          {row.status}\r\n        </Badge>\r\n      ),\r\n      sortable: true,\r\n      width: \"100px\",\r\n      // center: true,\r\n    },\r\n    {\r\n      name: \"Change Status\",\r\n      selector: (row) => (\r\n        <Form.Select\r\n          aria-label=\"Search by delivery\"\r\n          size=\"sm\"\r\n          className=\"w-100\"\r\n          onChange={(e) => onStatusChange(e, row.id, row.status)}\r\n          name=\"status\"\r\n        >\r\n          <option\r\n            value=\"pending\"\r\n            disabled={condition ? true : false}\r\n            selected={row.status === \"pending\" ? true : false}\r\n          >\r\n            Pending\r\n          </option>\r\n          <option\r\n            value=\"published\"\r\n            disabled={condition ? true : false}\r\n            selected={row.status === \"published\" ? true : false}\r\n          >\r\n            Published\r\n          </option>\r\n          <option\r\n            value=\"approved\"\r\n            disabled={condition ? true : false}\r\n            selected={row.status === \"approved\" ? true : false}\r\n          >\r\n            Approved{\" \"}\r\n          </option>\r\n        </Form.Select>\r\n      ),\r\n      sortable: true,\r\n      width: \"100px\"\r\n    },\r\n    {\r\n      name: \"ACTION\",\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(\r\n              this,\r\n              row.id,\r\n              row.title,\r\n              row.category,\r\n              row.description,\r\n              row.product_tag,\r\n              row.publish_date,\r\n              row.image\r\n            )}\r\n          />\r\n          <BsTrash\r\n            className=\" p-0 m-0 editiconn text-danger\"\r\n            onClick={handleAlert.bind(this, row.id, row.title)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  // const result1 = searchdata.filter(\r\n  //   (thing, index, self) =>\r\n  //     index === self.findIndex((t) => t.category == thing.category)\r\n  // );\r\n  // const result2 = searchdata.filter(\r\n  //   (thing, index, self) =>\r\n  //     index === self.findIndex((t) => t.product_tag == thing.product_tag)\r\n  // );\r\n  // const handleClick = () => { };\r\n  const onStatusChange = (e, id) => {\r\n    setchangstatus(e.target.value);\r\n    setCondition(true);\r\n    axios\r\n      .put(`${process.env.REACT_APP_BASEURL}/update_blog_status`, {\r\n        status: e.target.value,\r\n\r\n        id: `${id}`,\r\n      })\r\n      .then((response) => {\r\n        let data = response.data;\r\n        setStatus(data);\r\n        setCondition(false);\r\n        setapicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        setCondition(false);\r\n      });\r\n  };\r\n\r\n  let date = moment();\r\n  let currentDate = date.format(\"YYYY-MM-DD\");\r\n\r\n  return (\r\n    <div>\r\n      <h2>Blog List</h2>\r\n\r\n      {/* search bar */}\r\n      <div className=\"card p-3\">\r\n        <div className=\"row page_searchbox\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <input\r\n              type={\"text\"}\r\n              placeholder={\"Search by Days\"}\r\n              onChange={onRecentSearch}\r\n              name=\"recent\"\r\n              className={\"form-control\"}\r\n            />\r\n          </div>\r\n\r\n          {/* <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by Category\"\r\n              className=\"adminselectbox\"\r\n              onChange={OnCtegorySearch}\r\n              name=\"category\"\r\n            >\r\n              <option value={\"\"}>Select Category</option>\r\n              {result1.map((searchData) => {\r\n                return (\r\n                  <>\r\n                    <option value={searchData.category}>\r\n                      {searchData.category}\r\n                    </option>\r\n                  </>\r\n                );\r\n              })}\r\n            </Form.Select>\r\n          </div> */}\r\n          {/* <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by Store Type\"\r\n              className=\"adminselectbox\"\r\n              name=\"product_tag\"\r\n              onChange={(e) => {\r\n                setProductTagSearch(e.target.value);\r\n              }}\r\n            >\r\n              <option value={\"\"}>Select Product Tag</option>\r\n              {result2.map((searchData) => {\r\n                return (\r\n                  <>\r\n                    <option value={searchData.product_tag}>\r\n                      {searchData.product_tag}\r\n                    </option>\r\n                  </>\r\n                );\r\n              })}\r\n            </Form.Select>\r\n          </div> */}\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <button\r\n              className=\"button main_button w-100\"\r\n              onClick={() => onSearchClick()}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"product_page_uploadbox my-4\">\r\n          <button\r\n            className=\"button main_button ml-auto\"\r\n            onClick={() => handleShow(\"add\")}\r\n          >\r\n            Add Blogs\r\n          </button>\r\n        </div>\r\n        <DataTable\r\n          columns={columns}\r\n          className=\"main_data_table\"\r\n          data={blog}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n        />\r\n        <SAlert\r\n          show={Alert}\r\n          title={blogName}\r\n          text=\"Are you Sure you want to delete\"\r\n          onConfirm={hideAlert}\r\n          showCancelButton={true}\r\n          onCancel={CancelAlert}\r\n        />\r\n      </div>\r\n      <Modal size=\"lg\" show={show} onHide={() => handleClose()}>\r\n        <Form\r\n          className=\"\"\r\n          noValidate\r\n          validated={validated}\r\n          ref={formRef}\r\n          onSubmit={show === \"add\" ? (e) => AddBlog(e) : (e) => UpdateBlog(e)}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              {show === \"add\" ? \"Add New Blog \" : \" Update Blog \"}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"row p-3 m-0\">\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom01\"\r\n                >\r\n                  <Form.Label>Title</Form.Label>\r\n                  <Form.Control\r\n                    onChange={(e) => handleFormChange(e)}\r\n                    required\r\n                    value={addblog.title}\r\n                    type=\"text\"\r\n                    placeholder=\"Add Title\"\r\n                    name={\"title\"}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill title\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom06\"\r\n                >\r\n                  <Form.Label>Category</Form.Label>\r\n                  <Form.Select\r\n                    size=\"sm\"\r\n                    aria-label=\"Default select example\"\r\n                    onChange={(e) => handleFormChange(e)}\r\n                    required\r\n                    value={addblog.category}\r\n                    name={\"category\"}\r\n                  >\r\n                    <option>Select Category</option>\r\n                    {(CategoryJson.categorytype || []).map((blogcat) => {\r\n                      return <option value={blogcat}>{blogcat}</option>;\r\n                    })}\r\n\r\n\r\n                  </Form.Select>\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill category\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"formBasicStartDate\"\r\n                >\r\n                  <Form.Label>Publish Date</Form.Label>\r\n                  <Form.Control\r\n                    name=\"publish_date\"\r\n                    min={currentDate}\r\n                    type=\"date\"\r\n                    defaultValue={\r\n                      show === \"add\"\r\n                        ? \"\"\r\n                        : moment(addblog.publish_date).format(\"YYYY-MM-DD\")\r\n                    }\r\n                    onChange={(e) => handleFormChange(e)}\r\n                    required\r\n                    placeholder=\"Blog Date\"\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill date\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom01\"\r\n                >\r\n                  <Form.Label>Product_Tag</Form.Label>\r\n                  <Form.Control\r\n                    onChange={(e) => handleFormChange(e)}\r\n                    required\r\n                    value={addblog.product_tag}\r\n                    type=\"text\"\r\n                    placeholder=\"Add Tag\"\r\n                    name={\"product_tag\"}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill field\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-12\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom05\"\r\n                >\r\n                  <Form.Label>Description</Form.Label>\r\n                  <Form.Control\r\n                    className=\"vendor_address\"\r\n                    as=\"textarea\"\r\n                    rows={3}\r\n                    placeholder=\"write your blog...\"\r\n                    name={\"description\"}\r\n                    onChange={(e) => handleFormChange(e)}\r\n                    required\r\n                    value={addblog.description}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill description\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n\r\n              <div classImg=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom08\"\r\n                >\r\n                  <Form.Label>Blog Image</Form.Label>\r\n                  <Form.Control\r\n                    // onChange={(e) => saveFile(e)}\r\n                    onChange={(e) => ImgFormChange(e)}\r\n                    src={addblog.image}\r\n                    type=\"file\"\r\n                    placeholder=\"Shop_logo\"\r\n                    name={\"image\"}\r\n                  />\r\n                  <p className=\"mt-2 text-danger  fs-6\" type=\"invalid\">\r\n                    Select Image This (height-198px * width-198px)\r\n                  </p>\r\n                </Form.Group>\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Iconbutton\r\n              type={\"button\"}\r\n              btntext={\"Cancel\"}\r\n              onClick={() => handleClose()}\r\n              btnclass={\"button main_outline_button \"}\r\n            />\r\n            <Iconbutton\r\n              type={\"submit\"}\r\n              btntext={show === \"add\" ? \"Add Blog\" : \"Update Blog\"}\r\n              btnclass={\"button main_button \"}\r\n            />\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n\r\n      <SAlert\r\n        show={AddAlert}\r\n        title=\"Added Blog Successfully \"\r\n        onConfirm={closeAddAlert}\r\n      />\r\n      <SAlert\r\n        show={UpdateAlert}\r\n        title=\"Updated Blog Successfully \"\r\n        onConfirm={closeUpdateAlert}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlogList;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\email_send\\email_send.js",["492"],[],"import React, { useState, useRef } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\nimport { CKEditor } from \"ckeditor4-react\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport EmailType from \"../json/EmailType\";\r\nimport EmailStatus from \"../json/EmailStatus\";\r\n// import { Alert } from \"bootstrap\";\r\nimport SAlert from \"../common/salert\";\r\n\r\nconst EmailSend = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const [emaildata, setEmaildata] = useState({\r\n    email_type: \"\",\r\n    email_text: \"\",\r\n    type: \"\",\r\n    status: \"\",\r\n    test_email: \"\",\r\n    email_name: \"\",\r\n    text_msg: \"\",\r\n  });\r\n\r\n  const [AddAlert, setAddAlert] = useState(false);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  let [condition, setCondition] = useState(false);\r\n  const [emailText, setEmailText] = useState(\"\");\r\n  const [getEmaildata, setGetEmaildata] = useState([]);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [getemailtype, setGetEmailtype] = useState(\"\");\r\n  const [getusertype, setGetUserType] = useState(\"\");\r\n  const [getemailStatus, setGetEmailStatus] = useState(\"\");\r\n  const [changstatus, setchangstatus] = useState(\"\");\r\n\r\n  const formRef = useRef();\r\n\r\n  const [validated, setValidated] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n\r\n  const closeAddAlert = () => {\r\n    setAddAlert(false);\r\n  };\r\n\r\n  const closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n\r\n  const handleShow = (e) => {\r\n    if (e === \"add\") {\r\n      setShow(e);\r\n    }\r\n    if (e !== \"add\") {\r\n      try {\r\n        axios\r\n          .get(`${process.env.REACT_APP_BASEURL}/email_template_get?id=${e}`, {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          })\r\n          .then((response) => {\r\n            setEmaildata(response.data[0]);\r\n\r\n            setEmailText(response.data[0].email_text);\r\n          });\r\n      } catch (err) { }\r\n    }\r\n\r\n    setShow(e);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setEmaildata({});\r\n\r\n    setValidated(false);\r\n    setShow(false);\r\n  };\r\n  const columns = [\r\n    {\r\n      name: \"Email Type\",\r\n      width: \"130px\",\r\n      selector: (row) => row.email_type,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"User Type\",\r\n      width: \"120px\",\r\n      selector: (row) => row.type,\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Title\",\r\n      width: \"100px\",\r\n\r\n      selector: (row) => row.email_name,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Email Text\",\r\n      width: \"500px\",\r\n\r\n      selector: (row) => (\r\n        <div className=\"spanText\">\r\n          {\" \"}\r\n          <span dangerouslySetInnerHTML={{ __html: row.email_text }}></span>\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Status\",\r\n\r\n      selector: (row) => (\r\n        <span\r\n          className={\r\n            row.status === \"active\"\r\n              ? \"badge bg-success\"\r\n              : row.status === \"pending\"\r\n                ? \"badge bg-primary\"\r\n                : row.status === \"hold\"\r\n                  ? \"badge bg-danger\"\r\n                  : \"badge bg-dark\"\r\n          }\r\n        >\r\n          {row.status === \"pending\"\r\n            ? \"Pending\"\r\n            : row.status === \"active\"\r\n              ? \"Active\"\r\n              : row.status === \"hold\"\r\n                ? \"Hold\"\r\n                : \"No status\"}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Change Status\",\r\n      selector: (row) => (\r\n        <Form.Select\r\n          aria-label=\"Search By status\"\r\n          size=\"sm\"\r\n          className=\"w-100\"\r\n          onChange={(e) => onStatusChange(e, row.id)}\r\n          name=\"status\"\r\n        >\r\n          <option\r\n            value=\"pending\"\r\n            disabled={condition ? true : false}\r\n            selected={row.status === \"pending\" ? true : false}\r\n          >\r\n            Pending\r\n          </option>\r\n          <option\r\n            value=\"active\"\r\n            disabled={condition ? true : false}\r\n            selected={row.status === \"active\" ? true : false}\r\n          >\r\n            Active\r\n          </option>\r\n          <option\r\n            value=\"hold\"\r\n            disabled={condition ? true : false}\r\n            selected={row.status === \"hold\" ? true : false}\r\n          >\r\n            Hold\r\n          </option>\r\n        </Form.Select>\r\n      ),\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"ACTION\",\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.id)}\r\n          />\r\n          <BsTrash\r\n            className=\" p-0 m-0 editiconn text-danger\"\r\n            onClick={deleteEmail.bind(this, row.id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const EmailTextHandler = (e) => {\r\n    let newTemp;\r\n    if (e.editor.getData() !== undefined) {\r\n      newTemp = e.editor.getData().replaceAll(/\"/g, \"'\");\r\n    }\r\n    setEmailText(newTemp);\r\n  };\r\n\r\n  const valueHandler = (e) => {\r\n    setEmaildata({ ...emaildata, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const EmailSubmitHandler = (e) => {\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      setValidated(true);\r\n      setapicall(true);\r\n    } else {\r\n      e.preventDefault();\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL}/add_email_template`,\r\n          {\r\n            type: emaildata.type,\r\n            email_type: emaildata.email_type,\r\n            email_name: emaildata.email_name,\r\n            email_text: emailText,\r\n            text_msg: emaildata.text_msg,\r\n            test_email: emaildata.test_email,\r\n            status: emaildata.status,\r\n          },\r\n          {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setAddAlert(true);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n      formRef.current.reset();\r\n      setValidated(false);\r\n      setapicall(true);\r\n\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  const UpdateEmailHandler = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL}/update_email_template`,\r\n        {\r\n          id: emaildata.id,\r\n          type: emaildata.type,\r\n          email_type: emaildata.email_type,\r\n          email_name: emaildata.email_name,\r\n          email_text: emailText,\r\n          text_msg: emaildata.text_msg,\r\n          test_email: emaildata.test_email,\r\n          status: emaildata.status,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setUpdateAlert(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    formRef.current.reset();\r\n    setValidated(false);\r\n    setapicall(true);\r\n\r\n    setShow(false);\r\n  };\r\n\r\n  const fetchEmailData = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/email_template_list`,\r\n        {\r\n          type: getusertype,\r\n          email_type: getemailtype,\r\n          status: getemailStatus,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        let data = response.data.filter((item) => item.is_deleted === 1);\r\n\r\n        setGetEmaildata(data);\r\n        setCondition(false);\r\n        setapicall(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const onStatusChange = (e, id) => {\r\n    setchangstatus(e.target.value);\r\n    setCondition(true);\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL}/email_template_status`,\r\n        {\r\n          status: e.target.value,\r\n          id: `${id}`,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setCondition(false);\r\n        setapicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        setCondition(false);\r\n      });\r\n  };\r\n\r\n  const deleteEmail = (id) => {\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL}/email_template_remove`,\r\n        {\r\n          is_deleted: 0,\r\n          id: `${id}`,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setapicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEmailData();\r\n  }, [apicall, changstatus]);\r\n\r\n  const SearchHandler = () => {\r\n    setapicall(true);\r\n    fetchEmailData();\r\n  };\r\n  return (\r\n    <div>\r\n      <h2>Send Email</h2>\r\n\r\n      {/* search bar */}\r\n      <div className=\"card p-3\">\r\n        <div className=\"row page_searchbox\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Email Type\"\r\n              className=\"adminselectbox\"\r\n              name=\"category\"\r\n              onChange={(e) => {\r\n                setGetEmailtype(e.target.value);\r\n              }}\r\n            >\r\n              {\" \"}\r\n              <option value={\"\"}>Email Type</option>\r\n              {(EmailType.EmailType || []).map((item) => {\r\n                return <option value={item}>{item}</option>;\r\n              })}\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by Store Type\"\r\n              className=\"adminselectbox\"\r\n              name=\"User Type\"\r\n              onChange={(e) => {\r\n                setGetUserType(e.target.value);\r\n              }}\r\n            >\r\n              <option value={\"\"}>User Type</option>\r\n              <option value={\"admin\"}>Admin</option>\r\n              <option value={\"vendor\"}>Vendor</option>\r\n              <option value={\"user\"}>User</option>\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by Store Type\"\r\n              className=\"adminselectbox\"\r\n              name=\"Status\"\r\n              onChange={(e) => {\r\n                setGetEmailStatus(e.target.value);\r\n              }}\r\n            >\r\n              <option value={\"\"}>Status</option>\r\n              {(EmailStatus.EmailStatus || []).map((item) => {\r\n                return <option value={item}>{item}</option>;\r\n              })}\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <button\r\n              className=\"button main_button w-100\"\r\n              onClick={SearchHandler}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"product_page_uploadbox my-4\">\r\n          <button\r\n            className=\"button main_button ml-auto\"\r\n            onClick={() => handleShow(\"add\")}\r\n          >\r\n            Add Email\r\n          </button>\r\n        </div>\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          className=\"main_data_table\"\r\n          data={getEmaildata}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n        />\r\n      </div>\r\n      <Modal size=\"lg\" show={show} onHide={() => handleClose()}>\r\n        <Form\r\n          className=\"\"\r\n          noValidate\r\n          validated={validated}\r\n          ref={formRef}\r\n          onSubmit={\r\n            show === \"add\"\r\n              ? (e) => EmailSubmitHandler(e)\r\n              : (show) => UpdateEmailHandler(show)\r\n          }\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              {show === \"add\" ? \"Add New Email \" : \" Update Email\"}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"row p-3 m-0\">\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom06\"\r\n                >\r\n                  <Form.Label>Email Type</Form.Label>\r\n                  <Form.Select\r\n                    size=\"sm\"\r\n                    aria-label=\"\"\r\n                    value={emaildata.email_type}\r\n                    name={\"email_type\"}\r\n                    onChange={(e) => {\r\n                      valueHandler(e);\r\n                    }}\r\n                    required\r\n                  >\r\n                    <option value={\"\"}>Email Type</option>\r\n                    {(EmailType.EmailType || []).map((item) => {\r\n                      return <option value={item}>{item}</option>;\r\n                    })}\r\n                  </Form.Select>\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom06\"\r\n                >\r\n                  <Form.Label>User Type</Form.Label>\r\n                  <Form.Select\r\n                    size=\"sm\"\r\n                    aria-label=\"\"\r\n                    name={\"type\"}\r\n                    onChange={(e) => {\r\n                      valueHandler(e);\r\n                    }}\r\n                    value={emaildata.type}\r\n                    required\r\n                  >\r\n                    <option value={\"\"}>User Type</option>\r\n                    <option value={\"admin\"}>Admin</option>\r\n                    <option value={\"vendor\"}>Vendor</option>\r\n                    <option value={\"user\"}>User</option>\r\n                  </Form.Select>\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill category\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom06\"\r\n                >\r\n                  <Form.Label>Status</Form.Label>\r\n                  <Form.Select\r\n                    size=\"sm\"\r\n                    aria-label=\"\"\r\n                    value={emaildata.status}\r\n                    name={\"status\"}\r\n                    onChange={(e) => {\r\n                      valueHandler(e);\r\n                    }}\r\n                    required\r\n                  >\r\n                    <option value={\"\"}>Status</option>\r\n                    {(EmailStatus.EmailStatus || []).map((item) => {\r\n                      return <option value={item}>{item}</option>;\r\n                    })}\r\n                  </Form.Select>\r\n\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill category\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-sm-6 aos_input\">\r\n                <Form.Label>Email Title</Form.Label>\r\n                <input\r\n                  type={\"text\"}\r\n                  placeholder={\"Email Title\"}\r\n                  className={\"adminsideinput\"}\r\n                  value={emaildata.email_name}\r\n                  name={\"email_name\"}\r\n                  onChange={(e) => {\r\n                    valueHandler(e);\r\n                  }}\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-6 aos_input\">\r\n                <Form.Label> Text Message</Form.Label>\r\n                <input\r\n                  type={\"text\"}\r\n                  placeholder={\"Text Message\"}\r\n                  className={\"adminsideinput\"}\r\n                  value={emaildata.text_msg}\r\n                  name={\"text_msg\"}\r\n                  onChange={(e) => {\r\n                    valueHandler(e);\r\n                  }}\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-6 aos_input\">\r\n                <Form.Label> Test Email </Form.Label>\r\n                <input\r\n                  type={\"text\"}\r\n                  placeholder={\"Test Email \"}\r\n                  className={\"adminsideinput\"}\r\n                  value={emaildata.test_email}\r\n                  name={\"test_email\"}\r\n                  onChange={(e) => {\r\n                    valueHandler(e);\r\n                  }}\r\n                  required\r\n                />\r\n              </div>\r\n              <div sm=\"12\" className=\"mt-3\">\r\n                <CKEditor\r\n                  data={emailText}\r\n                  initData={emailText}\r\n                  type={\"classic\"}\r\n                  onChange={(e) => EmailTextHandler(e)}\r\n                  name={\"email_text\"}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <button\r\n              type={\"button\"}\r\n              className=\"button main_outline_button\"\r\n              onClick={() => handleClose()}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <Iconbutton\r\n              type={\"submit\"}\r\n              btntext={show === \"add\" ? \"Add Email\" : \"Update Email\"}\r\n              btnclass={\"button main_button \"}\r\n            />\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <SAlert\r\n        show={AddAlert}\r\n        title=\"Added Email Successfully \"\r\n        onConfirm={closeAddAlert}\r\n      />\r\n      <SAlert\r\n        show={UpdateAlert}\r\n        title=\"Updated Email Successfully \"\r\n        onConfirm={closeUpdateAlert}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailSend;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\notification\\Notification.js",["493"],[],"import React, { useState, useRef } from \"react\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { BsTrash } from \"react-icons/bs\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport Iconbutton from \"../common/iconbutton\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport NotificationType from \"../json/NotificationType\";\r\nimport NotificationStatus from \"../json/NotificationStatus\";\r\n// import { Alert } from \"bootstrap\";\r\nimport SAlert from \"../common/salert\";\r\n\r\nconst Notification = () => {\r\n  // Declaration of States or valiables :-\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [Notificationdata, setNotificationdata] = useState({\r\n    notification_type: \"\",\r\n    notification_text: \"\",\r\n    type: \"\",\r\n    status: \"\",\r\n    notification_name: \"\",\r\n  });\r\n  const [AddAlert, setAddAlert] = useState(false);\r\n  const [UpdateAlert, setUpdateAlert] = useState(false);\r\n  const [deleteAlert, setDeleteAlert] = useState(false);\r\n  const [id, setId] = useState();\r\n  const [getNotificationdata, setGetNotificationdata] = useState([]);\r\n  const [apicall, setapicall] = useState(false);\r\n  const [getNotificationType, setNotificationType] = useState(\"\");\r\n  const [getusertype, setGetUserType] = useState(\"\");\r\n  const [getNotificationStatus, setGetNotificationStatus] = useState(\"\");\r\n  const [changstatus, setchangstatus] = useState(\"\");\r\n  const formRef = useRef();\r\n  const [validated, setValidated] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n\r\n  //To close sweetalert after Added notification :-\r\n\r\n  const closeAddAlert = () => {\r\n    setAddAlert(false);\r\n  };\r\n\r\n  //To close sweetalert after update :-\r\n\r\n  const closeUpdateAlert = () => {\r\n    setUpdateAlert(false);\r\n  };\r\n\r\n  //To show or open the modal to add or update notification :-\r\n\r\n  const handleShow = (e, id) => {\r\n    if (e === \"add\") {\r\n      setShow(e);\r\n    }\r\n    if (e !== \"add\") {\r\n      try {\r\n        axios\r\n          .get(\r\n            `${process.env.REACT_APP_BASEURL}/notification_template_get?id=${e}`,\r\n            {\r\n              headers: {\r\n                admin_token: token,\r\n              },\r\n            }\r\n          )\r\n          .then((response) => {\r\n            setNotificationdata(response.data[0]);\r\n            setId(id);\r\n          });\r\n      } catch (err) { }\r\n    }\r\n\r\n    setShow(e);\r\n  };\r\n\r\n  //To close the Model or On click on cancel :-\r\n\r\n  const handleClose = () => {\r\n    setNotificationdata({});\r\n    setValidated(false);\r\n    setShow(false);\r\n  };\r\n\r\n  //To show the  Data in the table :-\r\n\r\n  const columns = [\r\n    {\r\n      name: \"Notofication Type\",\r\n      width: \"130px\",\r\n      selector: (row) => row.notification_type,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"User Type\",\r\n      width: \"120px\",\r\n      selector: (row) => row.type,\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Title\",\r\n      width: \"100px\",\r\n\r\n      selector: (row) => row.notification_name,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Notification Text\",\r\n      width: \"500px\",\r\n\r\n      selector: (row) => row.notification_text,\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"Status\",\r\n\r\n      selector: (row) => (\r\n        <span\r\n          className={\r\n            row.status === \"active\"\r\n              ? \"badge bg-success\"\r\n              : row.status === \"pending\"\r\n                ? \"badge bg-primary\"\r\n                : row.status === \"hold\"\r\n                  ? \"badge bg-danger\"\r\n                  : \"badge bg-dark\"\r\n          }\r\n        >\r\n          {row.status === \"pending\"\r\n            ? \"Pending\"\r\n            : row.status === \"active\"\r\n              ? \"Active\"\r\n              : row.status === \"hold\"\r\n                ? \"Hold\"\r\n                : \"No status\"}\r\n        </span>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: \"Change Status\",\r\n      selector: (row) => (\r\n        <Form.Select\r\n          aria-label=\"Search By status\"\r\n          size=\"sm\"\r\n          className=\"w-100\"\r\n          onChange={(e) => onStatusChange(e, row.id)}\r\n          name=\"status\"\r\n        >\r\n          <option\r\n            value=\"pending\"\r\n            selected={row.status === \"pending\" ? true : false}\r\n          >\r\n            Pending\r\n          </option>\r\n          <option\r\n            value=\"active\"\r\n            selected={row.status === \"active\" ? true : false}\r\n          >\r\n            Active\r\n          </option>\r\n          <option value=\"hold\" selected={row.status === \"hold\" ? true : false}>\r\n            Hold\r\n          </option>\r\n        </Form.Select>\r\n      ),\r\n      sortable: true,\r\n    },\r\n\r\n    {\r\n      name: \"ACTION\",\r\n      center: true,\r\n      selector: (row) => (\r\n        <div className={\"actioncolimn\"}>\r\n          <BiEdit\r\n            className=\" p-0 m-0  editiconn text-secondary\"\r\n            onClick={handleShow.bind(this, row.id)}\r\n          />\r\n          <BsTrash\r\n            className=\" p-0 m-0 editiconn text-danger\"\r\n            onClick={ShowDeleteAlert.bind(this, row.id)}\r\n          />\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // OnCahnge function of the input feilds :-\r\n\r\n  const valueHandler = (e) => {\r\n    setNotificationdata({\r\n      ...Notificationdata,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  //ToAdd the Notification :-\r\n\r\n  const NotificationSubmitHandler = (e) => {\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      setValidated(true);\r\n      setapicall(true);\r\n    } else {\r\n      e.preventDefault();\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_BASEURL}/add_notification_template`,\r\n          {\r\n            type: Notificationdata.type,\r\n            notification_type: Notificationdata.notification_type,\r\n            notification_name: Notificationdata.notification_name,\r\n            notification_text: Notificationdata.notification_text,\r\n            status: Notificationdata.status,\r\n          },\r\n          {\r\n            headers: {\r\n              admin_token: token,\r\n            },\r\n          }\r\n        )\r\n        .then((response) => {\r\n          setAddAlert(true);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n\r\n      formRef.current.reset();\r\n      setValidated(false);\r\n      setNotificationdata({});\r\n      setapicall(true);\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  // To update the notification:-\r\n\r\n  const UpdateNotificationHandler = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL}/update_notification_template`,\r\n        {\r\n          id: Notificationdata.id,\r\n          type: Notificationdata.type,\r\n          notification_type: Notificationdata.notification_type,\r\n          notification_name: Notificationdata.notification_name,\r\n          notification_text: Notificationdata.notification_text,\r\n          status: Notificationdata.status,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setUpdateAlert(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    formRef.current.reset();\r\n    setValidated(false);\r\n    setNotificationdata({});\r\n    setapicall(true);\r\n    setShow(false);\r\n  };\r\n\r\n  //To get the data in the list :-\r\n\r\n  const fetchNotificationData = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_BASEURL}/notification_template_list`,\r\n        {\r\n          type: getusertype,\r\n          notification_type: getNotificationType,\r\n          status: getNotificationStatus,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n\r\n        let data = response.data.filter((item) => item.is_deleted === 1);\r\n        setGetNotificationdata(data);\r\n        setapicall(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  //To change the status :-\r\n\r\n  const onStatusChange = (e, id) => {\r\n    setchangstatus(e.target.value);\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL}/notification_template_status`,\r\n        {\r\n          status: e.target.value,\r\n          id: `${id}`,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setapicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  //To delete the Notification :-\r\n\r\n  const deleteNotification = (id) => {\r\n    axios\r\n      .put(\r\n        `${process.env.REACT_APP_BASEURL}/notification_template_remove`,\r\n        {\r\n          is_deleted: 0,\r\n          id: `${id}`,\r\n        },\r\n        {\r\n          headers: {\r\n            admin_token: token,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n        setDeleteAlert(false);\r\n        setapicall(true);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  //To mshow alert delete box :-\r\n\r\n  const ShowDeleteAlert = (id) => {\r\n    setId(id);\r\n    setDeleteAlert(true);\r\n  };\r\n\r\n  //Tocancel the delete alert box :-\r\n\r\n  const CancelDelete = () => {\r\n    setDeleteAlert(false);\r\n  };\r\n\r\n  //To render the page :-\r\n\r\n  useEffect(() => {\r\n    fetchNotificationData();\r\n  }, [apicall, changstatus]);\r\n\r\n  //To search the Notification :-\r\n\r\n  const SearchHandler = () => {\r\n    setapicall(true);\r\n    fetchNotificationData();\r\n  };\r\n  const OnReset = () => {\r\n    setNotificationType(\"\");\r\n    setGetNotificationStatus(\"\");\r\n    setGetUserType(\"\");\r\n    setapicall(true);\r\n  };\r\n  return (\r\n    <div>\r\n      <h2>Notification</h2>\r\n\r\n      {/* search bar */}\r\n      <div className=\"card p-3\">\r\n        <div className=\"row page_searchbox\">\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Email Type\"\r\n              className=\"adminselectbox\"\r\n              name=\"category\"\r\n              onChange={(e) => {\r\n                setNotificationType(e.target.value);\r\n              }}\r\n            >\r\n              {\" \"}\r\n              <option value={\"\"}>Notification Type</option>\r\n              {(NotificationType.NotificationType || []).map((item) => {\r\n                return <option value={item}>{item}</option>;\r\n              })}\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by Store Type\"\r\n              className=\"adminselectbox\"\r\n              name=\"User Type\"\r\n              onChange={(e) => {\r\n                setGetUserType(e.target.value);\r\n              }}\r\n            >\r\n              <option value={\"\"}>User Type</option>\r\n              <option value={\"admin\"}>Admin</option>\r\n              <option value={\"vendor\"}>Vendor</option>\r\n              <option value={\"user\"}>User</option>\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <Form.Select\r\n              aria-label=\"Search by Store Type\"\r\n              className=\"adminselectbox\"\r\n              name=\"Status\"\r\n              onChange={(e) => {\r\n                setGetNotificationStatus(e.target.value);\r\n              }}\r\n            >\r\n              <option value={\"\"}>Status</option>\r\n              {(NotificationStatus.NotificationStatus || []).map((item) => {\r\n                return <option value={item}>{item}</option>;\r\n              })}\r\n            </Form.Select>\r\n          </div>\r\n\r\n          <div className=\"col-md-3 col-sm-6 aos_input\">\r\n            <button\r\n              className=\"button main_button w-100\"\r\n              onClick={SearchHandler}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n          <div className=\"col-md-3 col-sm-6 mt-2 aos_input\">\r\n            <button className=\"button main_button w-100\" onClick={OnReset}>\r\n              Reset\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"product_page_uploadbox my-4\">\r\n          <button\r\n            className=\"button main_button ml-auto\"\r\n            onClick={() => handleShow(\"add\")}\r\n          >\r\n            Add Notification\r\n          </button>\r\n        </div>\r\n\r\n        <DataTable\r\n          columns={columns}\r\n          className=\"main_data_table\"\r\n          data={getNotificationdata}\r\n          pagination\r\n          highlightOnHover\r\n          pointerOnHover\r\n        />\r\n      </div>\r\n      <Modal size=\"lg\" show={show} onHide={() => handleClose()}>\r\n        <Form\r\n          className=\"\"\r\n          noValidate\r\n          validated={validated}\r\n          ref={formRef}\r\n          onSubmit={\r\n            show === \"add\"\r\n              ? (e) => NotificationSubmitHandler(e)\r\n              : (show) => UpdateNotificationHandler(show)\r\n          }\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n              {show === \"add\"\r\n                ? \"Add New Notification \"\r\n                : \" Update Notification\"}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className=\"row p-3 m-0\">\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom06\"\r\n                >\r\n                  <Form.Label>Notification Type</Form.Label>\r\n                  <Form.Select\r\n                    size=\"sm\"\r\n                    aria-label=\"\"\r\n                    value={Notificationdata.notification_type}\r\n                    name={\"notification_type\"}\r\n                    onChange={(e) => {\r\n                      valueHandler(e);\r\n                    }}\r\n                    required\r\n                  >\r\n                    <option value={\"\"}>Notification Type</option>\r\n                    {(NotificationType.NotificationType || []).map((item) => {\r\n                      return <option value={item}>{item}</option>;\r\n                    })}\r\n                  </Form.Select>\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom06\"\r\n                >\r\n                  <Form.Label>User Type</Form.Label>\r\n                  <Form.Select\r\n                    size=\"sm\"\r\n                    aria-label=\"\"\r\n                    name={\"type\"}\r\n                    onChange={(e) => {\r\n                      valueHandler(e);\r\n                    }}\r\n                    value={Notificationdata.type}\r\n                    required\r\n                  >\r\n                    <option value={\"\"}>User Type</option>\r\n                    <option value={\"admin\"}>Admin</option>\r\n                    <option value={\"vendor\"}>Vendor</option>\r\n                    <option value={\"user\"}>User</option>\r\n                  </Form.Select>\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill category\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Form.Group\r\n                  className=\"mb-3 aos_input\"\r\n                  controlId=\"validationCustom06\"\r\n                >\r\n                  <Form.Label>Status</Form.Label>\r\n                  <Form.Select\r\n                    size=\"sm\"\r\n                    aria-label=\"\"\r\n                    value={Notificationdata.status}\r\n                    name={\"status\"}\r\n                    onChange={(e) => {\r\n                      valueHandler(e);\r\n                    }}\r\n                    required\r\n                  >\r\n                    <option value={\"\"}>Status</option>\r\n                    {NotificationStatus.NotificationStatus.map((item) => {\r\n                      return <option value={item}>{item}</option>;\r\n                    })}\r\n                  </Form.Select>\r\n\r\n                  <Form.Control.Feedback type=\"invalid\" className=\"h6\">\r\n                    Please fill category\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </div>\r\n              <div className=\"col-sm-6 aos_input\">\r\n                <Form.Label>Notification Title</Form.Label>\r\n                <br />\r\n                <input\r\n                  type={\"text\"}\r\n                  placeholder={\"Notification Title\"}\r\n                  className={\"adminsideinput\"}\r\n                  value={Notificationdata.notification_name}\r\n                  name={\"notification_name\"}\r\n                  onChange={(e) => {\r\n                    valueHandler(e);\r\n                  }}\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"col-sm-6 aos_input mt-2\">\r\n                <Form.Label>Notification Text</Form.Label>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                  placeholder={\"Notification Text\"}\r\n                  value={Notificationdata.notification_text}\r\n                  name={\"notification_text\"}\r\n                  cols={25}\r\n                  onChange={(e) => {\r\n                    valueHandler(e);\r\n                  }}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <button\r\n              type={\"button\"}\r\n              className=\"button main_outline_button\"\r\n              onClick={() => handleClose()}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <Iconbutton\r\n              type={\"submit\"}\r\n              btntext={\r\n                show === \"add\" ? \"Add Notification\" : \"Update Notification\"\r\n              }\r\n              btnclass={\"button main_button \"}\r\n            />\r\n          </Modal.Footer>\r\n        </Form>\r\n      </Modal>\r\n      <SAlert\r\n        show={AddAlert}\r\n        title=\"Added Notification Successfully \"\r\n        onConfirm={closeAddAlert}\r\n      />\r\n      <SAlert\r\n        show={UpdateAlert}\r\n        title=\"Updated Notification Successfully \"\r\n        onConfirm={closeUpdateAlert}\r\n      />\r\n      <SAlert\r\n        show={deleteAlert}\r\n        title=\"Notification\"\r\n        text=\"Are you Sure you want to delete \"\r\n        onConfirm={() => deleteNotification(id)}\r\n        showCancelButton={true}\r\n        onCancel={CancelDelete}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\useHook.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\button.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\iconbutton.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\loader.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\categorytype.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\salert.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\ImageCropper.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\setting\\FileInput.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\Status.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\variation.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\BrandJson.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellerverifyotp.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellerlogin.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellerchangepassword.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\vendorresetpassword.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\storetype.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\FilterComponent.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\vendor\\sellerforgetpassword.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\common\\input.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\EmailType.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\EmailStatus.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\NotificationType.js",[],[],"C:\\Users\\USER\\Desktop\\apna\\src\\components\\admin\\json\\NotificationStatus.js",[],[],{"ruleId":"494","severity":1,"message":"495","line":68,"column":6,"nodeType":"496","endLine":68,"endColumn":28,"suggestions":"497"},{"ruleId":"494","severity":1,"message":"498","line":87,"column":6,"nodeType":"496","endLine":87,"endColumn":15,"suggestions":"499"},{"ruleId":"494","severity":1,"message":"500","line":423,"column":6,"nodeType":"496","endLine":423,"endColumn":38,"suggestions":"501"},{"ruleId":"494","severity":1,"message":"502","line":502,"column":6,"nodeType":"496","endLine":502,"endColumn":25,"suggestions":"503"},{"ruleId":"494","severity":1,"message":"504","line":662,"column":6,"nodeType":"496","endLine":662,"endColumn":8,"suggestions":"505"},{"ruleId":"494","severity":1,"message":"506","line":973,"column":6,"nodeType":"496","endLine":973,"endColumn":56,"suggestions":"507"},{"ruleId":"494","severity":1,"message":"502","line":1454,"column":6,"nodeType":"496","endLine":1454,"endColumn":24,"suggestions":"508"},{"ruleId":"494","severity":1,"message":"502","line":1489,"column":6,"nodeType":"496","endLine":1489,"endColumn":19,"suggestions":"509"},{"ruleId":"494","severity":1,"message":"502","line":1493,"column":6,"nodeType":"496","endLine":1493,"endColumn":20,"suggestions":"510"},{"ruleId":"494","severity":1,"message":"511","line":1569,"column":6,"nodeType":"496","endLine":1577,"endColumn":4,"suggestions":"512"},{"ruleId":"494","severity":1,"message":"513","line":116,"column":6,"nodeType":"496","endLine":116,"endColumn":8,"suggestions":"514"},{"ruleId":"494","severity":1,"message":"515","line":123,"column":6,"nodeType":"496","endLine":123,"endColumn":20,"suggestions":"516"},{"ruleId":"494","severity":1,"message":"517","line":224,"column":6,"nodeType":"496","endLine":224,"endColumn":15,"suggestions":"518"},{"ruleId":"494","severity":1,"message":"519","line":266,"column":6,"nodeType":"496","endLine":266,"endColumn":13,"suggestions":"520"},{"ruleId":"494","severity":1,"message":"515","line":290,"column":6,"nodeType":"496","endLine":290,"endColumn":19,"suggestions":"521"},{"ruleId":"494","severity":1,"message":"522","line":335,"column":6,"nodeType":"496","endLine":335,"endColumn":15,"suggestions":"523"},{"ruleId":"494","severity":1,"message":"515","line":342,"column":6,"nodeType":"496","endLine":342,"endColumn":20,"suggestions":"524"},{"ruleId":"494","severity":1,"message":"519","line":604,"column":6,"nodeType":"496","endLine":604,"endColumn":13,"suggestions":"525"},{"ruleId":"494","severity":1,"message":"515","line":628,"column":6,"nodeType":"496","endLine":628,"endColumn":19,"suggestions":"526"},{"ruleId":"494","severity":1,"message":"522","line":59,"column":6,"nodeType":"496","endLine":59,"endColumn":15,"suggestions":"527"},{"ruleId":"494","severity":1,"message":"528","line":33,"column":6,"nodeType":"496","endLine":33,"endColumn":8,"suggestions":"529"},{"ruleId":"494","severity":1,"message":"530","line":163,"column":6,"nodeType":"496","endLine":163,"endColumn":15,"suggestions":"531"},{"ruleId":"494","severity":1,"message":"532","line":72,"column":6,"nodeType":"496","endLine":72,"endColumn":15,"suggestions":"533"},{"ruleId":"494","severity":1,"message":"534","line":204,"column":6,"nodeType":"496","endLine":204,"endColumn":15,"suggestions":"535"},{"ruleId":"494","severity":1,"message":"532","line":348,"column":6,"nodeType":"496","endLine":348,"endColumn":15,"suggestions":"536"},{"ruleId":"494","severity":1,"message":"534","line":400,"column":6,"nodeType":"496","endLine":400,"endColumn":15,"suggestions":"537"},{"ruleId":"494","severity":1,"message":"534","line":455,"column":6,"nodeType":"496","endLine":455,"endColumn":15,"suggestions":"538"},{"ruleId":"494","severity":1,"message":"539","line":177,"column":6,"nodeType":"496","endLine":177,"endColumn":15,"suggestions":"540"},{"ruleId":"494","severity":1,"message":"541","line":222,"column":6,"nodeType":"496","endLine":222,"endColumn":18,"suggestions":"542"},{"ruleId":"494","severity":1,"message":"543","line":226,"column":6,"nodeType":"496","endLine":226,"endColumn":8,"suggestions":"544"},{"ruleId":"494","severity":1,"message":"545","line":248,"column":6,"nodeType":"496","endLine":248,"endColumn":16,"suggestions":"546"},{"ruleId":"494","severity":1,"message":"547","line":251,"column":6,"nodeType":"496","endLine":251,"endColumn":20,"suggestions":"548"},{"ruleId":"494","severity":1,"message":"545","line":322,"column":6,"nodeType":"496","endLine":322,"endColumn":19,"suggestions":"549"},{"ruleId":"494","severity":1,"message":"550","line":367,"column":6,"nodeType":"496","endLine":367,"endColumn":24,"suggestions":"551"},{"ruleId":"494","severity":1,"message":"552","line":125,"column":6,"nodeType":"496","endLine":125,"endColumn":22,"suggestions":"553"},{"ruleId":"494","severity":1,"message":"554","line":132,"column":6,"nodeType":"496","endLine":132,"endColumn":28,"suggestions":"555"},{"ruleId":"494","severity":1,"message":"556","line":410,"column":6,"nodeType":"496","endLine":410,"endColumn":76,"suggestions":"557"},{"ruleId":"494","severity":1,"message":"530","line":129,"column":6,"nodeType":"496","endLine":129,"endColumn":15,"suggestions":"558"},{"ruleId":"494","severity":1,"message":"559","line":135,"column":6,"nodeType":"496","endLine":135,"endColumn":15,"suggestions":"560"},{"ruleId":"494","severity":1,"message":"532","line":132,"column":6,"nodeType":"496","endLine":132,"endColumn":15,"suggestions":"561"},{"ruleId":"494","severity":1,"message":"562","line":184,"column":6,"nodeType":"496","endLine":184,"endColumn":15,"suggestions":"563"},{"ruleId":"494","severity":1,"message":"564","line":46,"column":6,"nodeType":"496","endLine":46,"endColumn":15,"suggestions":"565"},{"ruleId":"494","severity":1,"message":"522","line":214,"column":6,"nodeType":"496","endLine":214,"endColumn":15,"suggestions":"566"},{"ruleId":"494","severity":1,"message":"567","line":143,"column":6,"nodeType":"496","endLine":143,"endColumn":15,"suggestions":"568"},{"ruleId":"494","severity":1,"message":"522","line":131,"column":6,"nodeType":"496","endLine":131,"endColumn":27,"suggestions":"569"},{"ruleId":"494","severity":1,"message":"570","line":315,"column":6,"nodeType":"496","endLine":315,"endColumn":8,"suggestions":"571"},{"ruleId":"494","severity":1,"message":"522","line":179,"column":6,"nodeType":"496","endLine":179,"endColumn":15,"suggestions":"572"},{"ruleId":"494","severity":1,"message":"573","line":254,"column":6,"nodeType":"496","endLine":254,"endColumn":23,"suggestions":"574"},{"ruleId":"494","severity":1,"message":"575","line":791,"column":6,"nodeType":"496","endLine":791,"endColumn":15,"suggestions":"576"},{"ruleId":"494","severity":1,"message":"575","line":135,"column":6,"nodeType":"496","endLine":135,"endColumn":15,"suggestions":"577"},{"ruleId":"494","severity":1,"message":"575","line":293,"column":6,"nodeType":"496","endLine":293,"endColumn":15,"suggestions":"578"},{"ruleId":"494","severity":1,"message":"575","line":289,"column":6,"nodeType":"496","endLine":289,"endColumn":15,"suggestions":"579"},{"ruleId":"494","severity":1,"message":"580","line":196,"column":6,"nodeType":"496","endLine":196,"endColumn":15,"suggestions":"581"},{"ruleId":"494","severity":1,"message":"580","line":134,"column":6,"nodeType":"496","endLine":134,"endColumn":15,"suggestions":"582"},{"ruleId":"494","severity":1,"message":"575","line":135,"column":6,"nodeType":"496","endLine":135,"endColumn":15,"suggestions":"583"},{"ruleId":"494","severity":1,"message":"575","line":133,"column":6,"nodeType":"496","endLine":133,"endColumn":15,"suggestions":"584"},{"ruleId":"585","severity":1,"message":"586","line":29,"column":10,"nodeType":"587","messageId":"588","endLine":29,"endColumn":16},{"ruleId":"494","severity":1,"message":"589","line":362,"column":6,"nodeType":"496","endLine":362,"endColumn":28,"suggestions":"590"},{"ruleId":"494","severity":1,"message":"591","line":375,"column":6,"nodeType":"496","endLine":375,"endColumn":28,"suggestions":"592"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'searchdata.created_on', 'searchdata.status', and 'token'. Either include them or remove the dependency array.","ArrayExpression",["593"],"React Hook useEffect has missing dependencies: 'UserData', 'orderid', and 'token'. Either include them or remove the dependency array.",["594"],"React Hook useEffect has missing dependencies: 'fetchdata' and 'getVendorData'. Either include them or remove the dependency array.",["595"],"React Hook useEffect has a missing dependency: 'productdata'. Either include it or remove the dependency array. You can also do a functional update 'setproductdata(p => ...)' if you only need 'productdata' in the 'setproductdata' call.",["596"],"React Hook useEffect has a missing dependency: 'handleShow'. Either include it or remove the dependency array.",["597"],"React Hook useEffect has missing dependencies: 'product_price', 'saleprice', 'totaltaxx', and 'variantarray'. Either include them or remove the dependency array. You can also do a functional update 'setvariantarray(v => ...)' if you only need 'variantarray' in the 'setvariantarray' call.",["598"],["599"],["600"],["601"],"React Hook useEffect has a missing dependency: 'variantarray'. Either include it or remove the dependency array. You can also do a functional update 'setvariantarray(v => ...)' if you only need 'variantarray' in the 'setvariantarray' call.",["602"],"React Hook useEffect has a missing dependency: 'OnVendorDetail'. Either include it or remove the dependency array.",["603"],"React Hook useEffect has a missing dependency: 'addvendordata'. Either include it or remove the dependency array. You can also do a functional update 'setaddvendordata(a => ...)' if you only need 'addvendordata' in the 'setaddvendordata' call.",["604"],"React Hook useEffect has a missing dependency: 'onImgView'. Either include it or remove the dependency array.",["605"],"React Hook useEffect has missing dependencies: 'AddCustom', 'descval', and 'headerval'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setcustomarray' needs the current value of 'AddCustom'.",["606"],["607"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["608"],["609"],["610"],["611"],["612"],"React Hook useEffect has missing dependencies: 'invoice_no', 'oreder_details', and 'token'. Either include them or remove the dependency array.",["613"],"React Hook useEffect has missing dependencies: 'getVendorData', 'searchdata.brand', 'searchdata.category', 'searchdata.manufacturing_date', 'searchdata.product_title_name', and 'searchdata.vendor'. Either include them or remove the dependency array.",["614"],"React Hook useEffect has a missing dependency: 'getCategoryNameData'. Either include it or remove the dependency array.",["615"],"React Hook useEffect has missing dependencies: 'cat_name_data', 'getVendorData', 'searchdata.brand', 'searchdata.category', 'searchdata.product_title_name', 'searchdata.status', 'searchdata.vendor', and 'token'. Either include them or remove the dependency array.",["616"],["617"],["618"],["619"],"React Hook useEffect has missing dependencies: 'getVendorData', 'searchdata.brand', 'searchdata.category', 'searchdata.product_title_name', 'searchdata.vendor', and 'token'. Either include them or remove the dependency array.",["620"],"React Hook useEffect has a missing dependency: 'productjson'. Either include it or remove the dependency array.",["621"],"React Hook useEffect has a missing dependency: 'varietyjson'. Either include it or remove the dependency array.",["622"],"React Hook useEffect has a missing dependency: 'pdata'. Either include it or remove the dependency array. You can also do a functional update 'setpdata(p => ...)' if you only need 'pdata' in the 'setpdata' call.",["623"],"React Hook useEffect has a missing dependency: 'varietyjson.quantity'. Either include it or remove the dependency array.",["624"],["625"],"React Hook useEffect has a missing dependency: 'vdata'. Either include it or remove the dependency array. You can also do a functional update 'setvdata(v => ...)' if you only need 'vdata' in the 'setvdata' call.",["626"],"React Hook useEffect has missing dependencies: 'navigate', 'pid', and 'vid'. Either include them or remove the dependency array.",["627"],"React Hook useEffect has a missing dependency: 'getCategorydata'. Either include it or remove the dependency array.",["628"],"React Hook useEffect has missing dependencies: 'taxdata.gst', 'taxdata.manufacturers_sales_tax', 'taxdata.retails_sales_tax', 'taxdata.value_added_tax', 'taxdata.wholesale_sales_tax', and 'variantarray'. Either include them or remove the dependency array. You can also do a functional update 'setvariantarray(v => ...)' if you only need 'variantarray' in the 'setvariantarray' call.",["629"],["630"],"React Hook useEffect has missing dependencies: 'currentdate', 'getVendorData', 'searchdata.brand', 'searchdata.category', 'searchdata.manufacturing_date', 'searchdata.product_title_name', and 'searchdata.vendor'. Either include them or remove the dependency array.",["631"],["632"],"React Hook useEffect has missing dependencies: 'cat_name_data', 'getCategorydatafilter', 'getVendorData', 'searchdata.brand', 'searchdata.category', 'searchdata.product_title_name', 'searchdata.status', 'searchdata.vendor', and 'token'. Either include them or remove the dependency array.",["633"],"React Hook useEffect has missing dependencies: 'SearchTransection.method', 'SearchTransection.order_id', 'SearchTransection.status', and 'token'. Either include them or remove the dependency array.",["634"],["635"],"React Hook useEffect has missing dependencies: 'Searchad.admin_name', 'Searchad.admin_type', and 'token'. Either include them or remove the dependency array.",["636"],["637"],"React Hook useEffect has a missing dependency: 'coupondata'. Either include it or remove the dependency array. You can also do a functional update 'setcoupondata(c => ...)' if you only need 'coupondata' in the 'setcoupondata' call.",["638"],["639"],"React Hook useEffect has a missing dependency: 'addCategory'. Either include it or remove the dependency array.",["640"],"React Hook useEffect has missing dependencies: 'VenderData' and 'fetchData'. Either include them or remove the dependency array.",["641"],["642"],["643"],["644"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["645"],["646"],["647"],["648"],"no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'fetchEmailData'. Either include it or remove the dependency array.",["649"],"React Hook useEffect has a missing dependency: 'fetchNotificationData'. Either include it or remove the dependency array.",["650"],{"desc":"651","fix":"652"},{"desc":"653","fix":"654"},{"desc":"655","fix":"656"},{"desc":"657","fix":"658"},{"desc":"659","fix":"660"},{"desc":"661","fix":"662"},{"desc":"663","fix":"664"},{"desc":"665","fix":"666"},{"desc":"667","fix":"668"},{"desc":"669","fix":"670"},{"desc":"671","fix":"672"},{"desc":"673","fix":"674"},{"desc":"675","fix":"676"},{"desc":"677","fix":"678"},{"desc":"679","fix":"680"},{"desc":"681","fix":"682"},{"desc":"673","fix":"683"},{"desc":"677","fix":"684"},{"desc":"679","fix":"685"},{"desc":"681","fix":"686"},{"desc":"687","fix":"688"},{"desc":"689","fix":"690"},{"desc":"691","fix":"692"},{"desc":"693","fix":"694"},{"desc":"691","fix":"695"},{"desc":"693","fix":"696"},{"desc":"693","fix":"697"},{"desc":"698","fix":"699"},{"desc":"700","fix":"701"},{"desc":"702","fix":"703"},{"desc":"704","fix":"705"},{"desc":"706","fix":"707"},{"desc":"708","fix":"709"},{"desc":"710","fix":"711"},{"desc":"712","fix":"713"},{"desc":"714","fix":"715"},{"desc":"716","fix":"717"},{"desc":"689","fix":"718"},{"desc":"719","fix":"720"},{"desc":"691","fix":"721"},{"desc":"722","fix":"723"},{"desc":"724","fix":"725"},{"desc":"681","fix":"726"},{"desc":"727","fix":"728"},{"desc":"729","fix":"730"},{"desc":"731","fix":"732"},{"desc":"681","fix":"733"},{"desc":"734","fix":"735"},{"desc":"736","fix":"737"},{"desc":"736","fix":"738"},{"desc":"736","fix":"739"},{"desc":"736","fix":"740"},{"desc":"741","fix":"742"},{"desc":"741","fix":"743"},{"desc":"736","fix":"744"},{"desc":"736","fix":"745"},{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},"Update the dependencies array to be: [apicall, changstatus, searchdata.created_on, searchdata.status, token]",{"range":"750","text":"751"},"Update the dependencies array to be: [UserData, apicall, orderid, token]",{"range":"752","text":"753"},"Update the dependencies array to be: [apicall, variantapicall, Alert, fetchdata, getVendorData]",{"range":"754","text":"755"},"Update the dependencies array to be: [scategory, indVal, productdata]",{"range":"756","text":"757"},"Update the dependencies array to be: [handleShow]",{"range":"758","text":"759"},"Update the dependencies array to be: [variantarray.mrp, variantarray.discount, taxdata, totaltaxx, variantarray, product_price, saleprice]",{"range":"760","text":"761"},"Update the dependencies array to be: [productdata, variantmainarray]",{"range":"762","text":"763"},"Update the dependencies array to be: [customarray, productdata]",{"range":"764","text":"765"},"Update the dependencies array to be: [Docnamearray, productdata]",{"range":"766","text":"767"},"Update the dependencies array to be: [variantarray.mrp, variantarray.discount, productdata.value_added_tax, productdata.gst, productdata.wholesale_sales_tax, productdata.retails_sales_tax, productdata.manufacturers_sales_tax, variantarray]",{"range":"768","text":"769"},"Update the dependencies array to be: [OnVendorDetail]",{"range":"770","text":"771"},"Update the dependencies array to be: [Docnamearray, addvendordata]",{"range":"772","text":"773"},"Update the dependencies array to be: [apicall, onImgView]",{"range":"774","text":"775"},"Update the dependencies array to be: [AddCustom, descval, headerval, scall]",{"range":"776","text":"777"},"Update the dependencies array to be: [addvendordata, customarray]",{"range":"778","text":"779"},"Update the dependencies array to be: [apicall, token]",{"range":"780","text":"781"},{"range":"782","text":"773"},{"range":"783","text":"777"},{"range":"784","text":"779"},{"range":"785","text":"781"},"Update the dependencies array to be: [invoice_no, oreder_details, token]",{"range":"786","text":"787"},"Update the dependencies array to be: [apicall, getVendorData, searchdata.brand, searchdata.category, searchdata.manufacturing_date, searchdata.product_title_name, searchdata.vendor]",{"range":"788","text":"789"},"Update the dependencies array to be: [apicall, getCategoryNameData]",{"range":"790","text":"791"},"Update the dependencies array to be: [apicall, cat_name_data, getVendorData, searchdata.brand, searchdata.category, searchdata.product_title_name, searchdata.status, searchdata.vendor, token]",{"range":"792","text":"793"},{"range":"794","text":"791"},{"range":"795","text":"793"},{"range":"796","text":"793"},"Update the dependencies array to be: [apicall, getVendorData, searchdata.brand, searchdata.category, searchdata.product_title_name, searchdata.vendor, token]",{"range":"797","text":"798"},"Update the dependencies array to be: [productjson, props.show]",{"range":"799","text":"800"},"Update the dependencies array to be: [varietyjson]",{"range":"801","text":"802"},"Update the dependencies array to be: [pdata, seoarray]",{"range":"803","text":"804"},"Update the dependencies array to be: [variantarray, varietyjson.quantity]",{"range":"805","text":"806"},"Update the dependencies array to be: [customarray, pdata]",{"range":"807","text":"808"},"Update the dependencies array to be: [variantmainarray, vdata]",{"range":"809","text":"810"},"Update the dependencies array to be: [navigate, pid, variantapicall, vid]",{"range":"811","text":"812"},"Update the dependencies array to be: [getCategorydata, productdata.category]",{"range":"813","text":"814"},"Update the dependencies array to be: [variantarray.mrp, variantarray.discount, productdata, variantapicall, variantarray, taxdata.gst, taxdata.wholesale_sales_tax, taxdata.retails_sales_tax, taxdata.manufacturers_sales_tax, taxdata.value_added_tax]",{"range":"815","text":"816"},{"range":"817","text":"789"},"Update the dependencies array to be: [apicall, currentdate, getVendorData, searchdata.brand, searchdata.category, searchdata.manufacturing_date, searchdata.product_title_name, searchdata.vendor]",{"range":"818","text":"819"},{"range":"820","text":"791"},"Update the dependencies array to be: [apicall, cat_name_data, getCategorydatafilter, getVendorData, searchdata.brand, searchdata.category, searchdata.product_title_name, searchdata.status, searchdata.vendor, token]",{"range":"821","text":"822"},"Update the dependencies array to be: [SearchTransection.method, SearchTransection.order_id, SearchTransection.status, apicall, token]",{"range":"823","text":"824"},{"range":"825","text":"781"},"Update the dependencies array to be: [Searchad.admin_name, Searchad.admin_type, apicall, token]",{"range":"826","text":"827"},"Update the dependencies array to be: [apicall, dltapicall, token]",{"range":"828","text":"829"},"Update the dependencies array to be: [coupondata]",{"range":"830","text":"831"},{"range":"832","text":"781"},"Update the dependencies array to be: [indVal, apicall, addCategory]",{"range":"833","text":"834"},"Update the dependencies array to be: [VenderData, apicall, fetchData]",{"range":"835","text":"836"},{"range":"837","text":"836"},{"range":"838","text":"836"},{"range":"839","text":"836"},"Update the dependencies array to be: [apicall, fetchData]",{"range":"840","text":"841"},{"range":"842","text":"841"},{"range":"843","text":"836"},{"range":"844","text":"836"},"Update the dependencies array to be: [apicall, changstatus, fetchEmailData]",{"range":"845","text":"846"},"Update the dependencies array to be: [apicall, changstatus, fetchNotificationData]",{"range":"847","text":"848"},[1964,1986],"[apicall, changstatus, searchdata.created_on, searchdata.status, token]",[2317,2326],"[UserData, apicall, orderid, token]",[12787,12819],"[apicall, variantapicall, Alert, fetchdata, getVendorData]",[15258,15277],"[scategory, indVal, productdata]",[20319,20321],"[handleShow]",[28818,28868],"[variantarray.mrp, variantarray.discount, taxdata, totaltaxx, variantarray, product_price, saleprice]",[43897,43915],"[productdata, variantmainarray]",[44852,44865],"[customarray, productdata]",[44986,45000],"[Docnamearray, productdata]",[47238,47467],"[variantarray.mrp, variantarray.discount, productdata.value_added_tax, productdata.gst, productdata.wholesale_sales_tax, productdata.retails_sales_tax, productdata.manufacturers_sales_tax, variantarray]",[3304,3306],"[OnVendorDetail]",[3432,3446],"[Docnamearray, addvendordata]",[6202,6211],"[apicall, onImgView]",[7372,7379],"[AddCustom, descval, headerval, scall]",[7991,8004],"[addvendordata, customarray]",[9681,9690],"[apicall, token]",[9816,9830],[16684,16691],[17273,17286],[1812,1821],[911,913],"[invoice_no, oreder_details, token]",[4874,4883],"[apicall, getVendorData, searchdata.brand, searchdata.category, searchdata.manufacturing_date, searchdata.product_title_name, searchdata.vendor]",[2216,2225],"[apicall, getCategoryNameData]",[5938,5947],"[apicall, cat_name_data, getVendorData, searchdata.brand, searchdata.category, searchdata.product_title_name, searchdata.status, searchdata.vendor, token]",[9712,9721],[11203,11212],[12748,12757],[5355,5364],"[apicall, getVendorData, searchdata.brand, searchdata.category, searchdata.product_title_name, searchdata.vendor, token]",[6149,6161],"[productjson, props.show]",[6220,6222],"[varietyjson]",[6682,6692],"[pdata, seoarray]",[6769,6783],"[variantarray, varietyjson.quantity]",[8693,8706],"[customarray, pdata]",[9717,9735],"[variantmainarray, vdata]",[4461,4477],"[navigate, pid, variantapicall, vid]",[4618,4640],"[getCategorydata, productdata.category]",[12930,13000],"[variantarray.mrp, variantarray.discount, productdata, variantapicall, variantarray, taxdata.gst, taxdata.wholesale_sales_tax, taxdata.retails_sales_tax, taxdata.manufacturers_sales_tax, taxdata.value_added_tax]",[4122,4131],[4510,4519],"[apicall, currentdate, getVendorData, searchdata.brand, searchdata.category, searchdata.manufacturing_date, searchdata.product_title_name, searchdata.vendor]",[3826,3835],[5321,5330],"[apicall, cat_name_data, getCategorydatafilter, getVendorData, searchdata.brand, searchdata.category, searchdata.product_title_name, searchdata.status, searchdata.vendor, token]",[1356,1365],"[SearchTransection.method, SearchTransection.order_id, SearchTransection.status, apicall, token]",[5923,5932],[3740,3749],"[Searchad.admin_name, Searchad.admin_type, apicall, token]",[3511,3532],"[apicall, dltapicall, token]",[7919,7921],"[coupondata]",[4675,4684],[8482,8499],"[indVal, apicall, addCategory]",[19185,19194],"[VenderData, apicall, fetchData]",[4040,4049],[8861,8870],[8644,8653],[4980,4989],"[apicall, fetchData]",[3822,3831],[4104,4113],[4028,4037],[9030,9052],"[apicall, changstatus, fetchEmailData]",[9515,9537],"[apicall, changstatus, fetchNotificationData]"]